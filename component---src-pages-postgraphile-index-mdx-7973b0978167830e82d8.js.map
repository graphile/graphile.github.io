{"version":3,"sources":["webpack:///./src/pages/postgraphile/index.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","blue","bg","className","href","style","margin","span","src","postgresPostgraphileGraphql","maxWidth","from","to","offset","via","down","bullets","name","role","link","linkIcon","isMDXComponent"],"mappings":"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","file":"component---src-pages-postgraphile-index-mdx-7973b0978167830e82d8.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport MarketingLayout from '$components/MarketingLayout';\nimport MailchimpSignup from '$components/MailchimpSignup';\nimport Hero from '$components/Hero';\nimport { Flex, Col } from '$components/Flex';\nimport MarketingSection from '$components/MarketingSection';\nimport MarketingDivide from '$components/MarketingDivide';\nimport MarketingCodebox from '$components/MarketingCodebox';\nimport MarketingBullets from '$components/MarketingBullets';\nimport postgresPostgraphileGraphql from '$images/postgres_postgraphile_graphql.png';\nimport Testimonial from '$components/MarketingTestimonial';\nexport const _frontmatter = {\n  \"layout\": \"marketing\",\n  \"path\": \"/postgraphile/\",\n  \"title\": \"PostGraphile - full GraphQL API server in an instant from PostgreSQL database\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <MarketingLayout blue mdxType=\"MarketingLayout\">\n      <Hero bg=\"white\" mdxType=\"Hero\">\n        <h2>{`PostGraphile Instant GraphQL API`}</h2>\n        <br />\n        <div className='flex'>\n          <a className='button--solid-light' href='/postgraphile/introduction/'><span className='fas fa-book-open' /> Documentation <span className='fas fa-fw fa-arrow-right' /></a>\n        </div>\n        <div className='flex'>\n          <div style={{\n            margin: '0 0.5rem 0 0'\n          }}><a className='button--solid' href='https://discord.gg/graphile'><span className='fab fa-discord' /> Join Chat</a></div>\n          <div style={{\n            margin: '0 0.5rem 0 0'\n          }}><a className='button--solid' href='https://github.com/graphile/postgraphile'><span className='fas fa-star' /> View on GitHub</a></div>\n        </div>\n      </Hero>\n      <MarketingSection bg=\"white\" mdxType=\"MarketingSection\">\n        <Flex mdxType=\"Flex\">\n          <Col className=\"center\" span=\"8\" mdxType=\"Col\">\n            <img src={postgresPostgraphileGraphql} style={{\n              maxWidth: '100%'\n            }} />\n          </Col>\n        </Flex>\n      </MarketingSection>\n      <MarketingDivide from=\"white\" to=\"dark\" mdxType=\"MarketingDivide\" />\n      <MarketingSection bg=\"dark\" mdxType=\"MarketingSection\">\n        <Flex mdxType=\"Flex\">\n          <Col span=\"8\" offset=\"2\" className='tc' mdxType=\"Col\">\n            <h3>{`Instantly spin-up a GraphQL API server by pointing PostGraphile at your existing PostgreSQL database`}</h3>\n          </Col>\n        </Flex>\n      </MarketingSection>\n      <MarketingDivide from=\"dark\" to=\"light\" via=\"medium\" mdxType=\"MarketingDivide\" />\n      <MarketingSection bg=\"light\" mdxType=\"MarketingSection\">\n        <MarketingCodebox mdxType=\"MarketingCodebox\">\n          <big>Try it now:</big>\n          <div className='mv4'>\n            <big><code>npx postgraphile -c my_db --watch</code></big>\n          </div>\n          <small><em>requires Node.js 8.6 or higher</em></small>\n        </MarketingCodebox>\n        <p className='f7'>\nThis will create the `postgraphile_watch` schema in your database to enable `--watch` mode. If your database is on another machine, you may pass a connection string in place of <tt>my_db</tt>. Connection strings have the form:\n        </p>\n        <p className='f7'>\n          <tt>postgres://pg_user:pg_pass@pg_host:pg_port/pg_db?ssl=true</tt>\n        </p>\n      </MarketingSection>\n      <MarketingDivide from=\"light\" to=\"nodes\" via=\"medium\" down mdxType=\"MarketingDivide\" />\n      <MarketingSection bg=\"nodes\" mdxType=\"MarketingSection\">\n        <div style={{\n          maxWidth: '48em',\n          margin: 'auto'\n        }}>\n          <h3>{`Rapidly develop lightning-fast powerful applications`}</h3>\n          <big>PostGraphile automatically detects tables, columns, indexes, relationships,\nviews, types, functions, comments, and more &mdash; providing a GraphQL server that\nis highly intelligent about your data, and that automatically updates itself\nwithout restarting when you modify your database.</big>\n          <MarketingBullets bullets={['Strong PostgreSQL support', 'GraphQL best practices', 'Simple to deploy and scale', 'Highly customisable', 'Impressively high performance', 'Granular authorisation via RLS', 'Open source under MIT license', 'Powerful plugin system']} mdxType=\"MarketingBullets\" />\n        </div>\n      </MarketingSection>\n      <MarketingDivide from=\"nodes\" to=\"dark\" via=\"medium\" mdxType=\"MarketingDivide\" />\n      <MarketingSection bg=\"dark\" mdxType=\"MarketingSection\">\n        <h3>{`What people are saying`}</h3>\n        <div className=\"mw9 ph3-ns flex flex-wrap justify-between\">\n          <Testimonial name=\"Chad F\" role=\"senior technical lead\" link=\"https://chads.website/development/2018/08/03/How-GraphQL-Saved-My-Project.html\" mdxType=\"Testimonial\">\n  Thanks for making GraphQL something I can use on my project in a robust way\n  with <strong>minimal effort</strong>. 500-1500 requests per second on a\n  single server is pretty awesome.\n          </Testimonial>\n          <Testimonial name=\"Sam L\" role=\"full stack developer\" link=\"https://gitter.im/graphile/postgraphile?at=5b65d555e9ab53770c8c41a1\" mdxType=\"Testimonial\">\n  This project, Benjie's handling of it, the docs, support, and community is\n  awesome all around. <strong>PostGraphile is a powerful, idomatic, and elegant\n  tool.</strong>\n          </Testimonial>\n          <Testimonial name=\"Max D\" role=\"software consultant\" link=\"https://twitter.com/maxdesiatov/status/1001419221102940160\" linkIcon=\"fab fa-twitter\" mdxType=\"Testimonial\">\n  Recently I launched a few mobile and web apps using GraphQL, Great stuff, not\n  least thanks to wonderful PostGraphile and Apollo. <strong>At this point,\n  itâ€™s quite hard for me to come back and enjoy working with\n  REST.</strong>\n          </Testimonial>\n          <Testimonial name=\"Bradley A\" role=\"CTO\" link=\"https://twitter.com/bradleyayers/status/1012557510346080256\" linkIcon='fab fa-twitter' mdxType=\"Testimonial\">\n  I setup my backend to use PostGraphile directly when querying the local\n  database. It's removed a bunch of hand-written SQL, added type-safety to\n  verify Postgres schema compatibility, and <strong>created a more consistent\n  dev experience for frontend/backend code.</strong>\n          </Testimonial>\n          <Testimonial name=\"Steven M\" role=\"VP engineering\" mdxType=\"Testimonial\">\n  Our company is under going a technology shift to use more a more modern\n  stack. A large piece of this shift is our desire to use a GraphQL interface\n  to our Postgres server. After researching we decided to try PostGraphile\n  from the graphile.org site and <strong>we couldn't be happier</strong>.\n  It's very expansive and configurable and the maintainers are available to\n  ask questions and it's nice to see such an active group fixing bugs and\n  adding enhancements. We're very happy with our choice!\n          </Testimonial>\n        </div>\n      </MarketingSection>\n      <MarketingDivide from=\"dark\" to=\"light\" down mdxType=\"MarketingDivide\" />\n      <MarketingSection bg=\"light\" mdxType=\"MarketingSection\">\n        <MailchimpSignup mdxType=\"MailchimpSignup\" />\n      </MarketingSection>\n      <MarketingDivide from=\"light\" to=\"medium\" mdxType=\"MarketingDivide\" />\n      <MarketingSection bg=\"medium\" mdxType=\"MarketingSection\">\n        <MarketingBullets bullets={[['Client-facing GraphQL server', 'No need for complex server architectures, containers, etc: PostGraphile is pure Node.js and can be embedded in your existing Node.js project'], ['Server-side rendering', 'Issue requests to your PostGraphile API without network roundtrips, fantastic for React SSR'], ['Hot-reloading GraphQL API', 'Automatically re-generate the GraphQL schema when your database changes when you\\'re using `--watch`'], ['Lightning fast', 'Much faster [performance](/postgraphile/performance/) than even a hand-rolled GraphQL schema using `DataLoader`'], ['No N+1 problem', 'PostGraphile compiles a query tree of any depth into a single SQL statement, resulting in extremely efficient execution'], ['Auto-generated documentation', 'Database comments are exported to GraphQL and browsable via the built in PostGraphiQL IDE'], ['GraphQL best practices', 'Including: [cursor pagination](https://facebook.github.io/relay/graphql/connections.htm), [global object identification](https://facebook.github.io/relay/graphql/objectidentification.htm), and [Relay mutations](https://relay.dev/docs/en/mutations)'], ['Super secure', 'Implement authorization via PostgreSQL\\'s RBAC and Row-Level Security features, get full-stack security you can trust'], ['Respects database permissions', 'Tables and columns that you don\\'t `GRANT` access to will not be exported via GraphQL when using `--no-ignore-rbac`'], ['Customisable with SQL', 'Excellent PostgreSQL function support, mapping to [custom queries](/postgraphile/custom-queries/), [custom mutations](/postgraphile/custom-mutations/) and [computed columns](/postgraphile/computed-columns/)'], ['Customisable via smart-comments', 'Refine your GraphQL schema with [smart comments](/postgraphile/smart-comments/): rename, omit, enhance with a simple `COMMENT`'], ['Customisable via JS', 'PostGraphile is built from a large number of plugins; get the exact API you desire by replacing or removing existing plugins, building your own with our helpers, or selecting from community plugins'], ['Fully GraphQL compatible', 'We use the [reference GraphQL implementation](http://graphql.org/graphql-js/) under the hood, so you know we\\'re spec compliant']]} mdxType=\"MarketingBullets\" />\n      </MarketingSection>\n    </MarketingLayout>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}