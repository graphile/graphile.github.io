{"componentChunkName":"component---src-templates-page-js","path":"/postgraphile/postgresql-schema-design/","result":{"data":{"remark":{"html":"<p>The Postgres database is rich with features well beyond that of any other\ndatabase. However, most developers do not know the extent to which they can\nleverage the features in Postgres to completely express their application\nbusiness logic in the database.</p>\n<p>Often developers may find themselves re-implementing authentication and\nauthorization in their apps, when Postgres comes with application level security\nfeatures out of the box. Or perhaps developers may rewrite basic insert\nfunctions with some extra app logic where that too may be handled in the\ndatabase.</p>\n<p>This reimplementation of features that come with Postgres is not just an\ninefficient way to spend developer resources, but may also result in an\ninterface that is slower than if the logic was implemented in Postgres itself.\nPostGraphile aims to make developers more efficient and their APIs faster by\npackaging the repeatable work in one open source project that encourages\ncommunity contributions.</p>\n<p>In this tutorial we will walk through the Postgres schema design for a forum\napplication with users who can login and write forum posts. While we will\ndiscuss how you can use the schema we create with PostGraphile, this article\nshould be useful for anyone designing a Postgres schema.</p>\n<p>If you haven't installed PostGraphile already, you can follow our\n<a href=\"/postgraphile/quick-start-guide/\">Quick Start Guide</a> to get PostGraphile up and\nrunning.</p>\n<h3 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h3>\n<ul>\n<li>\n<p><a href=\"#the-basics\">The Basics</a></p>\n<ul>\n<li><a href=\"#setting-up-your-schemas\">Setting Up Your Schemas</a></li>\n<li><a href=\"#the-person-table\">The Person Table</a></li>\n<li><a href=\"#table-documentation\">Table Documentation</a></li>\n<li><a href=\"#the-post-table\">The Post Table</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#database-functions\">Database Functions</a></p>\n<ul>\n<li><a href=\"#set-returning-functions\">Set Returning Functions</a></li>\n<li><a href=\"#triggers\">Triggers</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#authentication-and-authorization\">Authentication and Authorization</a></p>\n<ul>\n<li><a href=\"#storing-emails-and-passwords\">Storing Emails and Passwords</a></li>\n<li><a href=\"#registering-users\">Registering Users</a></li>\n<li><a href=\"#postgres-roles\">Postgres Roles</a></li>\n<li><a href=\"#json-web-tokens\">JSON Web Tokens</a></li>\n<li><a href=\"#logging-in\">Logging In</a></li>\n<li><a href=\"#using-the-authorized-user\">Using the Authorized User</a></li>\n<li><a href=\"#grants\">Grants</a></li>\n<li><a href=\"#row-level-security\">Row Level Security</a></li>\n</ul>\n</li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n<h3 id=\"the-basics\"><a href=\"#the-basics\" aria-label=\"the basics permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Basics</h3>\n<h4 id=\"setting-up-your-schemas\"><a href=\"#setting-up-your-schemas\" aria-label=\"setting up your schemas permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting Up Your Schemas</h4>\n<p>All of our database objects will go into one or two custom Postgres schemas. A\nschema is essentially a namespace, it allows you to create tables with the same\nname like <code class=\"language-text\">a.person</code> and <code class=\"language-text\">b.person</code>.</p>\n<p>You can name your schema anything, we recommend naming your schema after your\napp. This way if you are working on multiple apps in the same database (this\nmight only realistically happen in development), you can easily query the\ndatabases of the different apps. We are going to create two schemas:\n<code class=\"language-text\">forum_example</code>, and <code class=\"language-text\">forum_example_private</code>. To create these schemas we use the\n<a href=\"https://www.postgresql.org/docs/current/static/sql-createschema.html\"><code class=\"language-text\">CREATE SCHEMA</code></a>\ncommand.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">schema</span> forum_example<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">schema</span> forum_example_private<span class=\"token punctuation\">;</span></code></pre></div>\n<p>You could create more or less schemas, it is all up to you and how you want to\nstructure your database. We decided to create two schemas. One of which,\n<code class=\"language-text\">forum_example</code>, is meant to hold data users can see, whereas\n<code class=\"language-text\">forum_example_private</code> will never be directly accessible to users.</p>\n<p>Theoretically we want a user to be able to log in directly to our Postgres\ndatabase, and only be able to create, read, update, and delete data for their\nuser all within SQL. This is a mindshift from how we traditionally use a SQL\ndatabase. Normally, we assume whoever is querying the database has full\nvisibility into the system as the only one with database access is our\napplication. In this tutorial, we want to restrict access at the database level.\nDon’t worry though! Postgres is very secure about this, users will have no more\npermissions than that which you explicitly grant.</p>\n<blockquote>\n<p><strong>Note:</strong> When starting PostGraphile, you will want to use the name of the\nschema you created with the <code class=\"language-text\">--schema</code> option, like so:\n<code class=\"language-text\">postgraphile --schema forum_example</code>. Also, don’t forget to add the <code class=\"language-text\">--watch</code>\nflag, with watch mode enabled PostGraphile will update your API as we add\ntables and types throughout this tutorial.</p>\n</blockquote>\n<h4 id=\"the-person-table\"><a href=\"#the-person-table\" aria-label=\"the person table permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Person Table</h4>\n<p>Now we are going to create the tables in our database which will correspond to\nour users. We will do this by running the Postgres\n<a href=\"https://www.postgresql.org/docs/current/static/sql-createtable.html\"><code class=\"language-text\">CREATE TABLE</code></a>\ncommand. Here is the definition for our person table:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token punctuation\">(</span>\n  id               <span class=\"token keyword\">serial</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>\n  first_name       <span class=\"token keyword\">text</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">check</span> <span class=\"token punctuation\">(</span>char_length<span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  last_name        <span class=\"token keyword\">text</span> <span class=\"token keyword\">check</span> <span class=\"token punctuation\">(</span>char_length<span class=\"token punctuation\">(</span>last_name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  about            <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>\n  created_at       <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">default</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we have created a table with <code class=\"language-text\">id</code>, <code class=\"language-text\">first_name</code>, <code class=\"language-text\">last_name</code>, <code class=\"language-text\">about</code>, and\n<code class=\"language-text\">created_at</code> columns (we will add an <code class=\"language-text\">updated_at</code> column later). Let’s break\ndown exactly what each line in this command does, we will only do this once. If\nyou already understand, you can skip ahead.</p>\n<ol>\n<li><code class=\"language-text\">create table forum_example.person</code>: This tells Postgres that we are\ncreating a table in the <code class=\"language-text\">forum_example</code> schema named <code class=\"language-text\">person</code>. This table\nwill represent all of our forum’s users.</li>\n<li><code class=\"language-text\">id serial primary key</code>: This line establishes an auto-incrementing id field\nwhich is always guaranteed to be unique. The first person we create will\nhave an id of 1, the second user will have an id of 2, and so on. The\n<code class=\"language-text\">primary key</code> bit is also very important. PostGraphile will use the\n<code class=\"language-text\">primary key</code> of a table in many places to uniquely identify an object,\nincluding the globally unique id field.</li>\n<li><code class=\"language-text\">first_name text not null check (char_length(first_name) &lt; 80)</code>: We want all\nof our users to enter their first name and last name separately, so this\ncolumn definition will create a column named <code class=\"language-text\">first_name</code>, of type <code class=\"language-text\">text</code>,\nthat is required (<code class=\"language-text\">not null</code>), and that must be less than 80 characters long\n(<code class=\"language-text\">check (char_length(first_name) &lt; 80)</code>).\n<a href=\"https://www.postgresql.org/docs/current/static/ddl-constraints.html\">Check constraints</a>\nare a very powerful feature in Postgres for data validation.</li>\n<li><code class=\"language-text\">last_name text check (char_length(last_name) &lt; 80)</code>: This is very similar\nto our column definition for <code class=\"language-text\">first_name</code>, except it is missing <code class=\"language-text\">not null</code>.\nThis means that unlike the <code class=\"language-text\">first_name</code> column, <code class=\"language-text\">last_name</code> is not required.</li>\n<li><code class=\"language-text\">about text</code>: We want users to be able to express themselves! So they get to\nwrite a mini forum post which will go on their profile page.</li>\n<li><code class=\"language-text\">created_at timestamp default now()</code>: This final column definition will\nprovide us with some extra meta-information about their user. If not\nspecified explicitly, the <code class=\"language-text\">created_at</code> timestamp will default to the time\nthe row was inserted.</li>\n</ol>\n<p>And that’s our person table! Pretty simple, right?</p>\n<p>The syntax and features of the Postgres\n<a href=\"https://www.postgresql.org/docs/current/static/sql-createtable.html\"><code class=\"language-text\">CREATE TABLE</code></a>\ncommand are fairly easy to learn and understand. Creating tables is the easiest,\nbut also the most fundamental part of your schema design.</p>\n<blockquote>\n<p><strong>Note:</strong> We prefer singular identifers like <code class=\"language-text\">forum_example.person</code> over\n<code class=\"language-text\">forum_example.people</code> because when you create a table, it is like you are\ncreating a class in an object-oriented language. Classes have singular names\nlike “Person” while collections will often have plural names like “People.”\nTable as a class is a better analogy than table as a collection because\nPostgres itself will internally call tables “classes.”</p>\n</blockquote>\n<blockquote>\n<p><strong>Note:</strong> In case you don’t like serial id of our table above, an alternative\nto the <code class=\"language-text\">serial</code> primary key is UUIDs. To use UUIDs you would just need to add\nthe popular UUID extension, <code class=\"language-text\">uuid-ossp</code>, in your database setup, and specify a\ndefault in your table creation. Like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> extension <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> <span class=\"token string\">\"uuid-ossp\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token punctuation\">(</span>\n  id uuid <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">default</span> uuid_generate_v1mc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Alternatively you could use fully random UUIDs:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> extension <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> <span class=\"token string\">\"pgcrypto\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token punctuation\">(</span>\n  id uuid <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">default</span> gen_random_uuid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There are pros and cons to both approaches, choose what works best for your\napplication!</p>\n</blockquote>\n<h4 id=\"table-documentation\"><a href=\"#table-documentation\" aria-label=\"table documentation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table Documentation</h4>\n<p>Now that we have created our table, we want to document it within the Postgres\ndatabase. By adding comments to our table and its columns using the Postgres\n<a href=\"https://www.postgresql.org/docs/current/static/sql-comment.html\"><code class=\"language-text\">COMMENT</code></a>\ncommand, we will allow tools like PostGraphile to display rich domain specific\ndocumentation.</p>\n<p>To add comments, just see the SQL below:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token operator\">is</span> <span class=\"token string\">'A user of the forum.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>id <span class=\"token operator\">is</span> <span class=\"token string\">'The primary unique identifier for the person.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">is</span> <span class=\"token string\">'The person’s first name.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>last_name <span class=\"token operator\">is</span> <span class=\"token string\">'The person’s last name.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>about <span class=\"token operator\">is</span> <span class=\"token string\">'A short description about the user, written by the user.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>created_at <span class=\"token operator\">is</span> <span class=\"token string\">'The time this person was created.'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Incredibly simple, yet also incredibly powerful.</p>\n<blockquote>\n<p><strong>Note:</strong> Feel free to write your comments in Markdown! Most tools, including\nGraphiQL which PostGraphile uses, will render your comments with the\nappropriate styles.</p>\n</blockquote>\n<p>With this we have completed our person table, now let’s create a table for our\nforum posts.</p>\n<h4 id=\"the-post-table\"><a href=\"#the-post-table\" aria-label=\"the post table permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Post Table</h4>\n<p>The users of our forum will want to be able to create posts. That’s the entire\nreason we have a forum after all. To create the post table we go through a very\nsimilar process as creating our <code class=\"language-text\">forum_example.person</code> table, but first we want\nto create a type we will use in one of the columns. See the SQL below:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">type</span> forum_example<span class=\"token punctuation\">.</span>post_topic <span class=\"token keyword\">as</span> <span class=\"token keyword\">enum</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'discussion'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'inspiration'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'help'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'showcase'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The Postgres\n<a href=\"https://www.postgresql.org/docs/current/static/sql-createtype.html\"><code class=\"language-text\">CREATE TYPE</code></a>\ncommand will let you create a custom type in your database which will allow you\nto do some really cool things. You can create a\n<a href=\"https://www.postgresql.org/docs/current/static/rowtypes.html\">composite type</a>\nwhich is basically a typed object in GraphQL terms, you can create a\n<a href=\"https://www.postgresql.org/docs/current/static/rangetypes.html\">range type</a>\nwhich represents exactly what you might think, or you can create an\n<a href=\"https://www.postgresql.org/docs/current/static/datatype-enum.html\">enum type</a>\nwhich is what we did here.</p>\n<p>Enum types are a static set of values, you <em>must</em> use one of the string values\nthat make up the enum in any column of the enum’s type. Having this type is\nuseful for us, because we want our forum posts to have one, or none, topics so\nuser’s may easily see what a post is about.</p>\n<blockquote>\n<p><strong>Note:</strong> PostGraphile implements custom handling for user-defined types. An\nenum type like that defined above will be turned into a GraphQL enum that\nlooks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">PostTopic</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">DISCUSSION</span>\n  <span class=\"token constant\">INSPIRATION</span>\n  <span class=\"token constant\">HELP</span>\n  <span class=\"token constant\">SHOWCASE</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can also create custom composite types which will turn into GraphQL object\ntypes with PostGraphile.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">type</span> my_schema<span class=\"token punctuation\">.</span>my_type <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span>\n  foo <span class=\"token keyword\">integer</span><span class=\"token punctuation\">,</span>\n  bar <span class=\"token keyword\">integer</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Would become the following GraphQL type:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">foo</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span>\n  <span class=\"token attr-name\">bar</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n<p>Now it is time to actually create our post table:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>post <span class=\"token punctuation\">(</span>\n  id               <span class=\"token keyword\">serial</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>\n  author_id        <span class=\"token keyword\">integer</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">references</span> forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  headline         <span class=\"token keyword\">text</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">check</span> <span class=\"token punctuation\">(</span>char_length<span class=\"token punctuation\">(</span>headline<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">280</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  body             <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>\n  topic            forum_example<span class=\"token punctuation\">.</span>post_topic<span class=\"token punctuation\">,</span>\n  created_at       <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">default</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>post <span class=\"token operator\">is</span> <span class=\"token string\">'A forum post written by a user.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>id <span class=\"token operator\">is</span> <span class=\"token string\">'The primary key for the post.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>headline <span class=\"token operator\">is</span> <span class=\"token string\">'The title written by the user.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>author_id <span class=\"token operator\">is</span> <span class=\"token string\">'The id of the author user.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>topic <span class=\"token operator\">is</span> <span class=\"token string\">'The topic this has been posted in.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>body <span class=\"token operator\">is</span> <span class=\"token string\">'The main body text of our post.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>created_at <span class=\"token operator\">is</span> <span class=\"token string\">'The time this post was created.'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pretty basic. Our <code class=\"language-text\">headline</code> is twice as long as a tweet, and to use our\n<code class=\"language-text\">forum_example.post_topic</code> type we wrote it as the column type just as we may\nwrite <code class=\"language-text\">integer</code> as the column type. We also made sure to include comments.</p>\n<p>Now that we have gone over the basics, let’s explore Postgres functions and see\nhow we can use them to extend the functionality of our database.</p>\n<h3 id=\"database-functions\"><a href=\"#database-functions\" aria-label=\"database functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Database Functions</h3>\n<p>The Postgres\n<a href=\"https://www.postgresql.org/docs/current/static/sql-createfunction.html\"><code class=\"language-text\">CREATE FUNCTION</code></a>\ncommand is truly amazing. It allows us to write functions for our database in\nSQL, and other languages including JavaScript and Ruby!</p>\n<p>The following is a basic Postgres function:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">add</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">as</span> $$\n <span class=\"token keyword\">select</span> a <span class=\"token operator\">+</span> b\n$$ <span class=\"token keyword\">language</span> <span class=\"token keyword\">sql</span> stable<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note the form. The double dollar signs (<code class=\"language-text\">$$</code>) open and close the function, and\nat the very end we have <code class=\"language-text\">language sql stable</code>. <code class=\"language-text\">language sql</code> means that the\nfunction is written in SQL, pretty obvious. If you wrote your function in Ruby\nit may be <code class=\"language-text\">language plruby</code>. The next word, <code class=\"language-text\">stable</code>, means that this function\n<em>does not</em> mutate the database. By default Postgres assumes all functions will\nmutate the database, you must mark your function with <code class=\"language-text\">stable</code> for Postgres, and\nPostGraphile, to know your function is a query and not a mutation.</p>\n<blockquote>\n<p><strong>Note:</strong> If you are interested in running JavaScript or Ruby in Postgres,\ncheck out <a href=\"https://blog.heroku.com/javascript_in_your_postgres\">PL/V8</a> and\n<a href=\"https://github.com/knu/postgresql-plruby\">PL/ruby</a> respectively. It is\nrecommended that you use SQL and PL/pgSQL (which comes native with Postgres)\nwhenever you can (even if they are a pain). There is plenty of documentation\nand StackOverflow answers on both SQL and PL/pgSQL. However, there are\nalternatives if you so choose.</p>\n</blockquote>\n<p>That function above isn’t so useful for us in our schema, so let’s write some\nfunctions which will be useful. We will define three.</p>\n<p>First, a function which will concatenate the users first and last name to return\ntheir full name:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>person_full_name<span class=\"token punctuation\">(</span>person forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token keyword\">text</span> <span class=\"token keyword\">as</span> $$\n  <span class=\"token keyword\">select</span> person<span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">||</span> <span class=\"token string\">' '</span> <span class=\"token operator\">||</span> person<span class=\"token punctuation\">.</span>last_name\n$$ <span class=\"token keyword\">language</span> <span class=\"token keyword\">sql</span> stable<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>person_full_name<span class=\"token punctuation\">(</span>forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">)</span> <span class=\"token operator\">is</span> <span class=\"token string\">'A person’s full name which is a concatenation of their first and last name.'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Second, a function which will get a summary of a forum post:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>post_summary<span class=\"token punctuation\">(</span>\n  post forum_example<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">,</span>\n  length <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span>\n  omission <span class=\"token keyword\">text</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'…'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token keyword\">text</span> <span class=\"token keyword\">as</span> $$\n  <span class=\"token keyword\">select</span> <span class=\"token keyword\">case</span>\n    <span class=\"token keyword\">when</span> post<span class=\"token punctuation\">.</span>body <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">then</span> <span class=\"token boolean\">null</span>\n    <span class=\"token keyword\">else</span> substr<span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> omission\n  <span class=\"token keyword\">end</span>\n$$ <span class=\"token keyword\">language</span> <span class=\"token keyword\">sql</span> stable<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>post_summary<span class=\"token punctuation\">(</span>forum_example<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">is</span> <span class=\"token string\">'A truncated version of the body for summaries.'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Third, a function that will get a person’s most recent forum post.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>person_latest_post<span class=\"token punctuation\">(</span>person forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> forum_example<span class=\"token punctuation\">.</span>post <span class=\"token keyword\">as</span> $$\n  <span class=\"token keyword\">select</span> post<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n  <span class=\"token keyword\">from</span> forum_example<span class=\"token punctuation\">.</span>post <span class=\"token keyword\">as</span> post\n  <span class=\"token keyword\">where</span> post<span class=\"token punctuation\">.</span>author_id <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>id\n  <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> created_at <span class=\"token keyword\">desc</span>\n  <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span>\n$$ <span class=\"token keyword\">language</span> <span class=\"token keyword\">sql</span> stable<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>person_latest_post<span class=\"token punctuation\">(</span>forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">)</span> <span class=\"token operator\">is</span> <span class=\"token string\">'Get’s the latest post written by the person.'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Don’t get too stuck on the function implementations. It is fairly easy to\ndiscover how to express what you want in SQL through a quick search of the\nPostgres documentation (which is excellent!). These functions are here to give\nyou some examples of what functions in Postgres look like. Also note how we\nadded comments to our functions with the\n<a href=\"https://www.postgresql.org/docs/current/static/sql-comment.html\"><code class=\"language-text\">COMMENT</code></a>\ncommand, just like we add comments to our tables.</p>\n<blockquote>\n<p><strong>Note:</strong> Any function which meets the following conditions will be treated as\na computed field by PostGraphile:</p>\n<ol>\n<li>The function has a table row as the first argument.</li>\n<li>The function is in the same schema as the table of the first argument.</li>\n<li>The function’s name is prefixed by the table’s name.</li>\n<li>The function is marked as <code class=\"language-text\">stable</code> or <code class=\"language-text\">immutable</code> which makes it a query\nand not a mutation.</li>\n</ol>\n<p>All three of the above functions meet these conditions and as such will be\ncomputed fields. In GraphQL this ends up looking like:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">firstName</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">lastName</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token attr-name\">fullName</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">latestPost</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Post</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n<h4 id=\"set-returning-functions\"><a href=\"#set-returning-functions\" aria-label=\"set returning functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set Returning Functions</h4>\n<p>Sometimes it is useful to not just return single values from your function, but\nperhaps entire tables. What returning a table from a function could mean is you\ncould define a custom ordering, hide rows that were archived, or return a user’s\nactivity feed perhaps. In our case, this Postgres feature makes it easy for us\nto implement search:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>search_posts<span class=\"token punctuation\">(</span>search <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> setof forum_example<span class=\"token punctuation\">.</span>post <span class=\"token keyword\">as</span> $$\n  <span class=\"token keyword\">select</span> post<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n  <span class=\"token keyword\">from</span> forum_example<span class=\"token punctuation\">.</span>post <span class=\"token keyword\">as</span> post\n  <span class=\"token keyword\">where</span> position<span class=\"token punctuation\">(</span>search <span class=\"token operator\">in</span> post<span class=\"token punctuation\">.</span>headline<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">or</span> position<span class=\"token punctuation\">(</span>search <span class=\"token operator\">in</span> post<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n$$ <span class=\"token keyword\">language</span> <span class=\"token keyword\">sql</span> stable<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>search_posts<span class=\"token punctuation\">(</span><span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">is</span> <span class=\"token string\">'Returns posts containing a given search term.'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The difference with this function and the ones before is the return signature\nreads <code class=\"language-text\">returns setof forum_example.post</code>. This function will therefore return\nall of the posts that match our search condition and not just one.</p>\n<blockquote>\n<p><strong>Note:</strong> PostGraphile will treat set returning functions as connections. This\nis what makes them so powerful for PostGraphile users. The function above\nwould be queryable like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">searchPosts</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">search</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">first</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token object\">edges</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">cursor</span>\n      <span class=\"token object\">node</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">headline</span>\n        <span class=\"token property\">body</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n<blockquote>\n<p><strong>Note:</strong> Postgres has awesome text searching capabilities - if you want high\nquality full text searching you don’t need to look outside Postgres. Instead\nlook into the Postgres\n<a href=\"https://www.postgresql.org/docs/current/static/textsearch.html\">Full Text Search</a>\nfunctionality. It is a great feature, but a bit much for our simple example,\nso we just used a simple string position function instead.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note:</strong> Returning an array (<code class=\"language-text\">returns post[]</code>), and returning a set\n(<code class=\"language-text\">returns setof post</code>) are two very different things. When you return an\narray, every single value in the array will always be returned. However, when\nyou return a set it is like returning a table. Users can paginate through a\nset using <code class=\"language-text\">limit</code> and <code class=\"language-text\">offset</code>, but not an array.</p>\n</blockquote>\n<h4 id=\"triggers\"><a href=\"#triggers\" aria-label=\"triggers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Triggers</h4>\n<p>You can also use Postgres functions to define triggers. Triggers in Postgres\nallow you to hook into events that are happening on your tables such as inserts,\nupdates, or deletes. You define your triggers with the\n<a href=\"https://www.postgresql.org/docs/current/static/sql-createtrigger.html\"><code class=\"language-text\">CREATE TRIGGER</code></a>\ncommand, and all trigger functions must return the special type <code class=\"language-text\">trigger</code>.</p>\n<p>To demonstrate how triggers work, we will define a trigger that sets an\n<code class=\"language-text\">updated_at</code> column on our <code class=\"language-text\">forum_example.person</code> and <code class=\"language-text\">forum_example.post</code>\ntables whenever a row is updated. Before we can write the trigger, we need to\nmake sure <code class=\"language-text\">forum_example.person</code> and <code class=\"language-text\">forum_example.post</code> have an <code class=\"language-text\">updated_at</code>\ncolumn! To do this we will use the\n<a href=\"https://www.postgresql.org/docs/current/static/sql-altertable.html\"><code class=\"language-text\">ALTER TABLE</code></a>\ncommand.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token keyword\">add</span> <span class=\"token keyword\">column</span> updated_at <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">default</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>post <span class=\"token keyword\">add</span> <span class=\"token keyword\">column</span> updated_at <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">default</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Our <code class=\"language-text\">updated_at</code> column has now been added to our tables and looks exactly like\nour <code class=\"language-text\">created_at</code> column. It’s a timestamp which defaults to the time the row was\ncreated. Next, let us define our triggers:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> forum_example_private<span class=\"token punctuation\">.</span>set_updated_at<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token keyword\">trigger</span> <span class=\"token keyword\">as</span> $$\n<span class=\"token keyword\">begin</span>\n  new<span class=\"token punctuation\">.</span>updated_at :<span class=\"token operator\">=</span> <span class=\"token keyword\">current_timestamp</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> new<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span>\n$$ <span class=\"token keyword\">language</span> plpgsql<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">trigger</span> person_updated_at before <span class=\"token keyword\">update</span>\n  <span class=\"token keyword\">on</span> forum_example<span class=\"token punctuation\">.</span>person\n  <span class=\"token keyword\">for each row</span>\n  <span class=\"token keyword\">execute</span> <span class=\"token keyword\">procedure</span> forum_example_private<span class=\"token punctuation\">.</span>set_updated_at<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">trigger</span> post_updated_at before <span class=\"token keyword\">update</span>\n  <span class=\"token keyword\">on</span> forum_example<span class=\"token punctuation\">.</span>post\n  <span class=\"token keyword\">for each row</span>\n  <span class=\"token keyword\">execute</span> <span class=\"token keyword\">procedure</span> forum_example_private<span class=\"token punctuation\">.</span>set_updated_at<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To define our trigger we ran three commands. First we created a function named\n<code class=\"language-text\">set_updated_at</code> in our <code class=\"language-text\">forum_example_private</code> schema because we want no one to\ndirectly call this function as it is simply a utility.\n<code class=\"language-text\">forum_example_private.set_updated_at</code> also returns a <code class=\"language-text\">trigger</code> and is\nimplemented in\n<a href=\"https://www.postgresql.org/docs/current/static/plpgsql.html\">PL/pgSQL</a>.</p>\n<p>After we define our <code class=\"language-text\">forum_example_private.set_updated_at</code> function, we can use\nit in the triggers we create with the\n<a href=\"https://www.postgresql.org/docs/current/static/sql-createtrigger.html\"><code class=\"language-text\">CREATE TRIGGER</code></a>\ncommand. The triggers will run before a row is updated by the\n<a href=\"https://www.postgresql.org/docs/current/static/sql-update.html\"><code class=\"language-text\">UPDATE</code></a>\ncommand and will execute the function on every row being updated.</p>\n<blockquote>\n<p><strong>Note:</strong> If you find yourself wanting to do CPU intensive work in triggers,\ninstead consider using Postgres’ pub/sub functionality\n(<a href=\"https://www.postgresql.org/docs/current/static/sql-listen.html\"><code class=\"language-text\">LISTEN</code></a> /\n<a href=\"https://www.postgresql.org/docs/current/static/sql-notify.html\"><code class=\"language-text\">NOTIFY</code></a>) to\nsend the work to a \"worker service\" to be executed asynchronously.\n<a href=\"https://github.com/graphile/worker\">Graphile Worker</a> uses this pattern in a\nfail-safe way; allowing you to run jobs \"in the background\" so that your HTTP\nresponse/application code is not held up. We recommend using Graphile Worker\nwith any Node.js based PostgreSQL database that needs to queue actions such as\nsending emails, push notifications, generating PDF reports and other such\nasynchronous tasks.</p>\n</blockquote>\n<hr>\n<p>That’s about it as far as Postgres functions go! They are a fun, interesting,\nand useful topic to understand when it comes to good Postgres schema design.\nAlways remember, the Postgres documentation is your best friend as you try to\nwrite your own functions. Some important documentation articles we mentioned for\nyour reference are as follows:</p>\n<ul>\n<li><a href=\"https://www.postgresql.org/docs/current/static/sql-createfunction.html\"><code class=\"language-text\">CREATE FUNCTION</code></a></li>\n<li><a href=\"https://www.postgresql.org/docs/current/static/sql-createtrigger.html\"><code class=\"language-text\">CREATE TRIGGER</code></a></li>\n<li><a href=\"https://www.postgresql.org/docs/current/static/plpgsql.html\"><code class=\"language-text\">PL/pgSQL</code></a></li>\n</ul>\n<p>Next up, we are going to learn about auth in Postgres and PostGraphile!</p>\n<h3 id=\"authentication-and-authorization\"><a href=\"#authentication-and-authorization\" aria-label=\"authentication and authorization permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Authentication and Authorization</h3>\n<p>Authentication and authorization is incredibly important whenever you build an\napplication. You want your users to be able to login and out of your service,\nand only edit the content your platform has given them permission to edit.\nPostgres already has great support for authentication and authorization using a\nsecure role based system, so PostGraphile just bridges the gap between the\nPostgres role mechanisms and HTTP based authorization.</p>\n<p>However, before we can dive into implementing authentication, we are missing\nsome pretty important data in our schema. How are users supposed to even login?\nNot by guessing their first and last name one would hope, so we will define\nanother table which will store user emails and passwords.</p>\n<h4 id=\"storing-emails-and-passwords\"><a href=\"#storing-emails-and-passwords\" aria-label=\"storing emails and passwords permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Storing Emails and Passwords</h4>\n<p>To store user emails and passwords we will create another table in the\n<code class=\"language-text\">forum_example_private</code> schema.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> forum_example_private<span class=\"token punctuation\">.</span>person_account <span class=\"token punctuation\">(</span>\n  person_id        <span class=\"token keyword\">integer</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">references</span> forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">cascade</span><span class=\"token punctuation\">,</span>\n  email            <span class=\"token keyword\">text</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">unique</span> <span class=\"token keyword\">check</span> <span class=\"token punctuation\">(</span>email <span class=\"token operator\">~</span><span class=\"token operator\">*</span> <span class=\"token string\">'^.+@.+\\..+$'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  password_hash    <span class=\"token keyword\">text</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">table</span> forum_example_private<span class=\"token punctuation\">.</span>person_account <span class=\"token operator\">is</span> <span class=\"token string\">'Private information about a person’s account.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example_private<span class=\"token punctuation\">.</span>person_account<span class=\"token punctuation\">.</span>person_id <span class=\"token operator\">is</span> <span class=\"token string\">'The id of the person associated with this account.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example_private<span class=\"token punctuation\">.</span>person_account<span class=\"token punctuation\">.</span>email <span class=\"token operator\">is</span> <span class=\"token string\">'The email address of the person.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">column</span> forum_example_private<span class=\"token punctuation\">.</span>person_account<span class=\"token punctuation\">.</span>password_hash <span class=\"token operator\">is</span> <span class=\"token string\">'An opaque hash of the person’s password.'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><strong>Warning:</strong> Never store passwords in plaintext! The <code class=\"language-text\">password_hash</code> column\nwill contain the user’s password <em>after</em> it has gone through a secure hashing\nalgorithm like <a href=\"https://codahale.com/how-to-safely-store-a-password/\">Bcrypt</a>.\nLater in this tutorial we will show you how to securely hash a password in\nPostgres.</p>\n</blockquote>\n<p>Why would we choose to create a new table in the <code class=\"language-text\">forum_example_private</code> schema\ninstead of just adding columns to <code class=\"language-text\">forum_example.person</code>? There are a couple of\nanswers to this question. The first and most fundamental is separation of\nconcerns. By moving <code class=\"language-text\">email</code> and <code class=\"language-text\">password_hash</code> to a second table we make it\nmuch harder to accidently select those values when reading\n<code class=\"language-text\">forum_example.person</code>. Also, users will not have the permission to directly\nquery data from <code class=\"language-text\">forum_example_private</code> (as we will see) making this approach\nmore secure. This approach is also good for PostGraphile as the\n<code class=\"language-text\">forum_example_private</code> schema is never exposed in PostGraphile, so you will\nnever accidently expose password hashes in GraphQL.</p>\n<p>Besides those arguments, moving the person’s account to a separate table is also\ngood database design in general. Say you have multiple types of users. Perhaps\nnormal person users, and then ’brand‘ or ‘organization’ users. This pattern\ncould easily allow you to go in that direction.</p>\n<blockquote>\n<p><strong>Note:</strong> The <code class=\"language-text\">forum_example_private.person_account</code> shares its primary key\nwith <code class=\"language-text\">forum_example.person</code>. This way there can only be one\n<code class=\"language-text\">forum_example_private.person_account</code> for every <code class=\"language-text\">forum_example.person</code>, a\none-to-one relationship.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note:</strong> For an example of a much richer user profile/account/login schema,\nuse\n<a href=\"https://github.com/membership/membership.db/tree/master/postgres\">Membership.db</a>\nas a reference.</p>\n</blockquote>\n<h4 id=\"registering-users\"><a href=\"#registering-users\" aria-label=\"registering users permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Registering Users</h4>\n<p>Before a user can log in, they need to have an account in our database. To\nregister a user we are going to implement a Postgres function in PL/pgSQL which\nwill create two rows. The first row will be the user’s profile inserted into\n<code class=\"language-text\">forum_example.person</code>, and the second will be an account inserted into\n<code class=\"language-text\">forum_example_private.person_account</code>.</p>\n<p>Before we define the function, we know that we will want to hash the passwords\ncoming into the function before inserting them into\n<code class=\"language-text\">forum_example_private.person_account</code>. To hash passwords we will need the\nPostgres\n<a href=\"https://www.postgresql.org/docs/current/static/pgcrypto.html\"><code class=\"language-text\">pgcrypto</code></a>\nextension. To add the extension, just do the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> extension <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> <span class=\"token string\">\"pgcrypto\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">pgcrypto</code> extension should come with your Postgres distribution and gives\nus access to hashing functions like <code class=\"language-text\">crypt</code> and <code class=\"language-text\">gen_salt</code> which were\nspecifically designed for hashing passwords.</p>\n<p>Now that we have added <code class=\"language-text\">pgcrypto</code> to our database, let us define our function:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>register_person<span class=\"token punctuation\">(</span>\n  first_name <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>\n  last_name <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>\n  email <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>\n  password <span class=\"token keyword\">text</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token keyword\">as</span> $$\n<span class=\"token keyword\">declare</span>\n  person forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">begin</span>\n  <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span>\n    <span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">returning</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">into</span> person<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> forum_example_private<span class=\"token punctuation\">.</span>person_account <span class=\"token punctuation\">(</span>person_id<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> password_hash<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span>\n    <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> crypt<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> gen_salt<span class=\"token punctuation\">(</span><span class=\"token string\">'bf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span>\n$$ <span class=\"token keyword\">language</span> plpgsql strict security <span class=\"token keyword\">definer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>register_person<span class=\"token punctuation\">(</span><span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">is</span> <span class=\"token string\">'Registers a single user and creates an account in our forum.'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you do not understand what is going on here, do not worry, writing PL/pgSQL\nrequires some trial and error along with some StackOverflow searching. What’s\nnew here compared to our other functions is that we have a new block, <code class=\"language-text\">declare</code>,\nabove our function implementation which starts with <code class=\"language-text\">begin</code>. In that block we\ndeclare our intention to use a variable called <code class=\"language-text\">person</code> of type\n<code class=\"language-text\">forum_example.person</code>. Then, in our first insert statement, the row we insert\nwill be saved into that <code class=\"language-text\">person</code> variable.</p>\n<p>After we insert a profile into <code class=\"language-text\">forum_example.person</code>, we use the <code class=\"language-text\">pgcrypto</code>\nextension in the expression <code class=\"language-text\">crypt(password, gen_salt('bf'))</code> to hash the user’s\npassword before inserting into <code class=\"language-text\">forum_example_private.person_account</code>. This way\nwe aren’t storing the password in plaintext. Read the documentation for\n<code class=\"language-text\">pgcrypto</code> on\n<a href=\"https://www.postgresql.org/docs/current/static/pgcrypto.html#AEN178870\">Password Hashing Functions</a>\nto learn more about these functions and their characteristics.</p>\n<blockquote>\n<p><strong>Warning:</strong> Be very careful with logging, while we encrypt our passwords here\nit may be possible that in a query or server log the password will be recorded\nin plain text! Be careful to configure your Postgres logs so this isn’t the\ncase. PostGraphile will never log the value of any variables the client gives\nit. Being careful with your logs and passwords is true in any system, but\nespecially this one.</p>\n<p>For an overview of passwords in Postgres past the <code class=\"language-text\">pgcrypto</code> documentation,\nsee the answer to the StackOverflow question\n“<a href=\"http://stackoverflow.com/a/18687445/1568890\">How can I hash passwords in Postgres?</a>”</p>\n</blockquote>\n<p>At the end of the implementation you will see\n<code class=\"language-text\">language plpgsql strict security definer</code>. <code class=\"language-text\">language plpgsql</code> we already\nunderstand, but the other words are new. The word <code class=\"language-text\">strict</code> means that if the\nfunction gets null input, then the output will be automatically null as well and\nPostgres won’t call the function. That is <code class=\"language-text\">password</code> cannot be null or\n<code class=\"language-text\">first_name</code> cannot be null otherwise the result will also be null and nothing\nwill be executed. The words <code class=\"language-text\">security definer</code> mean that this function is\nexecuted with the privileges of the Postgres user who created it. Remember how\nwe said users would never be able to insert into\n<code class=\"language-text\">forum_example_private.person_account</code>? Well this function can insert into\n<code class=\"language-text\">forum_example_private.person_account</code> because it uses the privileges of the\ndefiner.</p>\n<blockquote>\n<p><strong>Warning:</strong> Make sure that when you create a function with <code class=\"language-text\">security definer</code>\nthere are no ‘holes’ a user could use to see or mutate more data than they are\nnot allowed to. Since the above is a simple function, we are fine. If you\ndon’t need <code class=\"language-text\">security definer</code>, try not to use it.</p>\n</blockquote>\n<p>This function will create a user and their account, but how will we log the user\nin? Before we define a function which allows users to login, sign-in,\nauthenticate, whatever you want to call it let us go over how auth works at a\nhigh level in PostGraphile. While this article is trying to be somewhat\nPostGraphile agnostic, the next two sections will be specific to PostGraphile,\nbut useful to anyone wanting to learn just a little bit more about Postgres and\nJSON Web Tokens (JWTs).</p>\n<h4 id=\"postgres-roles\"><a href=\"#postgres-roles\" aria-label=\"postgres roles permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Postgres Roles</h4>\n<p>When a user logs in, we want them to make their queries using a specific\nPostGraphile role. Using that role we can define rules that restrict what data\nthe user may access. So what roles do we need to define for our forum example?\nRemember when we were connecting to Postgres and we used a URL like\n<code class=\"language-text\">postgres:///mydb</code>? Well, when you use a connection string like that, you are\nlogging into Postgres using your computer account’s username and no password.\nSay your computer account username is <code class=\"language-text\">buddy</code>, then connecting with the URL\n<code class=\"language-text\">postgres:///mydb</code>, would be the same as connecting with the URL\n<code class=\"language-text\">postgres://buddy@localhost/mydb</code> or even specifying the port explicitly:\n<code class=\"language-text\">postgres://buddy@localhost:5432/mydb</code>. If you wanted to connect to your\nPostgres database with a password it would look like\n<code class=\"language-text\">postgres://buddy:password@localhost/mydb</code>. When you run Postgres locally, this\naccount will probably be the superuser. So when you run\n<code class=\"language-text\">postgraphile -c postgres:///mydb</code>, you are running PostGraphile with superuser\nprivileges. To change that let’s create a role that PostGraphile can use to\nconnect to our database:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> role forum_example_postgraphile login password <span class=\"token string\">'xyz'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We create this <code class=\"language-text\">forum_example_postgraphile</code> role with the\n<a href=\"https://www.postgresql.org/docs/current/static/sql-createrole.html\"><code class=\"language-text\">CREATE ROLE</code></a>\ncommand. We want to make sure our PostGraphile role can login so we specify that\nwith the <code class=\"language-text\">login</code> option and we give the user a password of ‘xyz’ with the\n<code class=\"language-text\">password</code> option. Now we will start PostGraphile as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">postgraphile -c postgres://forum_example_postgraphile:xyz@localhost/mydb</code></pre></div>\n<p>When a user who does not have a JWT token makes a request to Postgres, we do not\nwant that user to have the privileges we will give to the\n<code class=\"language-text\">forum_example_postgraphile</code> role, so instead we will create another role.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> role forum_example_anonymous<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">grant</span> forum_example_anonymous <span class=\"token keyword\">to</span> forum_example_postgraphile<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we use\n<a href=\"https://www.postgresql.org/docs/current/static/sql-createrole.html\"><code class=\"language-text\">CREATE ROLE</code></a>\nagain. This role cannot login so it does not have the <code class=\"language-text\">login</code> option, or a\npassword. We also use the\n<a href=\"https://www.postgresql.org/docs/current/static/sql-grant.html\"><code class=\"language-text\">GRANT</code></a> command\nto grant access to the <code class=\"language-text\">forum_example_anonymous</code> role to the\n<code class=\"language-text\">forum_example_postgraphile</code> role. Now, the <code class=\"language-text\">forum_example_postgraphile</code> role\ncan control and become the <code class=\"language-text\">forum_example_anonymous</code> role. If we did not use\nthat grant, we could not change into the <code class=\"language-text\">forum_example_anonymous</code> role in\nPostGraphile. Now we will start our server like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">postgraphile <span class=\"token punctuation\">\\</span>\n  --connection postgres://forum_example_postgraphile:xyz@localhost/mydb <span class=\"token punctuation\">\\</span>\n  --default-role forum_example_anonymous</code></pre></div>\n<p>There is one more role we want to create. When a user logs in we don’t want them\nto use the <code class=\"language-text\">forum_example_postgraphile</code> role, or the basic\n<code class=\"language-text\">forum_example_anonymous</code> role. So instead we will create a role that all of our\nlogged in users will authorize with. We will call it <code class=\"language-text\">forum_example_person</code> and\nsimilarly grant it to the <code class=\"language-text\">forum_example_postgraphile</code> role.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> role forum_example_person<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">grant</span> forum_example_person <span class=\"token keyword\">to</span> forum_example_postgraphile<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><strong>Warning:</strong> The <code class=\"language-text\">forum_example_postgraphile</code> role will have all of the\npermissions of the roles granted to it. So it can do everything\n<code class=\"language-text\">forum_example_anonymous</code> can do and everything <code class=\"language-text\">forum_example_person</code> can do.\nThis is why having a default role is important. We would not want an anonymous\nuser to have admin access level because we have granted an admin role to\n<code class=\"language-text\">forum_example_postgraphile</code>.</p>\n</blockquote>\n<p>Ok, so now we have three roles. <code class=\"language-text\">forum_example_postgraphile</code>,\n<code class=\"language-text\">forum_example_anonymous</code>, and <code class=\"language-text\">forum_example_person</code>. We know how\n<code class=\"language-text\">forum_example_postgraphile</code> and <code class=\"language-text\">forum_example_anonymous</code> get used, but how do\nwe know when a user is logged in and should be using <code class=\"language-text\">forum_example_person</code>? The\nanswer is JSON Web Tokens.</p>\n<h4 id=\"json-web-tokens\"><a href=\"#json-web-tokens\" aria-label=\"json web tokens permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON Web Tokens</h4>\n<p>PostGraphile uses <a href=\"https://jwt.io/\">JSON Web Tokens (JWTs)</a> for authorization. A\nJWT is just a JSON object that has been hashed and cryptographically signed to\nconfirm the identity of its contents. So an object like:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"c\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Would turn into a token that looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhIjoxLCJiIjoyLCJjIjozfQ.hxhGCCCmGV9nT1slief1WgEsOsfdnlVizNrODxfh1M8</code></pre></div>\n<blockquote>\n<p><strong>Warning:</strong> The information in a JWT can be read by anyone, so do not put\nprivate information in a JWT. What makes JWTs secure is that unless they were\nsigned by our secret, we can not accept the information inside the JWT as\ntruth.</p>\n</blockquote>\n<p>This allows PostGraphile to securely make claims about who a user is. Attackers\nwould not be able to fake a claim unless they had access to the private ‘secret’\nyou define when you start PostGraphile with the <code class=\"language-text\">--jwt-secret</code> option.</p>\n<p>When PostGraphile gets a JWT from an HTTP request’s <code class=\"language-text\">Authorization</code> header, like\nso:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhIjoxLCJiIjoyLCJjIjozfQ.hxhGCCCmGV9nT1slief1WgEsOsfdnlVizNrODxfh1M8</code></pre></div>\n<p>It will verify the token using the secret, and then will serialize the claims in\nthat token to the database. So for our token above PostGraphile would\neffectively run:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">set</span> <span class=\"token keyword\">local</span> jwt<span class=\"token punctuation\">.</span>claims<span class=\"token punctuation\">.</span>a <span class=\"token keyword\">to</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">set</span> <span class=\"token keyword\">local</span> jwt<span class=\"token punctuation\">.</span>claims<span class=\"token punctuation\">.</span>b <span class=\"token keyword\">to</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">set</span> <span class=\"token keyword\">local</span> jwt<span class=\"token punctuation\">.</span>claims<span class=\"token punctuation\">.</span>c <span class=\"token keyword\">to</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This way your JWT is accessible in your database rules. To get these values back\nout in SQL, just run the following function:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> current_setting<span class=\"token punctuation\">(</span><span class=\"token string\">'jwt.claims.a'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>All of the ‘claims’ or properties on the JWT are serialized to the database in\nthis way, with one exception. If you have a <code class=\"language-text\">role</code> property in your JWT,\nPostGraphile will also set the Postgres role of the local transaction. So say\nyou had a <code class=\"language-text\">role</code> of <code class=\"language-text\">forum_example_person</code>. PostGraphile would run:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">set</span> <span class=\"token keyword\">local</span> role <span class=\"token keyword\">to</span> <span class=\"token string\">'forum_example_person'</span>\n<span class=\"token keyword\">set</span> <span class=\"token keyword\">local</span> jwt<span class=\"token punctuation\">.</span>claims<span class=\"token punctuation\">.</span>role <span class=\"token keyword\">to</span> <span class=\"token string\">'forum_example_person'</span></code></pre></div>\n<p>Now, the user would have the permissions of the <code class=\"language-text\">forum_example_person</code> role as\nthey execute their query.</p>\n<blockquote>\n<p><strong>Warning:</strong> Unless explicitly set, JWTs never expire. Once they have been\nissued they may never be invalidated. This is both good and bad, good in that\nJWTs are fast in not requiring a database lookup. Bad in that if an attacker\ngets their hands on a JWT you can’t stop them from using it until the token\nexpires. If you do not override <code class=\"language-text\">exp</code> then <strong>PostGraphile's defaults set JWTs\nto expire after one day</strong>.</p>\n<p>A solution to this is to use very short expiration times on your tokens and/or\nto use refresh tokens. A refresh token you would use whenever your JWT expires\nto get a new JWT without prompting the user for their password again. Refresh\ntokens would be stored in the database so you could easily invalidate refresh\ntokens.</p>\n</blockquote>\n<p>We now know how PostGraphile uses JWTs to authorize the user, but how does\nPostGraphile create a JWT? Stay tuned.</p>\n<h4 id=\"logging-in\"><a href=\"#logging-in\" aria-label=\"logging in permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging In</h4>\n<p>You can pass an option to PostGraphile, called\n<code class=\"language-text\">--jwt-token-identifier &lt;identifier></code> in the CLI, which takes a composite type\nidentifier. PostGraphile will turn this type into a JWT wherever you see it in\nthe GraphQL output. So let’s define the type we will use for our JWTs:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">type</span> forum_example<span class=\"token punctuation\">.</span>jwt_token <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span>\n  role <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>\n  person_id <span class=\"token keyword\">integer</span><span class=\"token punctuation\">,</span>\n  exp <span class=\"token keyword\">bigint</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That’s it. We are using the\n<a href=\"https://www.postgresql.org/docs/current/static/sql-createtype.html\"><code class=\"language-text\">CREATE TYPE</code></a>\ncommand again as we did before to create an enum type. This time we are creating\na composite type. The definition for a composite type looks very much like the\ndefinition of a table type, except a composite type cannot store rows. i.e. you\ncan’t <code class=\"language-text\">INSERT</code>, <code class=\"language-text\">SELECT</code>, <code class=\"language-text\">UPDATE</code>, or <code class=\"language-text\">DELETE</code> from a composite type. While you\ncan’t store rows in a composite type, PostGraphile can turn a composite type\ninto a JWT. Now that we’ve defined this type we will want to start PostGraphile\nwith the <code class=\"language-text\">--jwt-token-identifier</code> flag:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">postgraphile --jwt-token-identifier forum_example.jwt_token</code></pre></div>\n<p>Next we need to create the function which will actually return the token:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>authenticate<span class=\"token punctuation\">(</span>\n  email <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>\n  password <span class=\"token keyword\">text</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> forum_example<span class=\"token punctuation\">.</span>jwt_token <span class=\"token keyword\">as</span> $$\n<span class=\"token keyword\">declare</span>\n  account forum_example_private<span class=\"token punctuation\">.</span>person_account<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">begin</span>\n  <span class=\"token keyword\">select</span> a<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">into</span> account\n  <span class=\"token keyword\">from</span> forum_example_private<span class=\"token punctuation\">.</span>person_account <span class=\"token keyword\">as</span> a\n  <span class=\"token keyword\">where</span> a<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> account<span class=\"token punctuation\">.</span>password_hash <span class=\"token operator\">=</span> crypt<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">.</span>password_hash<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'forum_example_person'</span><span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">.</span>person_id<span class=\"token punctuation\">,</span> extract<span class=\"token punctuation\">(</span>epoch <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">interval</span> <span class=\"token string\">'2 days'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>::forum_example<span class=\"token punctuation\">.</span>jwt_token<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">end</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span>\n$$ <span class=\"token keyword\">language</span> plpgsql strict security <span class=\"token keyword\">definer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>authenticate<span class=\"token punctuation\">(</span><span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">is</span> <span class=\"token string\">'Creates a JWT token that will securely identify a person and give them certain permissions. This token expires in 2 days.'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This function will return null if the user failed to authenticate, and a JWT\ntoken if the user succeeds. Returning null could mean that the password was\nincorrect, a user with their email doesn’t exist, or the client forgot to pass\n<code class=\"language-text\">email</code> and/or <code class=\"language-text\">password</code> arguments. It is then up to the client to raise an\nerror when encountering <code class=\"language-text\">null</code>. If a user with the provided email <em>does</em> exist,\nand the provided password checks out with <code class=\"language-text\">password_hash</code> in\n<code class=\"language-text\">forum_example_private.person_account</code> then we return an instance of\n<code class=\"language-text\">forum_example.jwt_token</code> which will then be converted into an actual JWT by\nPostGraphile.</p>\n<p>There are two main parts to our function body. The first is:</p>\n<div class=\"gatsby-highlight\" data-language=\"plpgsql\"><pre class=\"language-plpgsql\"><code class=\"language-plpgsql\">select a.* into account\nfrom forum_example_private.person_account as a\nwhere a.email = $1;</code></pre></div>\n<p>This code will select a single account from\n<code class=\"language-text\">forum_example_private.person_account</code> using the provided email value. The <code class=\"language-text\">$1</code>\nhere is just another way to write the <code class=\"language-text\">email</code> argument. If we had wrote\n<code class=\"language-text\">email = email</code> or even <code class=\"language-text\">a.email = email</code>, Postgres would not have known which\nemail we were referring to, so instead we just used a substitute for the <code class=\"language-text\">email</code>\nargument which depends on its placement in the identifer <code class=\"language-text\">$1</code>. If we\nsuccessfully find a person with that email, we store it in the <code class=\"language-text\">account</code>\nvariable. If we do not find anything, <code class=\"language-text\">account</code> will be null. The second part of\nour function is:</p>\n<div class=\"gatsby-highlight\" data-language=\"plpgsql\"><pre class=\"language-plpgsql\"><code class=\"language-plpgsql\">if account.password_hash = crypt(password, account.password_hash) then\n  return (&#39;forum_example_person&#39;, account.person_id)::forum_example.jwt_token;\nelse\n  return null;\nend if;</code></pre></div>\n<p>This is an if/else statement that checks to see if the plaintext <code class=\"language-text\">password</code>\nargument we were provided matches the password hash that was stored in our\n<code class=\"language-text\">forum_example_private.person_account</code>’s <code class=\"language-text\">password_hash</code> table. If there is a\nmatch, then we return a JWT token. Otherwise we return null. The password match\ncheck is done in the code\n<code class=\"language-text\">account.password_hash = crypt(password, account.password_hash)</code>. To better\nunderstand how this works, read the documentation for <code class=\"language-text\">pgcrypto</code> on\n<a href=\"https://www.postgresql.org/docs/current/static/pgcrypto.html#AEN178870\">password hashing functions</a>.</p>\n<p>In order to construct a <code class=\"language-text\">forum_example.jwt_token</code> we use the Postgres\n<a href=\"https://www.postgresql.org/docs/11/rowtypes.html#id-1.5.7.24.6\">composite value input</a>\nsyntax which looks like:\n<code class=\"language-text\">('forum_example_person', account.person_id, extract(epoch from (now() + interval '2 days')))</code>.\nThen we cast that composite value with <code class=\"language-text\">::forum_example.jwt_token</code>. We use\nPostgres\n<a href=\"https://www.postgresql.org/docs/current/functions-datetime.html\">date/time functions</a>\nto generate a date that is two days from the current date, and then convert it\nto a POSIX timestamp. The order in which the values go is the order in which\nthey were originally defined. Since we defined <code class=\"language-text\">role</code>, <code class=\"language-text\">person_id</code> and <code class=\"language-text\">exp</code>,\nthis JWT will have a <code class=\"language-text\">role</code> of <code class=\"language-text\">forum_example_person</code>, a <code class=\"language-text\">person_id</code> of\n<code class=\"language-text\">account.person_id</code>, and an <code class=\"language-text\">exp</code> that is two days from now.</p>\n<blockquote>\n<p><strong>Warning:</strong> Be careful about logging around this function too.</p>\n</blockquote>\n<p>Now that we know how to get JWTs for our users, let’s use the JWTs.</p>\n<h4 id=\"using-the-authorized-user\"><a href=\"#using-the-authorized-user\" aria-label=\"using the authorized user permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the Authorized User</h4>\n<p>Before we define permissions for our user, let’s utilize the fact that they are\nlogged in by defining a quick Postgres function.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>current_person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token keyword\">as</span> $$\n  <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span>\n  <span class=\"token keyword\">from</span> forum_example<span class=\"token punctuation\">.</span>person\n  <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token keyword\">nullif</span><span class=\"token punctuation\">(</span>current_setting<span class=\"token punctuation\">(</span><span class=\"token string\">'jwt.claims.person_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>::<span class=\"token keyword\">integer</span>\n$$ <span class=\"token keyword\">language</span> <span class=\"token keyword\">sql</span> stable<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">comment</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>current_person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">is</span> <span class=\"token string\">'Gets the person who was identified by our JWT.'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is a simple function that we can use in PostGraphile or our database to get\nthe person who is currently executing the query — by means of the token in the\nrequest header. The one new concept here is\n<code class=\"language-text\">nullif(current_setting('jwt.claims.person_id', true), '')::integer</code>. As we\ndiscussed before, PostGraphile will serialize your JWT to the database in the\nform of transaction local settings. Using the <code class=\"language-text\">current_setting</code> function is how\nwe access those settings. Also note that we cast the value to an integer with\n<code class=\"language-text\">::integer</code>. This is because the Postgres <code class=\"language-text\">current_setting</code> function will always\nreturn a string, if you need another data type, you will likely need to cast to\nthat data type.</p>\n<p>Now, let’s use the JWT to define permissions.</p>\n<h4 id=\"grants\"><a href=\"#grants\" aria-label=\"grants permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Grants</h4>\n<p>The highest level of permission that can be given to roles using the Postgres\nare access privileges assigned using the\n<a href=\"https://www.postgresql.org/docs/current/static/sql-grant.html\"><code class=\"language-text\">GRANT</code></a>\ncommand. The access privileges defined by <code class=\"language-text\">GRANT</code> work on no smaller level than\nthe table level. As you can allow a role to select any value from a table, or\ndelete any value in a table. We will look at how to restrict access on a row\nlevel next.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- after schema creation and before function creation</span>\n<span class=\"token keyword\">alter</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">privileges</span> <span class=\"token keyword\">revoke</span> <span class=\"token keyword\">execute</span> <span class=\"token keyword\">on</span> functions <span class=\"token keyword\">from</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">usage</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">schema</span> forum_example <span class=\"token keyword\">to</span> forum_example_anonymous<span class=\"token punctuation\">,</span> forum_example_person<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">select</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token keyword\">to</span> forum_example_anonymous<span class=\"token punctuation\">,</span> forum_example_person<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token keyword\">to</span> forum_example_person<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">select</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>post <span class=\"token keyword\">to</span> forum_example_anonymous<span class=\"token punctuation\">,</span> forum_example_person<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">insert</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>post <span class=\"token keyword\">to</span> forum_example_person<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">usage</span> <span class=\"token keyword\">on</span> sequence forum_example<span class=\"token punctuation\">.</span>post_id_seq <span class=\"token keyword\">to</span> forum_example_person<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">execute</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>person_full_name<span class=\"token punctuation\">(</span>forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> forum_example_anonymous<span class=\"token punctuation\">,</span> forum_example_person<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">execute</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>post_summary<span class=\"token punctuation\">(</span>forum_example<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">,</span> <span class=\"token keyword\">integer</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> forum_example_anonymous<span class=\"token punctuation\">,</span> forum_example_person<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">execute</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>person_latest_post<span class=\"token punctuation\">(</span>forum_example<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> forum_example_anonymous<span class=\"token punctuation\">,</span> forum_example_person<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">execute</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>search_posts<span class=\"token punctuation\">(</span><span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> forum_example_anonymous<span class=\"token punctuation\">,</span> forum_example_person<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">execute</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>authenticate<span class=\"token punctuation\">(</span><span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> forum_example_anonymous<span class=\"token punctuation\">,</span> forum_example_person<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">execute</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>current_person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> forum_example_anonymous<span class=\"token punctuation\">,</span> forum_example_person<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">execute</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">function</span> forum_example<span class=\"token punctuation\">.</span>register_person<span class=\"token punctuation\">(</span><span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> forum_example_anonymous<span class=\"token punctuation\">;</span></code></pre></div>\n<p>See how we had to grant permissions on every single Postgres object we have\ndefined so far? Postgres permissions work as a whitelist and not a blacklist\n(except for functions), so therefore no one has more access than you explicitly\ngive them. Let’s walk through the grants:</p>\n<ol>\n<li><code class=\"language-text\">alter default privileges ...</code>: By default, functions can be executable by\npublic. Since we're applying our fine-grained control over function\npermissions here, we remove the default grant. Note that this line needs to\nbe placed before any function definition.</li>\n<li><code class=\"language-text\">grant usage on schema forum_example to forum_example_anonymous, forum_example_person</code>:\nWe say that anonymous users (<code class=\"language-text\">forum_example_anonymous</code>) and logged in users\n(<code class=\"language-text\">forum_example_person</code>) may use the objects in the <code class=\"language-text\">forum_example</code> schema.\nThis does not mean that those roles can use anything they want in the\nschema, it just allows the roles to know the schema exists. Also note that\nwe did not grant usage for the <code class=\"language-text\">forum_example_private</code> schema.</li>\n<li><code class=\"language-text\">grant select on table forum_example.person to forum_example_anonymous, forum_example_person</code>:\nWe give anonymous users and logged in users the ability to read all of the\nrows in the <code class=\"language-text\">forum_example.person</code> table.</li>\n<li><code class=\"language-text\">grant update, delete on table forum_example.person to forum_example_person</code>:\nHere we give <em>only</em> logged in users the ability to update and delete rows\nfrom the <code class=\"language-text\">forum_example.person</code> table. This means that anonymous users can\nnever update or delete a person. However, it does mean that users can update\nand delete any rows in the table. We will fix this later.</li>\n<li><code class=\"language-text\">grant select ...</code> and <code class=\"language-text\">grant insert, update, delete ...</code>: We do the same\nthing with these two grants as we did with the grants above. The only\ndifference here is that we also give signed in users the ability to <code class=\"language-text\">insert</code>\ninto <code class=\"language-text\">forum_example.post</code>. We do not allow anyone to insert directly into\n<code class=\"language-text\">forum_example.person</code>, instead users should use the\n<code class=\"language-text\">forum_example.register_person</code> function.</li>\n<li><code class=\"language-text\">grant usage on sequence forum_example.post_id_seq to forum_example_person</code>:\nWhen a user creates a new <code class=\"language-text\">forum_example.post</code> they will also need to get\nthe next value in the <code class=\"language-text\">forum_example.post_id_seq</code> because we use the\n<code class=\"language-text\">serial</code> data type for the <code class=\"language-text\">id</code> column. A sequence also exists for our\nperson table (<code class=\"language-text\">forum_example.person_id_seq</code>), but since we are only creating\npeople through <code class=\"language-text\">forum_example.register_person</code> and that function specifies\n<code class=\"language-text\">security definer</code>, we don’t need to grant access to the person id sequence.</li>\n<li><code class=\"language-text\">grant execute ...</code>: We have to give the anonymous user and logged in users\naccess to all of the Postgres functions we define. All of the functions are\nexecutable by both types of users, except <code class=\"language-text\">forum_example.register_person</code>\nwhich we only let anonymous users execute. There’s no need for logged in\nusers to register a new user!</li>\n</ol>\n<p>This provides basic permissions for all of our Postgres objects, but as we\nmentioned before users can update and delete all and any persons or posts. For\nobvious reasons we don’t want this, so let’s define row level security next.</p>\n<h4 id=\"row-level-security\"><a href=\"#row-level-security\" aria-label=\"row level security permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Row Level Security</h4>\n<p>In Postgres 9.5 (released January 2016)\n<a href=\"https://www.postgresql.org/docs/current/static/ddl-rowsecurity.html\">Row Level Security (RLS)</a>\nwas introduced. RLS allows us to specify access to the data in our Postgres\ndatabases on a row level instead of a table level. In order to enable row level\nsecurity on our tables we first need to run the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token keyword\">enable</span> <span class=\"token keyword\">row</span> <span class=\"token keyword\">level</span> security<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> forum_example<span class=\"token punctuation\">.</span>post <span class=\"token keyword\">enable</span> <span class=\"token keyword\">row</span> <span class=\"token keyword\">level</span> security<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Before running these commands, the <code class=\"language-text\">forum_example_person</code> and\n<code class=\"language-text\">forum_example_anonymous</code> roles could see every row in the table with a\n<code class=\"language-text\">select * from forum_example.person</code> query. After running these two commands\nthose same roles can’t. By enabling row level security, our roles don’t have any\naccess to read or write to a table that you don’t explicitly give, so to\nre-enable access to all the rows we will define RLS policies with the\n<a href=\"https://www.postgresql.org/docs/current/static/sql-createpolicy.html\"><code class=\"language-text\">CREATE POLICY</code></a>\ncommand.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> policy select_person <span class=\"token keyword\">on</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token keyword\">for</span> <span class=\"token keyword\">select</span>\n  <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">create</span> policy select_post <span class=\"token keyword\">on</span> forum_example<span class=\"token punctuation\">.</span>post <span class=\"token keyword\">for</span> <span class=\"token keyword\">select</span>\n  <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now both anonymous users and logged in users can see all of our\n<code class=\"language-text\">forum_example.person</code> and <code class=\"language-text\">forum_example.post</code> rows again. We also want signed\nin users to be able to only update and delete their own row in\n<code class=\"language-text\">forum_example.person</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> policy update_person <span class=\"token keyword\">on</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">to</span> forum_example_person\n  <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token keyword\">nullif</span><span class=\"token punctuation\">(</span>current_setting<span class=\"token punctuation\">(</span><span class=\"token string\">'jwt.claims.person_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>::<span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">create</span> policy delete_person <span class=\"token keyword\">on</span> forum_example<span class=\"token punctuation\">.</span>person <span class=\"token keyword\">for</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">to</span> forum_example_person\n  <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token keyword\">nullif</span><span class=\"token punctuation\">(</span>current_setting<span class=\"token punctuation\">(</span><span class=\"token string\">'jwt.claims.person_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>::<span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We use the current <code class=\"language-text\">person_id</code> from our JWT and only allow updates and deletes\non rows with the same id. Also note how we added to <code class=\"language-text\">forum_example_person</code>. This\nis because we only want these policies to apply for the <code class=\"language-text\">forum_example_person</code>\nrole.</p>\n<p>That’s all we need to define for our person table. Now let’s define three\npolicies for our posts table. One for <code class=\"language-text\">INSERT</code>, <code class=\"language-text\">UPDATE</code>, and <code class=\"language-text\">DELETE</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> policy insert_post <span class=\"token keyword\">on</span> forum_example<span class=\"token punctuation\">.</span>post <span class=\"token keyword\">for</span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">to</span> forum_example_person\n  <span class=\"token keyword\">with</span> <span class=\"token keyword\">check</span> <span class=\"token punctuation\">(</span>author_id <span class=\"token operator\">=</span> <span class=\"token keyword\">nullif</span><span class=\"token punctuation\">(</span>current_setting<span class=\"token punctuation\">(</span><span class=\"token string\">'jwt.claims.person_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>::<span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">create</span> policy update_post <span class=\"token keyword\">on</span> forum_example<span class=\"token punctuation\">.</span>post <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">to</span> forum_example_person\n  <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>author_id <span class=\"token operator\">=</span> <span class=\"token keyword\">nullif</span><span class=\"token punctuation\">(</span>current_setting<span class=\"token punctuation\">(</span><span class=\"token string\">'jwt.claims.person_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>::<span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">create</span> policy delete_post <span class=\"token keyword\">on</span> forum_example<span class=\"token punctuation\">.</span>post <span class=\"token keyword\">for</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">to</span> forum_example_person\n  <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>author_id <span class=\"token operator\">=</span> <span class=\"token keyword\">nullif</span><span class=\"token punctuation\">(</span>current_setting<span class=\"token punctuation\">(</span><span class=\"token string\">'jwt.claims.person_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>::<span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>These policies are very similar to the ones before, except that the\n<code class=\"language-text\">insert_post</code> policy uses <code class=\"language-text\">with check</code> instead of <code class=\"language-text\">using</code> like our other\npolicies. The difference between <code class=\"language-text\">with check</code> and <code class=\"language-text\">using</code> is roughly that\n<code class=\"language-text\">using</code> is applied <em>before</em> any operation occurs to the table’s rows. So in the\ncase of updating a post, one could not update a row that does not have the\nappropriate <code class=\"language-text\">author_id</code> in the first place. <code class=\"language-text\">with check</code> is run <em>after</em> an\noperation is applied. If the <code class=\"language-text\">with check</code> fails the operation will be rejected.\nSo in the case of an insert, Postgres sets all of the columns as specified and\nthen compares against <code class=\"language-text\">with check</code> on the new row. You must use <code class=\"language-text\">with check</code>\nwith <code class=\"language-text\">INSERT</code> commands because there are no rows to compare against before\ninsertion, and you must use <code class=\"language-text\">using</code> with <code class=\"language-text\">DELETE</code> commands because a delete\nchanges no rows only removes current ones.</p>\n<p>That’s it! We have successfully created a Postgres schema embedded with our\nbusiness logic. When we use this schema with PostGraphile we will get a well\ndesigned GraphQL API that we can use in our frontend application.</p>\n<p>The final argument list for starting our PostGraphile server using the CLI would\nbe as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">postgraphile <span class=\"token punctuation\">\\</span>\n  --connection postgres://forum_example_postgraphile:xyz@localhost <span class=\"token punctuation\">\\</span>\n  --schema forum_example <span class=\"token punctuation\">\\</span>\n  --default-role forum_example_anonymous <span class=\"token punctuation\">\\</span>\n  --jwt-secret keyboard_kitten <span class=\"token punctuation\">\\</span>\n  --jwt-token-identifier forum_example.jwt_token</code></pre></div>\n<hr>\n<h3 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h3>\n<p>You should now be equipped with the knowledge to go out and design your own\nPostgres schema. If you have any questions, encounter a bug, or just want to say\nthank you, don’t hesitate to\n<a href=\"https://github.com/graphile/postgraphile/issues\">open an issue</a>, we’d love to\nhear from you. The PostGraphile community wants to invest in making you a\nproductive developer so that you can invest back into PostGraphile.</p>\n<!-- TODO: More next steps and calls to action -->\n<p><em>This article was originally written by\n<a href=\"https://twitter.com/calebmer\">Caleb Meredith</a>.</em></p>","tableOfContents":"<ul>\n<li><a href=\"/postgraphile/postgresql-schema-design/#table-of-contents\">Table of Contents</a></li>\n<li>\n<p><a href=\"/postgraphile/postgresql-schema-design/#the-basics\">The Basics</a></p>\n<ul>\n<li><a href=\"/postgraphile/postgresql-schema-design/#setting-up-your-schemas\">Setting Up Your Schemas</a></li>\n<li><a href=\"/postgraphile/postgresql-schema-design/#the-person-table\">The Person Table</a></li>\n<li><a href=\"/postgraphile/postgresql-schema-design/#table-documentation\">Table Documentation</a></li>\n<li><a href=\"/postgraphile/postgresql-schema-design/#the-post-table\">The Post Table</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/postgraphile/postgresql-schema-design/#database-functions\">Database Functions</a></p>\n<ul>\n<li><a href=\"/postgraphile/postgresql-schema-design/#set-returning-functions\">Set Returning Functions</a></li>\n<li><a href=\"/postgraphile/postgresql-schema-design/#triggers\">Triggers</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/postgraphile/postgresql-schema-design/#authentication-and-authorization\">Authentication and Authorization</a></p>\n<ul>\n<li><a href=\"/postgraphile/postgresql-schema-design/#storing-emails-and-passwords\">Storing Emails and Passwords</a></li>\n<li><a href=\"/postgraphile/postgresql-schema-design/#registering-users\">Registering Users</a></li>\n<li><a href=\"/postgraphile/postgresql-schema-design/#postgres-roles\">Postgres Roles</a></li>\n<li><a href=\"/postgraphile/postgresql-schema-design/#json-web-tokens\">JSON Web Tokens</a></li>\n<li><a href=\"/postgraphile/postgresql-schema-design/#logging-in\">Logging In</a></li>\n<li><a href=\"/postgraphile/postgresql-schema-design/#using-the-authorized-user\">Using the Authorized User</a></li>\n<li><a href=\"/postgraphile/postgresql-schema-design/#grants\">Grants</a></li>\n<li><a href=\"/postgraphile/postgresql-schema-design/#row-level-security\">Row Level Security</a></li>\n</ul>\n</li>\n<li><a href=\"/postgraphile/postgresql-schema-design/#conclusion\">Conclusion</a></li>\n</ul>","timeToRead":39,"frontmatter":{"path":"/postgraphile/postgresql-schema-design/","title":"PostgreSQL Schema Design","fullTitle":null,"showExamples":null,"noToc":null}},"nav":{"edges":[{"node":{"id":"5ae9b01a-9c87-58f1-8dcb-7da4e1a638e2","name":"news","sections":[{"id":"main","title":"Releases"},{"id":"about","title":"About Graphile"},{"id":"misc","title":"Talks, Events & Podcasts"}],"pages":[{"to":"/news/20250324-major-grafast-beta/","title":"Major Grafast release: beta.21","sectionId":"main","subpages":null},{"to":"/news/20230803-postgraphile-v5-beta/","title":"PostGraphile V5 public beta!","sectionId":"main","subpages":null},{"to":"/news/20230622-intro-to-postgraphile-v5/","title":"Intro to PostGraphile V5","sectionId":"misc","subpages":null},{"to":"/news/20221208-graphql-galaxy/","title":"Step Aside Resolvers!","sectionId":"misc","subpages":null},{"to":"/news/20221020-development-support/","title":"Development Support Now Available","sectionId":"about","subpages":null},{"to":"/news/20221011-worker-014/","title":"Graphile Worker 0.14 - Batch Jobs","sectionId":"main","subpages":null},{"to":"/news/20220714-graphql-radio/","title":"GraphQL Radio Appearance","sectionId":"misc","subpages":null},{"to":"/news/20220704-github-readme/","title":"Jem's Discussion Panel at GitHub ReadME","sectionId":"about","subpages":null},{"to":"/news/20220607-schema-metadata/","title":"Schema Metadata: A Growing Need","sectionId":"misc","subpages":null},{"to":"/news/20220607-spec-news/","title":"Spec News Pod Launch","sectionId":"misc","subpages":null},{"to":"/news/20220415-graphql-over-sse/","title":"GraphQL over SSE","sectionId":"main","subpages":null},{"to":"/news/20211207-graphql-galaxy/","title":"Working Group Discussion Panel","sectionId":"misc","subpages":null},{"to":"/news/20211109-graphql-summit/","title":"What's Next for the GraphQL Spec in 2022?","sectionId":"misc","subpages":null},{"to":"/news/20210527-postgraphile-412/","title":"PostGraphile 4.12 - Awesome Aggregates","sectionId":"main","subpages":null},{"to":"/news/20210129-postgraphile-411/","title":"PostGraphile 4.11 - Wonderful Websockets","sectionId":"main","subpages":null},{"to":"/news/20210120-worker-09/","title":"Graphile Worker 0.9","sectionId":"main","subpages":null},{"to":"/news/20201208-github-sponsors/","title":"GitHub Sponsors Now Available to Organizations","sectionId":"about","subpages":null},{"to":"/news/20201127-postgraphile-410/","title":"PostGraphile 4.10 - Framework Friends","sectionId":"main","subpages":null},{"to":"/news/20200922-github-readme/","title":"Benjie's Story at GitHub ReadME","sectionId":"about","subpages":null},{"to":"/news/20201127-migrate-1/","title":"Graphile Migrate Reaches 1.0 Milestone","sectionId":"main","subpages":null},{"to":"/news/20200805-postgraphile-48/","title":"PostGraphile 4.8 - Excellent Enums","sectionId":"main","subpages":null},{"to":"/news/20200721-rita/","title":"pgRITA - A Tool for Postgres","sectionId":"main","subpages":null},{"to":"/news/20200427-starter-30/","title":"Graphile Starter 3.0","sectionId":"main","subpages":null},{"to":"/news/20200317-migrate-01/","title":"Graphile Migrate 0.1","sectionId":"main","subpages":null},{"to":"/news/20200205-worker-04/","title":"Graphile Worker 0.4","sectionId":"main","subpages":null},{"to":"/news/20200131-fosdem/","title":"Graphile Goes to FOSDEM 2020","sectionId":"misc","subpages":null},{"to":"/news/graphile-starter/","title":"Graphile Starter Released","sectionId":"main","subpages":null},{"to":"/news/postgraphile-version-4-5/","title":"PostGraphile 4.5 - Explain Feature","sectionId":"main","subpages":null},{"to":"/news/20191104-reactive-conf/","title":"Increasing velocity with GraphQL and Postgres","sectionId":"misc","subpages":null},{"to":"/news/postgraphile-version-4-4/","title":"PostGraphile 4.4 - Real-time","sectionId":"main","subpages":null},{"to":"/news/postgraphile-version-4-1/","title":"PostGraphile 4.1 - Better Webpackability","sectionId":"main","subpages":null},{"to":"/news/20181023-graphql-finland/","title":"Database-Driven GraphQL Development","sectionId":"misc","subpages":null},{"to":"/news/postgraphile-version-4/","title":"PostGraphile 4.0 - Fantastic Performance","sectionId":"main","subpages":null},{"to":"/news/press-kit/","title":"Graphile Press Kit","sectionId":"about","subpages":null}]}},{"node":{"id":"9c6fa765-467b-52be-8edb-9e45ddaee2c7","name":"graphile-build","sections":[{"id":"guides","title":"Overview"},{"id":"library-reference","title":"Using the Library"},{"id":"plugin-reference","title":"Building a Plugin"}],"pages":[{"to":"/graphile-build/getting-started/","title":"Getting Started","sectionId":"guides","subpages":[]},{"to":"/graphile-build/plugins/","title":"Plugins","sectionId":"guides","subpages":[]},{"to":"/graphile-build/hooks/","title":"Hooks","sectionId":"guides","subpages":[]},{"to":"/graphile-build/look-ahead/","title":"Look Ahead","sectionId":"guides","subpages":[]},{"to":"/graphile-build/graphile-build/","title":"graphile-build","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/schema-builder/","title":"SchemaBuilder","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/plugin-options/","title":"Options","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/default-plugins/","title":"Default Plugins","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/omitting-plugins/","title":"Omitting Plugins","sectionId":"guides","subpages":[]},{"to":"/graphile-build/all-hooks/","title":"All Hooks","sectionId":"plugin-reference","subpages":[]},{"to":"/graphile-build/build-object/","title":"Build Object","sectionId":"plugin-reference","subpages":[]},{"to":"/graphile-build/context-object/","title":"Context Object","sectionId":"plugin-reference","subpages":[]},{"to":"/graphile-build/schema-builder/","title":"SchemaBuilder","sectionId":"plugin-reference","subpages":[]}]}},{"node":{"id":"db912f43-977c-5927-bd35-643354670ea0","name":"postgraphile","sections":[{"id":"overview","title":"Overview"},{"id":"basics","title":"Operation"},{"id":"customising","title":"Customising"},{"id":"guides","title":"Guides"},{"id":"deploying","title":"Deploying"},{"id":"community","title":"Community"},{"id":"faq","title":"FAQ"}],"pages":[{"to":"/postgraphile/introduction/","title":"Introduction","sectionId":"overview","subpages":[]},{"to":"/postgraphile/examples/","title":"Example Gallery","sectionId":"overview","subpages":[]},{"to":"/postgraphile/usage/","title":"Usage","sectionId":"overview","subpages":[{"to":"/postgraphile/usage-cli/","title":"CLI Usage","sectionId":"overview"},{"to":"/postgraphile/usage-library/","title":"Library Usage","sectionId":"overview"},{"to":"/postgraphile/usage-schema/","title":"Schema-only Usage","sectionId":"overview"}]},{"to":"/postgraphile/performance/","title":"Performance","sectionId":"overview","subpages":[]},{"to":"/postgraphile/requirements/","title":"Requirements","sectionId":"overview","subpages":[]},{"to":"/postgraphile/required-knowledge/","title":"Required Knowledge","sectionId":"overview","subpages":[]},{"to":"/postgraphile/quick-start-guide/","title":"Quick Start Guide","sectionId":"basics","subpages":[]},{"to":"/postgraphile/namespaces/","title":"Namespaces","sectionId":"basics","subpages":null},{"to":"/postgraphile/inflection/","title":"Inflection","sectionId":"basics","subpages":null},{"to":"/postgraphile/tables/","title":"Tables","sectionId":"basics","subpages":[{"to":"/postgraphile/relations/","title":"Relations","sectionId":"basics"},{"to":"/postgraphile/connections/","title":"Connections","sectionId":"basics"},{"to":"/postgraphile/filtering/","title":"Filtering","sectionId":"basics"},{"to":"/postgraphile/crud-mutations/","title":"CRUD Mutations","sectionId":"basics"},{"to":"/postgraphile/node-id/","title":"nodeId / id","sectionId":"basics"}]},{"to":"/postgraphile/functions/","title":"Functions","sectionId":"basics","subpages":[{"to":"/postgraphile/computed-columns/","title":"Computed Columns","sectionId":"basics"},{"to":"/postgraphile/custom-queries/","title":"Custom Queries","sectionId":"basics"},{"to":"/postgraphile/custom-mutations/","title":"Custom Mutations","sectionId":"basics"},{"to":"/postgraphile/function-restrictions/","title":"Function Restrictions","sectionId":"basics"},{"to":"/postgraphile/function-gallery/","title":"Function Gallery","sectionId":"customising"}]},{"to":"/postgraphile/enums/","title":"Enums","sectionId":"basics","subpages":[]},{"to":"/postgraphile/views/","title":"Views","sectionId":"basics","subpages":[]},{"to":"/postgraphile/aggregates/","title":"Aggregates","sectionId":"basics","subpages":[]},{"to":"/postgraphile/postgresql-indexes/","title":"PostgreSQL Indexes","sectionId":"basics","subpages":[]},{"to":"/postgraphile/security/","title":"Security","sectionId":"basics","subpages":[]},{"to":"/postgraphile/realtime/","title":"Realtime","sectionId":"basics","subpages":[{"to":"/postgraphile/subscriptions/","title":"Subscriptions","sectionId":"basics"},{"to":"/postgraphile/live-queries/","title":"Live Queries","sectionId":"basics"}]},{"to":"/postgraphile/background-tasks/","title":"Background Tasks","sectionId":"basics","subpages":[]},{"to":"/postgraphile/reserved-keywords/","title":"Reserved Keywords","sectionId":"basics","subpages":[]},{"to":"/postgraphile/debugging/","title":"Debugging","sectionId":"basics","subpages":[]},{"to":"/postgraphile/smart-tags/","title":"Smart Tags","sectionId":"customising","subpages":[{"to":"/postgraphile/smart-tags-file/","title":"The postgraphile.tags.json5 file","sectionId":"customising"},{"to":"/postgraphile/smart-comments/","title":"Database Smart Comments","sectionId":"customising"}]},{"to":"/postgraphile/extending/","title":"Schema Plugins","sectionId":"customising","subpages":[{"to":"/postgraphile/make-add-inflectors-plugin/","title":"makeAddInflectorsPlugin","sectionId":"customising"},{"to":"/postgraphile/make-change-nullability-plugin/","title":"makeChangeNullabilityPlugin","sectionId":"customising"},{"to":"/postgraphile/make-extend-schema-plugin/","title":"makeExtendSchemaPlugin","sectionId":"customising"},{"to":"/postgraphile/make-process-schema-plugin/","title":"makeProcessSchemaPlugin","sectionId":"customising"},{"to":"/postgraphile/make-wrap-resolvers-plugin/","title":"makeWrapResolversPlugin","sectionId":"customising"},{"to":"/postgraphile/make-add-pg-table-condition-plugin/","title":"makeAddPgTableConditionPlugin","sectionId":"customising"},{"to":"/postgraphile/make-add-pg-table-order-by-plugin/","title":"makeAddPgTableOrderByPlugin","sectionId":"customising"},{"to":"/postgraphile/make-pg-smart-tags-plugin/","title":"makePgSmartTagsPlugin","sectionId":"customising"},{"to":"/postgraphile/make-plugin-by-combining-plugins/","title":"makePluginByCombiningPlugins","sectionId":"customising"},{"to":"/postgraphile/extending-raw/","title":"Graphile Engine","sectionId":"customising"},{"to":"/postgraphile/plugin-gallery/","title":"Plugin Gallery","sectionId":"customising"},{"to":"/postgraphile/community-plugins/","title":"Community Plugins","sectionId":"customising"}]},{"to":"/postgraphile/plugins/","title":"Server Plugins","sectionId":"customising","subpages":[]},{"to":"/postgraphile/postgresql-schema-design/","title":"PostgreSQL Schema Design","sectionId":"guides","subpages":[]},{"to":"/postgraphile/evaluating/","title":"Evaluating for your Project","sectionId":"guides","subpages":[]},{"to":"/postgraphile/best-practices/","title":"Best Practices","sectionId":"guides","subpages":[]},{"to":"/postgraphile/production/","title":"Production Considerations","sectionId":"guides","subpages":[]},{"to":"/postgraphile/jwt-guide/","title":"PostGraphile JWT Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/jwk-verification/","title":"JWK Verification (e.g. Auth0)","sectionId":"guides","subpages":[]},{"to":"/postgraphile/default-role/","title":"The Default Role","sectionId":"guides","subpages":[]},{"to":"/postgraphile/pg-pubsub-migration/","title":"@graphile/pg-pubsub Migration Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/v4-new-features/","title":"v4 Feature Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/v3-migration/","title":"v3 → v4 Migration Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/testing-jest/","title":"Testing with Jest","sectionId":"guides","subpages":[]},{"to":"/postgraphile/bundling-webpack/","title":"Bundling with Webpack","sectionId":"guides","subpages":[]},{"to":"/postgraphile/multiple-schemas/","title":"Multiple GraphQL Schemas","sectionId":"guides","subpages":[]},{"to":"/postgraphile/running-postgraphile-in-docker/","title":"Running PostGraphile in Docker","sectionId":"guides","subpages":[]},{"to":"/postgraphile/running-postgraphile-as-a-library-in-docker/","title":"Running PostGraphile as a library in Docker","sectionId":"guides","subpages":[]},{"to":"/postgraphile/deploying-heroku/","title":"Deploying to Heroku","sectionId":"deploying","subpages":[]},{"to":"/postgraphile/deploying-docker/","title":"Deploying with Docker","sectionId":"deploying","subpages":[]},{"to":"/postgraphile/deploying-lambda/","title":"Deploying to AWS Lambda","sectionId":"deploying","subpages":[]},{"to":"/postgraphile/deploying-gcp/","title":"Deploying to GCP","sectionId":"deploying","subpages":[]},{"to":"/postgraphile/community-contributions/","title":"Community Contributions","sectionId":"community","subpages":[]},{"to":"/postgraphile/community-chat/","title":"Community Chat","sectionId":"community","subpages":[]},{"to":"/postgraphile/code-of-conduct/","title":"Code of Conduct","sectionId":"community","subpages":[]},{"to":"/postgraphile/introspection/","title":"Introspection?","sectionId":"faq","subpages":[]},{"to":"/postgraphile/why-nullable/","title":"Why is it nullable?","sectionId":"faq","subpages":[]},{"to":"/postgraphile/versioning-policy/","title":"Versioning policy?","sectionId":"faq","subpages":[]}]}},{"node":{"id":"f6dbcb59-d3dc-5c85-a547-0f413b0cfdfa","name":"graphile-build-pg","sections":[{"id":"overview","title":"Usage"}],"pages":[{"to":"/graphile-build-pg/settings/","title":"Settings","sectionId":"overview","subpages":[]}]}}]},"examples":{"edges":[{"node":{"category":"functions","id":"f1a86695-1bfb-5a2c-bd3c-e95a8ba27c2c","title":"Custom queries","examples":[{"title":"Logged in user field","example":"create function viewer()\nreturns users\nas $$\n  select *\n  from users\n  where id = current_user_id();\n  /*\n   * current_user_id() is a function\n   * that returns the logged in user's\n   * id, e.g. by extracting from the JWT\n   * or indicated via pgSettings.\n   */\n$$ language sql stable set search_path from current;\n","exampleLanguage":"sql","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1795,6 +1795,7 @@\n \n   \"\"\"Chosen by fair dice roll. Guaranteed to be random. XKCD#221\"\"\"\n   randomNumber: Int\n+  viewer: User\n \n   \"\"\"Reads a single `Forum` using its globally unique `ID`.\"\"\"\n   forumByNodeId(\n","resultLanguage":"diff"}]}},{"node":{"category":"functions","id":"0c30881e-d050-59f7-8e3e-2ef5f399714d","title":"Computed columns","examples":[{"title":"User primary email","example":"/*\n * Returns the primary email of the\n * current user; for all other users\n * this function will return null.\n */\ncreate function \"users_primaryEmail\"(u users)\nreturns text\nas $$\n  select email\n  from user_emails\n  where user_id = current_user_id()\n  and user_id = u.id\n  and is_verified is true\n  order by id asc\n  limit 1;\n$$ language sql stable set search_path from current;\n","exampleLanguage":"sql","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -3130,6 +3130,7 @@\n     \"\"\"\n     condition: QuizEntryCondition\n   ): QuizEntriesConnection!\n+  primaryEmail: String\n }\n \n \"\"\"\n","resultLanguage":"diff"}]}},{"node":{"category":"functions","id":"8addbbdb-d6cb-5a99-bedb-83c6da6c9731","title":"Custom mutations","examples":[{"title":"Insert multiple records","example":"/**\n * Occasionally you'll want to create a bunch of rows in different tables in a\n * single mutation. Here's an example of how to do that.\n *\n * Pretend we're registering quiz entries, and we want to store each answer in\n * its own table as we want to be able to operate on the answers independently\n * later.\n *\n * This means we want:\n *\n *  1. A mutation that takes input data for inserting one quiz entry and\n *  multiple answers.\n *  2. A function that inserts a new quiz entry, inserts an answer for each\n *  answer provided in the input data, and connects each answer to the created\n *  quiz entry.\n *  3. Finally, we want the function to return the inserted quiz entry itself.\n */\n\n/**\n * This type is used for input in the mutation\n */\ncreate type quiz_entry_input as (\n  question text,\n  answer int\n);\n\n/**\n * Here's the function that gets turned into a \"custom mutation\"\n */\ncreate function add_quiz_entry(\n  quiz_id int,\n  answers quiz_entry_input[]\n)\nreturns quiz_entry\nas $$\n  declare\n    q quiz_entry;\n    a quiz_entry_answer;\n  begin\n    insert into quiz_entry(user_id, quiz_id)\n      values(current_user_id(), quiz_id)\n      returning * into q;\n\n    foreach a in array answers loop\n      insert into quiz_entry_answer(quiz_entry_id, question, answer)\n        values (quiz_id, a.question, a.answer);\n    end loop;\n\n    return q;\n  end;\n$$ language plpgsql volatile strict set search_path from current;\n","exampleLanguage":"sql","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,3 +1,41 @@\n+\"\"\"All input for the `addQuizEntry` mutation.\"\"\"\n+input AddQuizEntryInput {\n+  \"\"\"\n+  An arbitrary string value with no semantic meaning. Will be included in the\n+  payload verbatim. May be used to track mutations by the client.\n+  \"\"\"\n+  clientMutationId: String\n+  quizId: Int!\n+  answers: [QuizEntryInputRecordInput]!\n+}\n+\n+\"\"\"The output of our `addQuizEntry` mutation.\"\"\"\n+type AddQuizEntryPayload {\n+  \"\"\"\n+  The exact same `clientMutationId` that was provided in the mutation input,\n+  unchanged and unused. May be used by a client to track mutations.\n+  \"\"\"\n+  clientMutationId: String\n+  quizEntry: QuizEntry\n+\n+  \"\"\"\n+  Our root query field type. Allows us to run any query from our mutation payload.\n+  \"\"\"\n+  query: Query\n+\n+  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n+  user: User\n+\n+  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n+  quiz: Quiz\n+\n+  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n+  quizEntryEdge(\n+    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n+    orderBy: [QuizEntriesOrderBy!] = [PRIMARY_KEY_ASC]\n+  ): QuizEntriesEdge\n+}\n+\n \"\"\"\n A floating point number that requires more precision than IEEE 754 binary 64\n \"\"\"\n@@ -1472,6 +1510,12 @@\n     \"\"\"\n     input: DeleteUserByUsernameInput!\n   ): DeleteUserPayload\n+  addQuizEntry(\n+    \"\"\"\n+    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    \"\"\"\n+    input: AddQuizEntryInput!\n+  ): AddQuizEntryPayload\n \n   \"\"\"\n   If you've forgotten your password, give us one of your email addresses and we'\n@@ -2115,6 +2159,12 @@\n   quizId: Int!\n }\n \n+\"\"\"An input for mutations affecting `QuizEntryInputRecord`\"\"\"\n+input QuizEntryInputRecordInput {\n+  question: String\n+  answer: Int\n+}\n+\n \"\"\"\n Represents an update to a `QuizEntry`. Fields that are set will be updated.\n \"\"\"\n","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"c5f90f4e-c704-5f6c-9363-030653ff1d52","title":"Inflector","examples":[{"title":"PgRenamePatchToPatchSetPlugin","example":"/**\n * Simply renames the `UserPatch` and `PostPatch` type names to be called\n * `UserPatchSet` and `PostPatchSet` instead.\n *\n * Not particularly useful, just an example. ('PatchSet' chosen to minimise\n * diff to make example clearer.)\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L309-L311\n */\nmodule.exports = function PgRenamePatchToPatchSetPlugin(\n  builder\n) {\n  builder.hook(\n    \"inflection\",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the patchType inflector\n      patchType(typeName) {\n        // return this.upperCamelCase(`${typeName}-patch`);\n        return this.upperCamelCase(\n          `${typeName}-patch-set`\n        );\n      },\n    })\n  );\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -979,7 +979,7 @@\n \"\"\"\n Represents an update to a `Forum`. Fields that are set will be updated.\n \"\"\"\n-input ForumPatch {\n+input ForumPatchSet {\n   id: Int\n \n   \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n@@ -1573,7 +1573,7 @@\n }\n \n \"\"\"Represents an update to a `Post`. Fields that are set will be updated.\"\"\"\n-input PostPatch {\n+input PostPatchSet {\n   \"\"\"The body of the `Topic`, which Posts reply to.\"\"\"\n   body: Html\n }\n@@ -2043,7 +2043,7 @@\n \"\"\"\n Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n \"\"\"\n-input QuizEntryAnswerPatch {\n+input QuizEntryAnswerPatchSet {\n   id: Int\n   quizEntryId: Int\n   question: String\n@@ -2118,7 +2118,7 @@\n \"\"\"\n Represents an update to a `QuizEntry`. Fields that are set will be updated.\n \"\"\"\n-input QuizEntryPatch {\n+input QuizEntryPatchSet {\n   id: Int\n   userId: Int\n   quizId: Int\n@@ -2134,7 +2134,7 @@\n }\n \n \"\"\"Represents an update to a `Quiz`. Fields that are set will be updated.\"\"\"\n-input QuizPatch {\n+input QuizPatchSet {\n   id: Int\n   name: String\n   updatedAt: Datetime\n@@ -2317,7 +2317,7 @@\n \"\"\"\n Represents an update to a `Topic`. Fields that are set will be updated.\n \"\"\"\n-input TopicPatch {\n+input TopicPatchSet {\n   id: Int\n   forumId: Int\n   authorId: Int\n@@ -2394,7 +2394,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Forum` being updated.\n   \"\"\"\n-  patch: ForumPatch!\n+  patch: ForumPatchSet!\n }\n \n \"\"\"All input for the `updateForumBySlug` mutation.\"\"\"\n@@ -2408,7 +2408,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Forum` being updated.\n   \"\"\"\n-  patch: ForumPatch!\n+  patch: ForumPatchSet!\n \n   \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n   slug: String!\n@@ -2425,7 +2425,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Forum` being updated.\n   \"\"\"\n-  patch: ForumPatch!\n+  patch: ForumPatchSet!\n   id: Int!\n }\n \n@@ -2468,7 +2468,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Post` being updated.\n   \"\"\"\n-  patch: PostPatch!\n+  patch: PostPatchSet!\n }\n \n \"\"\"All input for the `updatePost` mutation.\"\"\"\n@@ -2482,7 +2482,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Post` being updated.\n   \"\"\"\n-  patch: PostPatch!\n+  patch: PostPatchSet!\n   id: Int!\n }\n \n@@ -2531,7 +2531,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Quiz` being updated.\n   \"\"\"\n-  patch: QuizPatch!\n+  patch: QuizPatchSet!\n }\n \n \"\"\"All input for the `updateQuizEntryAnswerByNodeId` mutation.\"\"\"\n@@ -2550,7 +2550,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n   \"\"\"\n-  patch: QuizEntryAnswerPatch!\n+  patch: QuizEntryAnswerPatchSet!\n }\n \n \"\"\"All input for the `updateQuizEntryAnswer` mutation.\"\"\"\n@@ -2564,7 +2564,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n   \"\"\"\n-  patch: QuizEntryAnswerPatch!\n+  patch: QuizEntryAnswerPatchSet!\n   id: Int!\n }\n \n@@ -2610,7 +2610,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntry` being updated.\n   \"\"\"\n-  patch: QuizEntryPatch!\n+  patch: QuizEntryPatchSet!\n }\n \n \"\"\"All input for the `updateQuizEntry` mutation.\"\"\"\n@@ -2624,7 +2624,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntry` being updated.\n   \"\"\"\n-  patch: QuizEntryPatch!\n+  patch: QuizEntryPatchSet!\n   id: Int!\n }\n \n@@ -2668,7 +2668,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Quiz` being updated.\n   \"\"\"\n-  patch: QuizPatch!\n+  patch: QuizPatchSet!\n   id: Int!\n }\n \n@@ -2711,7 +2711,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Topic` being updated.\n   \"\"\"\n-  patch: TopicPatch!\n+  patch: TopicPatchSet!\n }\n \n \"\"\"All input for the `updateTopic` mutation.\"\"\"\n@@ -2725,7 +2725,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Topic` being updated.\n   \"\"\"\n-  patch: TopicPatch!\n+  patch: TopicPatchSet!\n   id: Int!\n }\n \n@@ -2774,7 +2774,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserAuthentication` being updated.\n   \"\"\"\n-  patch: UserAuthenticationPatch!\n+  patch: UserAuthenticationPatchSet!\n }\n \n \"\"\"\n@@ -2790,7 +2790,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserAuthentication` being updated.\n   \"\"\"\n-  patch: UserAuthenticationPatch!\n+  patch: UserAuthenticationPatchSet!\n \n   \"\"\"The login service used, e.g. `twitter` or `github`.\"\"\"\n   service: String!\n@@ -2810,7 +2810,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserAuthentication` being updated.\n   \"\"\"\n-  patch: UserAuthenticationPatch!\n+  patch: UserAuthenticationPatchSet!\n   id: Int!\n }\n \n@@ -2853,7 +2853,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `User` being updated.\n   \"\"\"\n-  patch: UserPatch!\n+  patch: UserPatchSet!\n }\n \n \"\"\"All input for the `updateUserByUsername` mutation.\"\"\"\n@@ -2867,7 +2867,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `User` being updated.\n   \"\"\"\n-  patch: UserPatch!\n+  patch: UserPatchSet!\n \n   \"\"\"Public-facing username (or 'handle') of the user.\"\"\"\n   username: String!\n@@ -2889,7 +2889,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserEmail` being updated.\n   \"\"\"\n-  patch: UserEmailPatch!\n+  patch: UserEmailPatchSet!\n }\n \n \"\"\"All input for the `updateUserEmailByUserIdAndEmail` mutation.\"\"\"\n@@ -2903,7 +2903,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserEmail` being updated.\n   \"\"\"\n-  patch: UserEmailPatch!\n+  patch: UserEmailPatchSet!\n   userId: Int!\n \n   \"\"\"The users email address, in `a@b.c` format.\"\"\"\n@@ -2921,7 +2921,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserEmail` being updated.\n   \"\"\"\n-  patch: UserEmailPatch!\n+  patch: UserEmailPatchSet!\n   id: Int!\n }\n \n@@ -2962,7 +2962,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `User` being updated.\n   \"\"\"\n-  patch: UserPatch!\n+  patch: UserPatchSet!\n \n   \"\"\"Unique identifier for the user.\"\"\"\n   id: Int!\n@@ -3167,7 +3167,7 @@\n \"\"\"\n Represents an update to a `UserAuthentication`. Fields that are set will be updated.\n \"\"\"\n-input UserAuthenticationPatch {\n+input UserAuthenticationPatchSet {\n   id: Int\n \n   \"\"\"The login service used, e.g. `twitter` or `github`.\"\"\"\n@@ -3273,7 +3273,7 @@\n \"\"\"\n Represents an update to a `UserEmail`. Fields that are set will be updated.\n \"\"\"\n-input UserEmailPatch {\n+input UserEmailPatchSet {\n   id: Int\n   userId: Int\n \n@@ -3355,7 +3355,7 @@\n }\n \n \"\"\"Represents an update to a `User`. Fields that are set will be updated.\"\"\"\n-input UserPatch {\n+input UserPatchSet {\n   \"\"\"Unique identifier for the user.\"\"\"\n   id: Int\n \n","resultLanguage":"diff"},{"title":"PgShortenAllRowsInflectorPlugin","example":"/**\n * Simply renames the `allUsers` and `allPosts` Query fields to `users` and\n * `posts` respectively.\n *\n * Not particularly useful, just an example.\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L460-L464\n */\nmodule.exports = function PgShortenAllRowsInflectorPlugin(\n  builder\n) {\n  builder.hook(\n    \"inflection\",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the allRows inflector\n      allRows(table) {\n        return this.camelCase(\n          // Was: `all-${this.pluralize(this._singularizedTableName(table))}`\n          // Now:\n          this.pluralize(\n            this._singularizedTableName(\n              table\n            )\n          )\n        );\n      },\n    })\n  );\n};\n","exampleLanguage":"javascript","result":"","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"a5b3b7e0-cf0e-5962-96c8-e2230b819469","title":"Types","examples":[{"title":"PgNumericToFloatPlugin","example":"/**\n * Use of this plugin is NOT recommended, please see\n * PgSmallNumericToFloatPlugin for a more appropriate replacement if you need\n * one.\n *\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for *all* DECIMAL / NUMERIC values, for making PostGraphile v4 slightly more\n * backwards-compatible with v3.\n *\n * It's generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur.\n */\nmodule.exports = function PgNumericToFloatPlugin(\n  builder\n) {\n  builder.hook(\"build\", build => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700), always\n    // returning the GraphQLFloat type\n    build.pgRegisterGqlTypeByTypeId(\n      \"1700\",\n      () => build.graphql.GraphQLFloat\n    );\n    return build;\n  });\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,8 +1,3 @@\n-\"\"\"\n-A floating point number that requires more precision than IEEE 754 binary 64\n-\"\"\"\n-scalar BigFloat\n-\n \"\"\"All input for the create `Forum` mutation.\"\"\"\n input CreateForumInput {\n   \"\"\"\n@@ -1863,8 +1858,8 @@\n   id: Int!\n   name: String!\n   updatedAt: Datetime!\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n \n   \"\"\"Reads and enables pagination through a set of `QuizEntry`.\"\"\"\n   quizEntries(\n@@ -1910,10 +1905,10 @@\n   updatedAt: Datetime\n \n   \"\"\"Checks for equality with the object’s `precision12Scale2` field.\"\"\"\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   \"\"\"Checks for equality with the object’s `precision200Scale100` field.\"\"\"\n-  precision200Scale100: BigFloat\n+  precision200Scale100: Float\n }\n \n \"\"\"A connection to a list of `QuizEntry` values.\"\"\"\n@@ -2129,8 +2124,8 @@\n   id: Int\n   name: String!\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n \"\"\"Represents an update to a `Quiz`. Fields that are set will be updated.\"\"\"\n@@ -2138,8 +2133,8 @@\n   id: Int\n   name: String\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n \"\"\"A connection to a list of `Quiz` values.\"\"\"\n","resultLanguage":"diff"},{"title":"PgSmallNumericToFloatPlugin","example":"/**\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for DECIMAL / NUMERIC values that have a precision and scale under the given\n * limits (currently 12 and 2 respectively).\n *\n * It's generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur; however some systems are okay with this compromise.\n */\nmodule.exports = function PgSmallNumericToFloatPlugin(\n  builder,\n  {\n    pgNumericToFloatPrecisionCap = 12,\n    pgNumericToFloatScaleCap = 2,\n  }\n) {\n  builder.hook(\"build\", build => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700)\n    build.pgRegisterGqlTypeByTypeId(\n      \"1700\",\n      (_set, modifier) => {\n        if (\n          modifier &&\n          typeof modifier ===\n            \"number\" &&\n          modifier > 0\n        ) {\n          // Ref: https://stackoverflow.com/a/3351120/141284\n          const precision =\n            ((modifier - 4) >> 16) &\n            65535;\n          const scale =\n            (modifier - 4) & 65535;\n          if (\n            precision <=\n              pgNumericToFloatPrecisionCap &&\n            scale <=\n              pgNumericToFloatScaleCap\n          ) {\n            // This number is no more precise than our cap, so we're declaring\n            // that we can handle it as a float:\n            return build.graphql\n              .GraphQLFloat;\n          }\n        }\n        // If all else fails, let PostGraphile do it's default handling - i.e.\n        // BigFloat\n        return null;\n      }\n    );\n\n    // We didn't modify _init, but we still must return it.\n    return build;\n  });\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1863,7 +1863,7 @@\n   id: Int!\n   name: String!\n   updatedAt: Datetime!\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n \n   \"\"\"Reads and enables pagination through a set of `QuizEntry`.\"\"\"\n@@ -1910,7 +1910,7 @@\n   updatedAt: Datetime\n \n   \"\"\"Checks for equality with the object’s `precision12Scale2` field.\"\"\"\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   \"\"\"Checks for equality with the object’s `precision200Scale100` field.\"\"\"\n   precision200Scale100: BigFloat\n@@ -2129,7 +2129,7 @@\n   id: Int\n   name: String!\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n@@ -2138,7 +2138,7 @@\n   id: Int\n   name: String\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n","resultLanguage":"diff"},{"title":"SetInputObjectDefaultValue","example":"/**\n * This plugin sets a defaultValue on all input object fields that match the\n * given criteria (specifically the 'create' input types, for columns named\n * 'name')\n */\nmodule.exports = function SetInputObjectDefaultValue(\n  builder\n) {\n  builder.hook(\n    \"GraphQLInputObjectType:fields:field\",\n    (field, build, context) => {\n      const {\n        scope: {\n          isPgRowType,\n          isInputType,\n          isPgPatch,\n          pgFieldIntrospection: attr,\n        },\n      } = context;\n      if (\n        !isPgRowType ||\n        !isInputType ||\n        isPgPatch ||\n        !attr ||\n        attr.kind !== \"attribute\" ||\n        attr.name !== \"name\"\n      ) {\n        return field;\n      }\n\n      return {\n        ...field,\n        type: build.graphql.getNamedType(\n          field.type\n        ), // Since it has a default, it can be nullable\n        defaultValue:\n          // attr.tags.defaultValue: enables overriding this with a\n          // `@defaultValue Alice Smith` smart comment\n          attr.tags.defaultValue ||\n          \"Bobby Tables\",\n      };\n    }\n  );\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -968,7 +968,7 @@\n   slug: String!\n \n   \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n-  name: String!\n+  name: String = \"Bobby Tables\"\n \n   \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n   description: String\n@@ -2127,7 +2127,7 @@\n \"\"\"An input for mutations affecting `Quiz`\"\"\"\n input QuizInput {\n   id: Int\n-  name: String!\n+  name: String = \"Bobby Tables\"\n   updatedAt: Datetime\n   precision12Scale2: BigFloat\n   precision200Scale100: BigFloat\n@@ -3343,7 +3343,7 @@\n   username: String!\n \n   \"\"\"Public-facing name (or pseudonym) of the user.\"\"\"\n-  name: String\n+  name: String = \"Bobby Tables\"\n \n   \"\"\"Optional avatar URL.\"\"\"\n   avatarUrl: String\n","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"573c161f-f98f-55d1-95d6-6f6edebaca42","title":"Mutation wrappers","examples":[{"title":"OverrideArgValuePlugin","example":"/**\n * This plugin sets the `input.quizPatch.updatedAt` to the current timestamp in\n * the `updateQuiz*` mutations IFF it's not already set.\n */\nmodule.exports = function SetInputObjectDefaultValue(\n  builder\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields:field\",\n    (field, build, context) => {\n      const {\n        scope: {\n          isPgUpdateMutationField,\n          pgFieldIntrospection: table,\n        },\n      } = context;\n      if (\n        !isPgUpdateMutationField ||\n        table.kind !== \"class\" ||\n        table.name !== \"quiz\"\n      ) {\n        return field;\n      }\n\n      const oldResolve =\n        field.resolve;\n\n      return {\n        ...field,\n        resolve(\n          _mutation,\n          args,\n          context,\n          info\n        ) {\n          // Override the `updatedAt` field if it's not already set.\n          if (\n            args.input.quizPatch\n              .updatedAt == null\n          ) {\n            args.input.quizPatch.updatedAt = new Date().toISOString();\n          }\n          return oldResolve(\n            _mutation,\n            args,\n            context,\n            info\n          );\n        },\n      };\n    }\n  );\n};\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0300_mutation_wrappers/OverrideArgValuePlugin.js -c graphile_org_demo -s app_public\n","exampleLanguage":"javascript","result":"","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"a075db74-d68f-5c74-8757-3a8bb2214bb8","title":"Customisation","examples":[{"title":"OmitMutationsByDefaultPlugin","example":"/**\n * This plugin treats any table that doesn't have an `@omit` comment as if it\n * had `@omit create,update,delete` (thereby disabling mutations).\n *\n * Override it by adding a smart comment to the table. To restore all\n * mutations, do `COMMENT ON my_table IS E'@omit :';` (the `:` is special\n * syntax for \"nothing\").\n */\nmodule.exports = function OmitMutationsByDefaultPlugin(\n  builder\n) {\n  builder.hook(\"build\", build => {\n    const {\n      pgIntrospectionResultsByKind,\n    } = build;\n    pgIntrospectionResultsByKind.class\n      .filter(\n        table =>\n          table.isSelectable &&\n          table.namespace\n      )\n      .forEach(table => {\n        if (!(\"omit\" in table.tags)) {\n          table.tags.omit =\n            \"create,update,delete\";\n        }\n      });\n    return build;\n  });\n};\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0400_customisation/OmitMutationsByDefaultPlugin.js -c graphile_org_demo -s app_public\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -3,41 +3,6 @@\n \"\"\"\n scalar BigFloat\n \n-\"\"\"All input for the create `Forum` mutation.\"\"\"\n-input CreateForumInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` to be created by this mutation.\"\"\"\n-  forum: ForumInput!\n-}\n-\n-\"\"\"The output of our create `Forum` mutation.\"\"\"\n-type CreateForumPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` that was created by this mutation.\"\"\"\n-  forum: Forum\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n-  forumEdge(\n-    \"\"\"The method to use when ordering `Forum`.\"\"\"\n-    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): ForumsEdge\n-}\n-\n \"\"\"All input for the create `Post` mutation.\"\"\"\n input CreatePostInput {\n   \"\"\"\n@@ -79,120 +44,6 @@\n   ): PostsEdge\n }\n \n-\"\"\"All input for the create `QuizEntryAnswer` mutation.\"\"\"\n-input CreateQuizEntryAnswerInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` to be created by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswerInput!\n-}\n-\n-\"\"\"The output of our create `QuizEntryAnswer` mutation.\"\"\"\n-type CreateQuizEntryAnswerPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` that was created by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswer\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"An edge for our `QuizEntryAnswer`. May be used by Relay 1.\"\"\"\n-  quizEntryAnswerEdge(\n-    \"\"\"The method to use when ordering `QuizEntryAnswer`.\"\"\"\n-    orderBy: [QuizEntryAnswersOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizEntryAnswersEdge\n-}\n-\n-\"\"\"All input for the create `QuizEntry` mutation.\"\"\"\n-input CreateQuizEntryInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` to be created by this mutation.\"\"\"\n-  quizEntry: QuizEntryInput!\n-}\n-\n-\"\"\"The output of our create `QuizEntry` mutation.\"\"\"\n-type CreateQuizEntryPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` that was created by this mutation.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n-  user: User\n-\n-  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n-  quizEntryEdge(\n-    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n-    orderBy: [QuizEntriesOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizEntriesEdge\n-}\n-\n-\"\"\"All input for the create `Quiz` mutation.\"\"\"\n-input CreateQuizInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` to be created by this mutation.\"\"\"\n-  quiz: QuizInput!\n-}\n-\n-\"\"\"The output of our create `Quiz` mutation.\"\"\"\n-type CreateQuizPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` that was created by this mutation.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Quiz`. May be used by Relay 1.\"\"\"\n-  quizEdge(\n-    \"\"\"The method to use when ordering `Quiz`.\"\"\"\n-    orderBy: [QuizzesOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizzesEdge\n-}\n-\n \"\"\"All input for the create `Topic` mutation.\"\"\"\n input CreateTopicInput {\n   \"\"\"\n@@ -351,66 +202,6 @@\n \"\"\"\n scalar Datetime\n \n-\"\"\"All input for the `deleteForumByNodeId` mutation.\"\"\"\n-input DeleteForumByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Forum` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"All input for the `deleteForumBySlug` mutation.\"\"\"\n-input DeleteForumBySlugInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String!\n-}\n-\n-\"\"\"All input for the `deleteForum` mutation.\"\"\"\n-input DeleteForumInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"The output of our delete `Forum` mutation.\"\"\"\n-type DeleteForumPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` that was deleted by this mutation.\"\"\"\n-  forum: Forum\n-  deletedForumNodeId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n-  forumEdge(\n-    \"\"\"The method to use when ordering `Forum`.\"\"\"\n-    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): ForumsEdge\n-}\n-\n \"\"\"All input for the `deletePostByNodeId` mutation.\"\"\"\n input DeletePostByNodeIdInput {\n   \"\"\"\n@@ -465,159 +256,6 @@\n   ): PostsEdge\n }\n \n-\"\"\"All input for the `deleteQuizByNodeId` mutation.\"\"\"\n-input DeleteQuizByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Quiz` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"All input for the `deleteQuizEntryAnswerByNodeId` mutation.\"\"\"\n-input DeleteQuizEntryAnswerByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntryAnswer` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"All input for the `deleteQuizEntryAnswer` mutation.\"\"\"\n-input DeleteQuizEntryAnswerInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"The output of our delete `QuizEntryAnswer` mutation.\"\"\"\n-type DeleteQuizEntryAnswerPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` that was deleted by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswer\n-  deletedQuizEntryAnswerNodeId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"An edge for our `QuizEntryAnswer`. May be used by Relay 1.\"\"\"\n-  quizEntryAnswerEdge(\n-    \"\"\"The method to use when ordering `QuizEntryAnswer`.\"\"\"\n-    orderBy: [QuizEntryAnswersOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizEntryAnswersEdge\n-}\n-\n-\"\"\"All input for the `deleteQuizEntryByNodeId` mutation.\"\"\"\n-input DeleteQuizEntryByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntry` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"All input for the `deleteQuizEntry` mutation.\"\"\"\n-input DeleteQuizEntryInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"The output of our delete `QuizEntry` mutation.\"\"\"\n-type DeleteQuizEntryPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` that was deleted by this mutation.\"\"\"\n-  quizEntry: QuizEntry\n-  deletedQuizEntryNodeId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n-  user: User\n-\n-  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n-  quizEntryEdge(\n-    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n-    orderBy: [QuizEntriesOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizEntriesEdge\n-}\n-\n-\"\"\"All input for the `deleteQuiz` mutation.\"\"\"\n-input DeleteQuizInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"The output of our delete `Quiz` mutation.\"\"\"\n-type DeleteQuizPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` that was deleted by this mutation.\"\"\"\n-  quiz: Quiz\n-  deletedQuizNodeId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Quiz`. May be used by Relay 1.\"\"\"\n-  quizEdge(\n-    \"\"\"The method to use when ordering `Quiz`.\"\"\"\n-    orderBy: [QuizzesOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizzesEdge\n-}\n-\n \"\"\"All input for the `deleteTopicByNodeId` mutation.\"\"\"\n input DeleteTopicByNodeIdInput {\n   \"\"\"\n@@ -960,40 +598,6 @@\n   updatedAt: Datetime\n }\n \n-\"\"\"An input for mutations affecting `Forum`\"\"\"\n-input ForumInput {\n-  id: Int\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String!\n-\n-  \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n-  name: String!\n-\n-  \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n-  description: String\n-  createdAt: Datetime\n-  updatedAt: Datetime\n-}\n-\n-\"\"\"\n-Represents an update to a `Forum`. Fields that are set will be updated.\n-\"\"\"\n-input ForumPatch {\n-  id: Int\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String\n-\n-  \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n-  name: String\n-\n-  \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n-  description: String\n-  createdAt: Datetime\n-  updatedAt: Datetime\n-}\n-\n \"\"\"A connection to a list of `Forum` values.\"\"\"\n type ForumsConnection {\n   \"\"\"A list of `Forum` objects.\"\"\"\n@@ -1045,14 +649,6 @@\n The root mutation type which contains root level fields which mutate data.\n \"\"\"\n type Mutation {\n-  \"\"\"Creates a single `Forum`.\"\"\"\n-  createForum(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateForumInput!\n-  ): CreateForumPayload\n-\n   \"\"\"Creates a single `Post`.\"\"\"\n   createPost(\n     \"\"\"\n@@ -1061,30 +657,6 @@\n     input: CreatePostInput!\n   ): CreatePostPayload\n \n-  \"\"\"Creates a single `Quiz`.\"\"\"\n-  createQuiz(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateQuizInput!\n-  ): CreateQuizPayload\n-\n-  \"\"\"Creates a single `QuizEntry`.\"\"\"\n-  createQuizEntry(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateQuizEntryInput!\n-  ): CreateQuizEntryPayload\n-\n-  \"\"\"Creates a single `QuizEntryAnswer`.\"\"\"\n-  createQuizEntryAnswer(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateQuizEntryAnswerInput!\n-  ): CreateQuizEntryAnswerPayload\n-\n   \"\"\"Creates a single `Topic`.\"\"\"\n   createTopic(\n     \"\"\"\n@@ -1117,30 +689,6 @@\n     input: CreateUserInput!\n   ): CreateUserPayload\n \n-  \"\"\"Updates a single `Forum` using its globally unique id and a patch.\"\"\"\n-  updateForumByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateForumByNodeIdInput!\n-  ): UpdateForumPayload\n-\n-  \"\"\"Updates a single `Forum` using a unique key and a patch.\"\"\"\n-  updateForum(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateForumInput!\n-  ): UpdateForumPayload\n-\n-  \"\"\"Updates a single `Forum` using a unique key and a patch.\"\"\"\n-  updateForumBySlug(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateForumBySlugInput!\n-  ): UpdateForumPayload\n-\n   \"\"\"Updates a single `Post` using its globally unique id and a patch.\"\"\"\n   updatePostByNodeId(\n     \"\"\"\n@@ -1157,56 +705,6 @@\n     input: UpdatePostInput!\n   ): UpdatePostPayload\n \n-  \"\"\"Updates a single `Quiz` using its globally unique id and a patch.\"\"\"\n-  updateQuizByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizByNodeIdInput!\n-  ): UpdateQuizPayload\n-\n-  \"\"\"Updates a single `Quiz` using a unique key and a patch.\"\"\"\n-  updateQuiz(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizInput!\n-  ): UpdateQuizPayload\n-\n-  \"\"\"Updates a single `QuizEntry` using its globally unique id and a patch.\"\"\"\n-  updateQuizEntryByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryByNodeIdInput!\n-  ): UpdateQuizEntryPayload\n-\n-  \"\"\"Updates a single `QuizEntry` using a unique key and a patch.\"\"\"\n-  updateQuizEntry(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryInput!\n-  ): UpdateQuizEntryPayload\n-\n-  \"\"\"\n-  Updates a single `QuizEntryAnswer` using its globally unique id and a patch.\n-  \"\"\"\n-  updateQuizEntryAnswerByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryAnswerByNodeIdInput!\n-  ): UpdateQuizEntryAnswerPayload\n-\n-  \"\"\"Updates a single `QuizEntryAnswer` using a unique key and a patch.\"\"\"\n-  updateQuizEntryAnswer(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryAnswerInput!\n-  ): UpdateQuizEntryAnswerPayload\n-\n   \"\"\"Updates a single `Topic` using its globally unique id and a patch.\"\"\"\n   updateTopicByNodeId(\n     \"\"\"\n@@ -1297,30 +795,6 @@\n     input: UpdateUserByUsernameInput!\n   ): UpdateUserPayload\n \n-  \"\"\"Deletes a single `Forum` using its globally unique id.\"\"\"\n-  deleteForumByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteForumByNodeIdInput!\n-  ): DeleteForumPayload\n-\n-  \"\"\"Deletes a single `Forum` using a unique key.\"\"\"\n-  deleteForum(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteForumInput!\n-  ): DeleteForumPayload\n-\n-  \"\"\"Deletes a single `Forum` using a unique key.\"\"\"\n-  deleteForumBySlug(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteForumBySlugInput!\n-  ): DeleteForumPayload\n-\n   \"\"\"Deletes a single `Post` using its globally unique id.\"\"\"\n   deletePostByNodeId(\n     \"\"\"\n@@ -1337,54 +811,6 @@\n     input: DeletePostInput!\n   ): DeletePostPayload\n \n-  \"\"\"Deletes a single `Quiz` using its globally unique id.\"\"\"\n-  deleteQuizByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteQuizByNodeIdInput!\n-  ): DeleteQuizPayload\n-\n-  \"\"\"Deletes a single `Quiz` using a unique key.\"\"\"\n-  deleteQuiz(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteQuizInput!\n-  ): DeleteQuizPayload\n-\n-  \"\"\"Deletes a single `QuizEntry` using its globally unique id.\"\"\"\n-  deleteQuizEntryByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteQuizEntryByNodeIdInput!\n-  ): DeleteQuizEntryPayload\n-\n-  \"\"\"Deletes a single `QuizEntry` using a unique key.\"\"\"\n-  deleteQuizEntry(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteQuizEntryInput!\n-  ): DeleteQuizEntryPayload\n-\n-  \"\"\"Deletes a single `QuizEntryAnswer` using its globally unique id.\"\"\"\n-  deleteQuizEntryAnswerByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteQuizEntryAnswerByNodeIdInput!\n-  ): DeleteQuizEntryAnswerPayload\n-\n-  \"\"\"Deletes a single `QuizEntryAnswer` using a unique key.\"\"\"\n-  deleteQuizEntryAnswer(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteQuizEntryAnswerInput!\n-  ): DeleteQuizEntryAnswerPayload\n-\n   \"\"\"Deletes a single `Topic` using its globally unique id.\"\"\"\n   deleteTopicByNodeId(\n     \"\"\"\n@@ -2032,24 +1458,6 @@\n   answer: Int\n }\n \n-\"\"\"An input for mutations affecting `QuizEntryAnswer`\"\"\"\n-input QuizEntryAnswerInput {\n-  id: Int\n-  quizEntryId: Int!\n-  question: String!\n-  answer: Int\n-}\n-\n-\"\"\"\n-Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n-\"\"\"\n-input QuizEntryAnswerPatch {\n-  id: Int\n-  quizEntryId: Int\n-  question: String\n-  answer: Int\n-}\n-\n \"\"\"A connection to a list of `QuizEntryAnswer` values.\"\"\"\n type QuizEntryAnswersConnection {\n   \"\"\"A list of `QuizEntryAnswer` objects.\"\"\"\n@@ -2108,40 +1516,6 @@\n   quizId: Int\n }\n \n-\"\"\"An input for mutations affecting `QuizEntry`\"\"\"\n-input QuizEntryInput {\n-  id: Int\n-  userId: Int!\n-  quizId: Int!\n-}\n-\n-\"\"\"\n-Represents an update to a `QuizEntry`. Fields that are set will be updated.\n-\"\"\"\n-input QuizEntryPatch {\n-  id: Int\n-  userId: Int\n-  quizId: Int\n-}\n-\n-\"\"\"An input for mutations affecting `Quiz`\"\"\"\n-input QuizInput {\n-  id: Int\n-  name: String!\n-  updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n-}\n-\n-\"\"\"Represents an update to a `Quiz`. Fields that are set will be updated.\"\"\"\n-input QuizPatch {\n-  id: Int\n-  name: String\n-  updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n-}\n-\n \"\"\"A connection to a list of `Quiz` values.\"\"\"\n type QuizzesConnection {\n   \"\"\"A list of `Quiz` objects.\"\"\"\n@@ -2378,80 +1752,6 @@\n   PRIMARY_KEY_DESC\n }\n \n-\"\"\"All input for the `updateForumByNodeId` mutation.\"\"\"\n-input UpdateForumByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Forum` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Forum` being updated.\n-  \"\"\"\n-  patch: ForumPatch!\n-}\n-\n-\"\"\"All input for the `updateForumBySlug` mutation.\"\"\"\n-input UpdateForumBySlugInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Forum` being updated.\n-  \"\"\"\n-  patch: ForumPatch!\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String!\n-}\n-\n-\"\"\"All input for the `updateForum` mutation.\"\"\"\n-input UpdateForumInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Forum` being updated.\n-  \"\"\"\n-  patch: ForumPatch!\n-  id: Int!\n-}\n-\n-\"\"\"The output of our update `Forum` mutation.\"\"\"\n-type UpdateForumPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` that was updated by this mutation.\"\"\"\n-  forum: Forum\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n-  forumEdge(\n-    \"\"\"The method to use when ordering `Forum`.\"\"\"\n-    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): ForumsEdge\n-}\n-\n \"\"\"All input for the `updatePostByNodeId` mutation.\"\"\"\n input UpdatePostByNodeIdInput {\n   \"\"\"\n@@ -2515,186 +1815,6 @@\n   ): PostsEdge\n }\n \n-\"\"\"All input for the `updateQuizByNodeId` mutation.\"\"\"\n-input UpdateQuizByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Quiz` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Quiz` being updated.\n-  \"\"\"\n-  patch: QuizPatch!\n-}\n-\n-\"\"\"All input for the `updateQuizEntryAnswerByNodeId` mutation.\"\"\"\n-input UpdateQuizEntryAnswerByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntryAnswer` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  \"\"\"\n-  patch: QuizEntryAnswerPatch!\n-}\n-\n-\"\"\"All input for the `updateQuizEntryAnswer` mutation.\"\"\"\n-input UpdateQuizEntryAnswerInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  \"\"\"\n-  patch: QuizEntryAnswerPatch!\n-  id: Int!\n-}\n-\n-\"\"\"The output of our update `QuizEntryAnswer` mutation.\"\"\"\n-type UpdateQuizEntryAnswerPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` that was updated by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswer\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"An edge for our `QuizEntryAnswer`. May be used by Relay 1.\"\"\"\n-  quizEntryAnswerEdge(\n-    \"\"\"The method to use when ordering `QuizEntryAnswer`.\"\"\"\n-    orderBy: [QuizEntryAnswersOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizEntryAnswersEdge\n-}\n-\n-\"\"\"All input for the `updateQuizEntryByNodeId` mutation.\"\"\"\n-input UpdateQuizEntryByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntry` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntry` being updated.\n-  \"\"\"\n-  patch: QuizEntryPatch!\n-}\n-\n-\"\"\"All input for the `updateQuizEntry` mutation.\"\"\"\n-input UpdateQuizEntryInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntry` being updated.\n-  \"\"\"\n-  patch: QuizEntryPatch!\n-  id: Int!\n-}\n-\n-\"\"\"The output of our update `QuizEntry` mutation.\"\"\"\n-type UpdateQuizEntryPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` that was updated by this mutation.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n-  user: User\n-\n-  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n-  quizEntryEdge(\n-    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n-    orderBy: [QuizEntriesOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizEntriesEdge\n-}\n-\n-\"\"\"All input for the `updateQuiz` mutation.\"\"\"\n-input UpdateQuizInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Quiz` being updated.\n-  \"\"\"\n-  patch: QuizPatch!\n-  id: Int!\n-}\n-\n-\"\"\"The output of our update `Quiz` mutation.\"\"\"\n-type UpdateQuizPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` that was updated by this mutation.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Quiz`. May be used by Relay 1.\"\"\"\n-  quizEdge(\n-    \"\"\"The method to use when ordering `Quiz`.\"\"\"\n-    orderBy: [QuizzesOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizzesEdge\n-}\n-\n \"\"\"All input for the `updateTopicByNodeId` mutation.\"\"\"\n input UpdateTopicByNodeIdInput {\n   \"\"\"\n","resultLanguage":"diff"},{"title":"SanitizeHTMLTypePlugin","example":"// Author: Benjie Gillam\n// License: https://benjie.mit-license.org/\n//\n// This is a documentation example, you will need to edit it to make it useful.\n// Instructions on running this plugin are at the bottom.\n\n// This function is the one that would perform sanitisation (writing actual\n// sanitisation is left as an exercise to the reader)\nfunction sanitize(html) {\n  return html.toUpperCase();\n}\n\n// Export our plugin function (it can be async if you want)\nmodule.exports = /* async */ function SanitizeHTMLTypePlugin(\n  builder\n) {\n  // Builder is an instance of SchemaBuilder:\n  //\n  //   https://www.graphile.org/graphile-build/schema-builder/\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  // Here we're hooking the init event; this event occurs after the `build`\n  // object is finalised, but before we start building our schema - it's the\n  // perfect time to hook up additional types.\n  //\n  // 'init' is an a-typical hook in that the first argument is meaningless (but\n  // you should still return it at the end of the hook).\n  //\n  // Note all hooks in graphile-build must be synchronous; any async work must be done above here.\n  builder.hook(\"init\", (_, build) => {\n    // The `build` object is an instance of Build: https://www.graphile.org/graphile-build/build-object/\n    // graphile-build-pg adds a bunch of additional helpers to this object:\n    const {\n      pgIntrospectionResultsByKind, // From PgIntrospectionPlugin\n      pgRegisterGqlTypeByTypeId, // From PgTypesPlugin\n      pgRegisterGqlInputTypeByTypeId, // From PgTypesPlugin\n      pg2GqlMapper, // From PgTypesPlugin\n      pgSql: sql, // From PgBasicsPlugin, this is equivalent to `require('pg-sql2')` but avoids multiple-module conflicts\n      graphql, // Equivalent to `require('graphql')` but avoids multiple-module conflicts\n    } = build;\n    const { GraphQLString } = graphql;\n\n    // First we find the type that we care about. In this case we've done\n    //\n    //   CREATE DOMAIN html AS text;\n    // or\n    //   CREATE DOMAIN public.html AS text;\n    //\n    // so we are looking for the 'html' type in the 'public' schema (namespace).\n    const htmlDomain = pgIntrospectionResultsByKind.type.find(\n      type =>\n        type.name === \"html\" &&\n        type.namespaceName ===\n          \"public\"\n    );\n\n    // If this type exists, then...\n    if (htmlDomain) {\n      // Register the *output* type for this type, we just want to use the `String` type\n      pgRegisterGqlTypeByTypeId(\n        htmlDomain.id,\n        () => GraphQLString\n      );\n\n      // Register the *input* type for this type, again we'll use `String`\n      pgRegisterGqlInputTypeByTypeId(\n        htmlDomain.id,\n        () => GraphQLString\n      );\n\n      // The pg2GqlMapper is responsible for translating things from PostgreSQL\n      // into GraphQL and back again.\n      pg2GqlMapper[htmlDomain.id] = {\n        // From Postgres to GraphQL: we simply take the string from postgres\n        // and sanitise it and return the resulting string to GraphQL.\n        map: value => sanitize(value),\n\n        // From GraphQL to SQL: we must construct an SQL fragment that can be\n        // interpolated into larger SQL queries (e.g. as the argument to a\n        // function or the input value for a CREATE/UPDATE mutation). Graphile\n        // uses the pg-sql2 module for this purpose, you can find the docs\n        // here:\n        //\n        //   https://github.com/graphile/pg-sql2/blob/master/README.md\n        //\n        // We're going to take the value (string) the client gave us, stick it\n        // through the sanitise function, then pass it into SQL using\n        // `sql.value` to avoid SQL injection and being sure to cast it to our\n        // HTML type. Note that if you miss the `sql.value(...)` pg-sql2 will\n        // throw an error, so you don't have to worry about accidental SQL\n        // injection - just never use `sql.raw`!\n        unmap: value =>\n          sql.fragment`(${sql.value(\n            sanitize(value)\n          )}::public.html)`,\n      };\n    }\n\n    // All hooks in graphile-build must return something; normally it's an\n    // augmented form of the thing that was passed as the first argument. We\n    // don't manipuate _ at all so we can simply return it.\n    return _;\n  });\n};\n\n/*\n\nYou can test this plugin by saving it to a file 'plugin.js', then executing the\nfollowing:\n\n  # Create a database to test against\n  createdb sanitise-html\n  # Seed the database with our domain, table and some data\n  psql -1X sanitise-html <<SQL\n    CREATE DOMAIN html AS text;\n    CREATE TABLE a (id SERIAL PRIMARY KEY, t TEXT, h HTML);\n    INSERT INTO a (t, h) VALUES ('AaAaAa', 'BbBbBb');\n  SQL\n  # Run PostGraphile\n  postgraphile --append-plugins `pwd`/plugin.js -c postgres:///sanitise-html\n\n\nHere's a GraphQL query for selecting the data:\n\n  {\n    allAs {\n      nodes {\n        id\n        t\n        h\n      }\n    }\n  }\n\nAnd one for updating the data:\n\n  mutation {\n    updateAById(\n      input: {\n        id: 1\n        aPatch: {\n          t: \"tttt_TTTT_tttt\"\n          h: \"hhhh_HHHH_hhhh\"\n        }\n      }\n    ) {\n      a {\n        id\n        t\n        h\n      }\n    }\n  }\n\n*/\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0400_customisation/SanitizeHTMLTypePlugin.js -c graphile_org_demo -s app_public\n","exampleLanguage":"javascript","result":"","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"dbd65555-a494-599a-af28-adf3b3b5ae74","title":"Other","examples":[{"title":"ExtractSmartTagsPlugin","example":"/**\n * This plugin will create a file `smartTags.json` containing all of the smart\n * tags gathered from all of the various sources (smart comments, smart tags,\n * plugins, etc etc). This provides a relatively easy migration path from using\n * smart comments to using smart tags instead. Neither Smart Comments nor Smart\n * Tags are \"better\" - they each have trade offs - you can use which ever one\n * matches your teams development flow better (or even mix and match!).\n *\n * Author phryneas (https://github.com/graphile/graphile.github.io/pull/243)\n */\nconst { writeFile } = require(\"fs\");\n\nmodule.exports = builder => {\n  builder.hook(\"init\", (_, build) => {\n    function sortStuff(a, b) {\n      const aSchema =\n        \"namespaceName\" in a\n          ? a.namespaceName\n          : a.class.namespaceName;\n      const bSchema =\n        \"namespaceName\" in b\n          ? b.namespaceName\n          : b.class.namespaceName;\n      return (\n        aSchema.localeCompare(\n          bSchema\n        ) *\n          100 +\n        a.name.localeCompare(b.name)\n      );\n    }\n    const smart = {\n      version: 1,\n      config: {\n        class: [\n          ...build\n            .pgIntrospectionResultsByKind\n            .class,\n        ]\n          .sort(sortStuff)\n          .reduce((acc, pgClass) => {\n            let attribute = [\n              ...pgClass.attributes,\n            ]\n              .sort((a, b) =>\n                a.name.localeCompare(\n                  b.name\n                )\n              )\n              .reduce(\n                (acc, pgAttr) => {\n                  const tags =\n                    Object.keys(\n                      pgAttr.tags\n                    ).length > 0\n                      ? pgAttr.tags\n                      : undefined;\n                  if (\n                    pgAttr.description ||\n                    tags\n                  ) {\n                    acc[\n                      pgAttr.name\n                    ] = {\n                      ...(pgAttr.description\n                        ? {\n                            description:\n                              pgAttr.description,\n                          }\n                        : {}),\n                      tags,\n                    };\n                  }\n                  return acc;\n                },\n                {}\n              );\n            if (\n              Object.keys(attribute)\n                .length === 0\n            ) {\n              attribute = undefined;\n            }\n            let constraint = [\n              ...pgClass.constraints,\n            ]\n              .sort(sortStuff)\n              .reduce(\n                (acc, pgConst) => {\n                  if (\n                    pgConst.name.startsWith(\n                      \"FAKE_\"\n                    )\n                  ) {\n                    return acc;\n                  }\n                  const tags =\n                    Object.keys(\n                      pgConst.tags\n                    ).length > 0\n                      ? pgConst.tags\n                      : undefined;\n                  if (\n                    pgConst.class &&\n                    (pgConst.description ||\n                      tags)\n                  ) {\n                    acc[\n                      pgConst.class\n                        .namespaceName +\n                        \".\" +\n                        pgConst.name\n                    ] = {\n                      ...(pgConst.description\n                        ? {\n                            description:\n                              pgConst.description,\n                          }\n                        : {}),\n                      tags,\n                    };\n                  }\n                  return acc;\n                },\n                {}\n              );\n            if (\n              Object.keys(constraint)\n                .length === 0\n            ) {\n              constraint = undefined;\n            }\n            const tags =\n              Object.keys(\n                pgClass.tags\n              ).length > 0\n                ? pgClass.tags\n                : undefined;\n            if (\n              pgClass.description ||\n              tags ||\n              attribute\n            )\n              acc[\n                pgClass.namespaceName +\n                  \".\" +\n                  pgClass.name\n              ] = {\n                ...(pgClass.description\n                  ? {\n                      description:\n                        pgClass.description,\n                    }\n                  : {}),\n                tags,\n                attribute,\n                constraint,\n              };\n            return acc;\n          }, {}),\n        procedure: [\n          ...build\n            .pgIntrospectionResultsByKind\n            .procedure,\n        ]\n          .sort(sortStuff)\n          .reduce((acc, pgProc) => {\n            if (\n              pgProc.name.startsWith(\n                \"FAKE_\"\n              )\n            ) {\n              return acc;\n            }\n            const tags =\n              Object.keys(pgProc.tags)\n                .length > 0\n                ? pgProc.tags\n                : undefined;\n            if (\n              pgProc.description ||\n              tags\n            ) {\n              acc[\n                pgProc.namespaceName +\n                  \".\" +\n                  pgProc.name\n              ] = {\n                ...(pgProc.description\n                  ? {\n                      description:\n                        pgProc.description,\n                    }\n                  : {}),\n                tags,\n              };\n            }\n            return acc;\n          }, {}),\n      },\n    };\n    writeFile(\n      __dirname + \"/smartTags.json\",\n      JSON.stringify(\n        smart,\n        undefined,\n        2\n      ),\n      e => {\n        console.log(e);\n      }\n    );\n    return _;\n  });\n};\n","exampleLanguage":"javascript","result":"","resultLanguage":"diff"}]}},{"node":{"category":"queries","id":"f906ff51-ad12-5a8c-bdd1-e84635ed21f6","title":"Basic","examples":[{"title":"Forums","example":"{\n  forums {\n    nodes {\n      nodeId\n      id\n      slug\n      name\n      description\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forums\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n        \"id\": 1,\n        \"slug\": \"testimonials\",\n        \"name\": \"Testimonials\",\n        \"description\": \"How do you rate PostGraphile?\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDJd\",\n        \"id\": 2,\n        \"slug\": \"feedback\",\n        \"name\": \"Feedback\",\n        \"description\": \"How are you finding PostGraphile?\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDNd\",\n        \"id\": 3,\n        \"slug\": \"cat-life\",\n        \"name\": \"Cat Life\",\n        \"description\": \"A forum all about cats and how fluffy they are and how they completely ignore their owners unless there is food. Or yarn.\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDRd\",\n        \"id\": 4,\n        \"slug\": \"cat-help\",\n        \"name\": \"Cat Help\",\n        \"description\": \"A forum to seek advice if your cat is becoming troublesome.\"\n      }\n    ]\n  }\n}\n","resultLanguage":"json"},{"title":"Forum by slug","example":"{\n  forumBySlug(slug: \"testimonials\") {\n    nodeId\n    id\n    slug\n    name\n    description\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forumBySlug\": {\n    \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n    \"id\": 1,\n    \"slug\": \"testimonials\",\n    \"name\": \"Testimonials\",\n    \"description\": \"How do you rate PostGraphile?\"\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"b888ab68-4d0f-5abb-ab79-4878be4ab4af","title":"Collections","examples":[{"title":"First offset","example":"{\n  forums(first: 1, offset: 1) {\n    nodes {\n      nodeId\n      id\n      name\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forums\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDJd\",\n        \"id\": 2,\n        \"name\": \"Feedback\"\n      }\n    ]\n  }\n}\n","resultLanguage":"json"},{"title":"Relation condition","example":"{\n  forumBySlug(slug: \"testimonials\") {\n    nodeId\n    id\n    name\n    topics(\n      condition: { authorId: 2 }\n    ) {\n      nodes {\n        nodeId\n        id\n        title\n        body\n      }\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forumBySlug\": {\n    \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n    \"id\": 1,\n    \"name\": \"Testimonials\",\n    \"topics\": {\n      \"nodes\": [\n        {\n          \"nodeId\": \"WyJ0b3BpY3MiLDFd\",\n          \"id\": 1,\n          \"title\": \"Thank you!\",\n          \"body\": \"500-1500 requests per second on a single server is pretty awesome.\"\n        }\n      ]\n    }\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"27f4c024-b66b-572b-b78f-544e1b6d7b53","title":"Relations","examples":[{"title":"Forums topics posts","example":"{\n  forumBySlug(slug: \"cat-life\") {\n    name\n    topics(\n      first: 1\n      orderBy: [CREATED_AT_ASC]\n    ) {\n      nodes {\n        id\n        title\n        bodySummary\n        author {\n          id\n          username\n        }\n        posts(\n          first: 1\n          orderBy: [ID_DESC]\n        ) {\n          nodes {\n            id\n            author {\n              id\n              username\n            }\n            body\n          }\n        }\n      }\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forumBySlug\": {\n    \"name\": \"Cat Life\",\n    \"topics\": {\n      \"nodes\": [\n        {\n          \"id\": 4,\n          \"title\": \"I love cats!\",\n          \"bodySummary\": \"They're the best!\",\n          \"author\": {\n            \"id\": 1,\n            \"username\": \"user\"\n          },\n          \"posts\": {\n            \"nodes\": [\n              {\n                \"id\": 6,\n                \"author\": {\n                  \"id\": 3,\n                  \"username\": \"Bradley_A\"\n                },\n                \"body\": \"I love it when they completely ignore you until they want something. So much better than dogs am I rite?\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"bdec1796-5c46-5148-b9c8-7c5bd9e0a9bc","title":"Mutations","examples":[{"title":"Create","example":"mutation {\n  createTopic(\n    input: {\n      topic: {\n        forumId: 2\n        title: \"My question relates to mutations...\"\n        body: \"How do you write them?\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      forumId\n      title\n      body\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"createTopic\": {\n    \"topic\": {\n      \"nodeId\": \"WyJ0b3BpY3MiLDVd\",\n      \"id\": 5,\n      \"forumId\": 2,\n      \"title\": \"My question relates to mutations...\",\n      \"body\": \"How do you write them?\"\n    }\n  }\n}\n","resultLanguage":"json"},{"title":"Update","example":"mutation {\n  updateTopic(\n    input: {\n      id: 1\n      patch: {\n        title: \"My (edited) title\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      title\n      body\n    }\n  }\n}\n\n# Works for a table like:\n#\n#   create table app_public.topics (\n#     id serial primary key,\n#     forum_id integer NOT NULL references app_public.forums on delete cascade,\n#     title text NOT NULL,\n#     body text DEFAULT ''::text NOT NULL\n#   );\n","exampleLanguage":"graphql","result":"{\n  \"updateTopic\": {\n    \"topic\": {\n      \"nodeId\": \"WyJ0b3BpY3MiLDFd\",\n      \"id\": 1,\n      \"title\": \"My (edited) title\",\n      \"body\": \"500-1500 requests per second on a single server is pretty awesome.\"\n    }\n  }\n}\n","resultLanguage":"json"},{"title":"Delete","example":"mutation {\n  deleteTopic(input: { id: 1 }) {\n    deletedTopicNodeId\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"deleteTopic\": {\n    \"deletedTopicNodeId\": \"WyJ0b3BpY3MiLDFd\"\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"9f525338-c706-502c-8579-283ead2583e1","title":"Custom queries","examples":[{"title":"Single scalar","example":"{\n  randomNumber\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.random_number() returns int\n#  language sql stable\n#  as $$\n#    select 4; -- Chosen by fair dice roll. Guaranteed to be random. XKCD#221\n#  $$;\n#\n","exampleLanguage":"graphql","result":"{ \"randomNumber\": 4 }\n","resultLanguage":"json"},{"title":"Single row","example":"{\n  currentUser {\n    nodeId\n    id\n    username\n  }\n}\n\n# Added to the GraphQL schema via\n# this SQL:\n#\n#   create function current_user()\n#   returns app_public.users\n#   language sql stable\n#   as $$\n#     select users.*\n#     from app_public.users\n#     where id = current_user_id();\n#   $$;\n","exampleLanguage":"graphql","result":"{\n  \"currentUser\": {\n    \"nodeId\": \"WyJ1c2VycyIsMV0=\",\n    \"id\": 1,\n    \"username\": \"user\"\n  }\n}\n","resultLanguage":"json"},{"title":"Rows connection","example":"{\n  forumsAboutCats {\n    nodes {\n      nodeId\n      id\n      name\n      slug\n    }\n  }\n}\n\n# Created from SQL like:\n#\n#  create function app_public.forums_about_cats()\n#  returns setof app_public.forums\n#  language sql stable\n#  as $$\n#    select *\n#    from app_public.forums\n#    where slug like 'cat-%';\n#  $$;\n","exampleLanguage":"graphql","result":"{\n  \"forumsAboutCats\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDNd\",\n        \"id\": 3,\n        \"name\": \"Cat Life\",\n        \"slug\": \"cat-life\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDRd\",\n        \"id\": 4,\n        \"name\": \"Cat Help\",\n        \"slug\": \"cat-help\"\n      }\n    ]\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"930fee5d-1349-51dd-b08e-4860ade62c30","title":"Custom mutations","examples":[{"title":"Forgot password","example":"mutation {\n  forgotPassword(\n    input: {\n      email: \"benjie@example.com\"\n    }\n  ) {\n    success\n  }\n}\n\n# Generated with SQL like this:\n#\n#  create function forgot_password(email text)\n#  returns boolean\n#  language plpgsql volatile\n#  as $$\n#    ...\n#  $$;\n#\n#  -- Optionally rename the result field:\n#  comment on function\n#    forgot_password(email text)\n#    is '@resultFieldName success';\n","exampleLanguage":"graphql","result":"{\n  \"forgotPassword\": {\n    \"success\": true\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"94982c6f-daf0-57dd-b38b-8002654b07bc","title":"Computed columns","examples":[{"title":"Topic summary","example":"{\n  topic(id: 2) {\n    body\n    bodySummary\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n","exampleLanguage":"graphql","result":"{\n  \"topic\": {\n    \"body\": \"PostGraphile is a powerful, idomatic, and elegant tool.\",\n    \"bodySummary\": \"PostGraphile is a powerful,...\"\n  }\n}\n","resultLanguage":"json"},{"title":"Topic summary with arg","example":"{\n  topic(id: 2) {\n    body\n    bodySummary(maxLength: 20)\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n","exampleLanguage":"graphql","result":"{\n  \"topic\": {\n    \"body\": \"PostGraphile is a powerful, idomatic, and elegant tool.\",\n    \"bodySummary\": \"PostGraphile is a...\"\n  }\n}\n","resultLanguage":"json"}]}}]}},"pageContext":{"slug":"/postgraphile/postgresql-schema-design/","layout":"page"}}}