{"componentChunkName":"component---src-templates-page-js","path":"/postgraphile/usage-library/","result":{"data":{"remark":{"html":"<p>Library mode is the most popular way of running PostGraphile; it gives more\npower than using the CLI (see <a href=\"/postgraphile/usage-cli/\">CLI usage</a>), but is\nmuch easier to setup and more fully featured than\n<a href=\"/postgraphile/usage-schema/\">Schema-only Usage</a>.</p>\n<p>Details of\n<a href=\"#api-postgraphilepgconfig-schemaname-options\">the configuration options can be found below</a>.</p>\n<p>PostGraphile supports usage in library mode within various Node server\nframeworks. There are two ways of using the PostGraphile library mode inside a\nserver framework: very concisely as middleware, or via the more verbose\nindividual route handlers introduced in PostGraphile v4.10.0. The below table\nsummarises the support of these modes by each of the frameworks we support, and\nthe following documentation sections detail how to use them.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Framework</th>\n<th align=\"center\">    <a href=\"#http-middleware\">Middleware</a>  </th>\n<th align=\"center\">  <a href=\"#route-handlers\">Route handlers</a>    </th>\n<th align=\"left\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"https://nodejs.org/api/http.html\">Node HTTP</a></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">-</td>\n<td align=\"left\"><a href=\"https://github.com/graphile/postgraphile/blob/v4/examples/servers/node/index.ts\">simple</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"http://koajs.com\">Koa</a></td>\n<td align=\"center\">>=v4.10.0</td>\n<td align=\"center\">Yes</td>\n<td align=\"left\"><a href=\"https://github.com/graphile/postgraphile/blob/v4/examples/servers/koa/vanilla.ts\">vanilla</a> | <a href=\"https://github.com/graphile/postgraphile/blob/v4/examples/servers/koa/rum-and-raisin.ts\">flavourful</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.npmjs.com/package/express\">Express</a></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"left\"><a href=\"https://github.com/graphile/postgraphile/blob/v4/examples/servers/express/vanilla.ts\">vanilla</a> | <a href=\"https://github.com/graphile/postgraphile/blob/v4/examples/servers/express/rum-and-raisin.ts\">flavourful</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"http://npmjs.com/connect\">Connect</a></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"left\">Similar to Express</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.fastify.io/\">Fastify</a> v2</td>\n<td align=\"center\">>=v4.10.0</td>\n<td align=\"center\">Yes</td>\n<td align=\"left\">Similar to Express</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.fastify.io/\">Fastify</a> v3</td>\n<td align=\"center\">-</td>\n<td align=\"center\">Yes</td>\n<td align=\"left\"><a href=\"https://github.com/graphile/postgraphile/blob/v4/examples/servers/fastify3/vanilla.ts\">vanilla</a> | <a href=\"https://github.com/graphile/postgraphile/blob/v4/examples/servers/fastify3/rum-and-raisin.ts\">flavourful</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"http://restify.com/\">Restify</a></td>\n<td align=\"center\">-</td>\n<td align=\"center\">Yes</td>\n<td align=\"left\"><a href=\"https://github.com/graphile/postgraphile/blob/v4/examples/servers/restify/vanilla.ts\">vanilla</a> | <a href=\"https://github.com/graphile/postgraphile/blob/v4/examples/servers/restify/rum-and-raisin.ts\">flavourful</a></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"http-middleware\"><a href=\"#http-middleware\" aria-label=\"http middleware permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP Middleware</h3>\n<p>To mount a PostGraphile instance on your own web server there is an export\n<code class=\"language-text\">postgraphile</code> from the <code class=\"language-text\">postgraphile</code> package that can be used as HTTP\nmiddleware for Node's HTTP server, Express, Connect, Koa and Fastify v2 (but not\nFastify v3). Usage is generally of the form <code class=\"language-text\">app.use(postgraphile(...))</code>.</p>\n<p>Additional frameworks such as <a href=\"http://restify.com/\">Restify</a> and\n<a href=\"https://www.fastify.io/\">Fastify</a> are also supported since PostGraphile v4.10.0\nvia the <a href=\"#route-handlers\">route handlers</a> method detailed below.</p>\n<p>To use PostGraphile with <code class=\"language-text\">express</code>, for instance, a small example would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> postgraphile <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postgraphile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">postgraphile</span><span class=\"token punctuation\">(</span>\n    process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"postgres://user:pass@host:5432/dbname\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"public\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">watchPg</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">graphiql</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">enhanceGraphiql</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Or to use it with the built-in <code class=\"language-text\">http</code> module:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> postgraphile <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postgraphile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhttp\n  <span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">postgraphile</span><span class=\"token punctuation\">(</span>\n      process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"postgres://user:pass@host:5432/dbname\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"public\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">watchPg</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">graphiql</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">enhanceGraphiql</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"route-handlers\"><a href=\"#route-handlers\" aria-label=\"route handlers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Route Handlers</h3>\n<p><em>Introduced in PostGraphile v4.10.0.</em></p>\n<p>If your server does not support the preferred middleware approach of mounting\nthe PostGraphile library, then you can mount PostGraphile's route handlers\nindividually. This looks slightly different depending on which server you're\nusing (see the table above for links to examples for each server), but broadly\nit follows the following pattern (this example uses Fastify v3).</p>\n<p>First we create the PostGraphile middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> postgraphile <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"postgraphile\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">postgraphile</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"public\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... options here ... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And your server:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Fastify <span class=\"token keyword\">from</span> <span class=\"token string\">\"fastify\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">Fastify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next we need an adaptor to convert a generic PostGraphile route handler into a\nhandler that's suitable for your given server framework. We provide the\nfollowing out of the box:</p>\n<ul>\n<li><code class=\"language-text\">PostGraphileResponseNode</code> - for Node, Express, Connect, Nest, Restify, and\nFastify v2 (NOT v3)</li>\n<li><code class=\"language-text\">PostGraphileResponseKoa</code> - for Koa</li>\n<li><code class=\"language-text\">PostGraphileResponseFastify3</code> - for Fastify v3</li>\n</ul>\n<p>You can also make your own by sub-classing <code class=\"language-text\">PostGraphileResponse</code>, for help with\nthis ping @Benjie <a href=\"https://discord.gg/YM5Q2SR\">on Discord</a>.</p>\n<p>Note that some frameworks expect you to indicate failure by rejecting a promise,\nothers expect you to pass an error object to the <code class=\"language-text\">next(err)</code> callback.\nPostGraphile's handler rejects on error, so if your framework (e.g. Express)\nrequires <code class=\"language-text\">next(err)</code> you should add <code class=\"language-text\">.catch(next)</code> to the handler call.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PostGraphileResponseFastify3 <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"postgraphile\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Converts a PostGraphile handler to a Fastify v3 handler</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">convertHandler</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">handler</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> reply</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PostGraphileResponseFastify3</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* Other frameworks:\n\n// Converts a PostGraphile handler to an Express handler\nconst convertHandler = handler => (req, res, next) =>\n  handler(new PostGraphileResponseNode(req, res, next)).catch(next);\n\n// Converts a PostGraphile handler to a Koa handler\nconst convertHandler = handler => (ctx, next) =>\n  handler(new PostGraphileResponseKoa(ctx, next));\n*/</span></code></pre></div>\n<p>Then we use the properties present on the PostGraphile middleware to mount our\nroute handlers. The properties available include:</p>\n<ul>\n<li><code class=\"language-text\">options</code> - the PostGraphile options your server is using</li>\n<li>\n<p>route strings:</p>\n<ul>\n<li><code class=\"language-text\">graphqlRoute</code> (e.g. <code class=\"language-text\">/graphql</code>) - the URL path the GraphQL endpoint should\nbe mounted at</li>\n<li><code class=\"language-text\">graphiqlRoute</code> (e.g. <code class=\"language-text\">/graphiql</code>) - the URL path the GraphiQL (GraphQL IDE)\nendpoint should be mounted at</li>\n<li><code class=\"language-text\">eventStreamRoute</code> (e.g. <code class=\"language-text\">/graphql/stream</code>) - the URL path the EventStream\nfor PostGraphile watch mode should be mounted at (relates to the\nX-GraphQL-Event-Stream header)</li>\n</ul>\n</li>\n<li>\n<p>request handlers</p>\n<ul>\n<li><code class=\"language-text\">graphqlRouteHandler</code> - handles GraphQL POST and OPTIONS requests</li>\n<li><code class=\"language-text\">graphiqlRouteHandler</code> - handles GET requests to retrieve the GraphiQL\ninterface</li>\n<li><code class=\"language-text\">faviconRouteHandler</code> - serves the PostGraphile favicon</li>\n<li><code class=\"language-text\">eventStreamRouteHandler</code> - serves the PostGraphile watch-mode event stream</li>\n</ul>\n</li>\n</ul>\n<p>For Fastify, this might look something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// OPTIONS requests, for CORS/etc</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">options</span><span class=\"token punctuation\">(</span>\n  middleware<span class=\"token punctuation\">.</span>graphqlRoute<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">convertHandler</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>graphqlRouteHandler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This is the main middleware</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>\n  middleware<span class=\"token punctuation\">.</span>graphqlRoute<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">convertHandler</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>graphqlRouteHandler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// GraphiQL, if you need it</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>graphiql<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>graphiqlRouteHandler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">head</span><span class=\"token punctuation\">(</span>\n      middleware<span class=\"token punctuation\">.</span>graphiqlRoute<span class=\"token punctuation\">,</span>\n      <span class=\"token function\">convertHandler</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>graphiqlRouteHandler<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n      middleware<span class=\"token punctuation\">.</span>graphiqlRoute<span class=\"token punctuation\">,</span>\n      <span class=\"token function\">convertHandler</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>graphiqlRouteHandler<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Remove this if you don't want the PostGraphile logo as your favicon!</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>faviconRouteHandler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/favicon.ico\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">convertHandler</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>faviconRouteHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// If you need watch mode, this is the route served by the</span>\n<span class=\"token comment\">// X-GraphQL-Event-Stream header; see:</span>\n<span class=\"token comment\">// https://github.com/graphql/graphql-over-http/issues/48</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>watchPg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>eventStreamRouteHandler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">options</span><span class=\"token punctuation\">(</span>\n      middleware<span class=\"token punctuation\">.</span>eventStreamRoute<span class=\"token punctuation\">,</span>\n      <span class=\"token function\">convertHandler</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>eventStreamRouteHandler<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n      middleware<span class=\"token punctuation\">.</span>eventStreamRoute<span class=\"token punctuation\">,</span>\n      <span class=\"token function\">convertHandler</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>eventStreamRouteHandler<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For Nest, this might look something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get<span class=\"token punctuation\">,</span> Post<span class=\"token punctuation\">,</span> Req<span class=\"token punctuation\">,</span> Next<span class=\"token punctuation\">,</span> Res <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Request<span class=\"token punctuation\">,</span> Response <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PostGraphileResponseNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'postgraphile'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> middleware <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./postgraphile.middleware'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostGraphileController</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>graphiqlRoute<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">graphiql</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">@<span class=\"token function\">Req</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> request<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span> @<span class=\"token function\">Res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> response<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">,</span> @<span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    middleware<span class=\"token punctuation\">.</span><span class=\"token function\">graphiqlRouteHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PostGraphileResponseNode</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  @<span class=\"token function\">Post</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>graphqlRoute<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">graphql</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">@<span class=\"token function\">Req</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> request<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span> @<span class=\"token function\">Res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> response<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">,</span> @<span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    middleware<span class=\"token punctuation\">.</span><span class=\"token function\">graphqlRouteHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PostGraphileResponseNode</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>IMPORTANT</strong>: although it's tempting to add your handlers with explicitly\nwritten paths, e.g. <code class=\"language-text\">app.post('/graphql', ...)</code>, it's better to use the relevant\nmiddleware properties such as <code class=\"language-text\">middleware.graphqlRoute</code> to ensure that\nPostGraphile is expecting the GraphQL endpoint to be in the same place that\nyou're expecting.</p>\n<p><strong>IMPORTANT</strong>: it's advised that you also look through the full-flavoured\n\"rum-and-raisin\" example server for your framework; depending on what other\nmiddleware/plugins you're using (e.g. compression) you may need to add some tiny\nworkarounds for common issues (most notably relating to the Event Stream from\nwatch mode).</p>\n<h3 id=\"recommended-options\"><a href=\"#recommended-options\" aria-label=\"recommended options permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended options</h3>\n<p>As PostGraphile evolves, we add more features; however we can't always enable\nthese features by default as they may be breaking changes. There are also\noptions that may have security repurcussions. For this reason, many features are\nbehind flags. We understand this page is very long, so we've included some\ndefault option sets you might like to use:</p>\n<p>We recommend you install the <code class=\"language-text\">@graphile-contrib/pg-simplify-inflector</code> plugin.</p>\n<h4 id=\"for-development\"><a href=\"#for-development\" aria-label=\"for development permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For Development</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> postgraphileOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">subscriptions</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">watchPg</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dynamicJson</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">setofFunctionsContainNulls</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">ignoreRBAC</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">showErrorStack</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">extendedErrors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hint\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"detail\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"errcode\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">appendPlugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@graphile-contrib/pg-simplify-inflector\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">exportGqlSchemaPath</span><span class=\"token operator\">:</span> <span class=\"token string\">\"schema.graphql\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">graphiql</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">enhanceGraphiql</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">allowExplain</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO: customise condition!</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">enableQueryBatching</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">legacyRelations</span><span class=\"token operator\">:</span> <span class=\"token string\">\"omit\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">pgSettings</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* TODO */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"for-production\"><a href=\"#for-production\" aria-label=\"for production permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For Production</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> postgraphileOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">subscriptions</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">retryOnInitFail</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dynamicJson</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">setofFunctionsContainNulls</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">ignoreRBAC</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">extendedErrors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"errcode\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">appendPlugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@graphile-contrib/pg-simplify-inflector\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">graphiql</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">enableQueryBatching</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">disableQueryLog</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// our default logging has performance issues, but do make sure you have a logging system in place!</span>\n  <span class=\"token literal-property property\">legacyRelations</span><span class=\"token operator\">:</span> <span class=\"token string\">\"omit\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">pgSettings</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* TODO */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"api-postgraphilepgconfig-schemaname-options\"><a href=\"#api-postgraphilepgconfig-schemaname-options\" aria-label=\"api postgraphilepgconfig schemaname options permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API: <code class=\"language-text\">postgraphile(pgConfig, schemaName, options)</code></h3>\n<p>The <code class=\"language-text\">postgraphile</code> middleware factory function takes three arguments, all of\nwhich are optional. The below options are valid for\n<tt>postgraphile@<!-- LIBRARY_VERSION_BEGIN -->4.12.3<!-- LIBRARY_VERSION_END --></tt>.</p>\n<ul>\n<li><strong><code class=\"language-text\">pgConfig</code></strong>: Specifies the PostgreSQL database you wish to connect to.\nYou may pass a PostgreSQL connection string, a configuration object to pass\nto the <a href=\"https://node-postgres.com/api/pool\"><code class=\"language-text\">pg.Pool</code></a> constructor, or a <a href=\"https://node-postgres.com/api/pool\"><code class=\"language-text\">pg.Pool</code></a> instance. Note: <code class=\"language-text\">pg.Pool</code>\nhas a default pool size of 10, to increase this you use the configuration\nobject/pg.Pool instance approach and pass a different value as <code class=\"language-text\">max</code>.</li>\n<li><strong><code class=\"language-text\">schemaName</code></strong>: A string, or array of strings, which specifies the\nPostgreSQL schema(s) you to expose via PostGraphile; defaults to 'public'</li>\n<li>\n<p><strong><code class=\"language-text\">options</code></strong>: An object containing other miscellaneous options. Options\ninclude: <!-- prettier-ignore-start --><!-- LIBRARY_DOCBLOCK_BEGIN --></p>\n<ul>\n<li><code class=\"language-text\">watchPg</code>: When true, PostGraphile will update the GraphQL API whenever your\ndatabase schema changes. This feature requires some changes to your database\nin the form of the\n<a href=\"https://github.com/graphile/graphile-engine/blob/master/packages/graphile-build-pg/res/watch-fixtures.sql\"><code class=\"language-text\">postgraphile_watch</code></a>\nschema; PostGraphile will try to add this itself but requires DB superuser\nprivileges to do so. If PostGraphile can't install it, you can do so\nmanually. PostGraphile will not drop the schema when it exits, to remove it\nyou can execute: <code class=\"language-text\">DROP SCHEMA postgraphile_watch CASCADE;</code></li>\n<li><code class=\"language-text\">retryOnInitFail</code>: When false (default), PostGraphile will exit if it fails\nto build the initial schema (for example if it cannot connect to the\ndatabase, or if there are fatal naming conflicts in the schema). When true,\nPostGraphile will keep trying to rebuild the schema indefinitely, using an\nexponential backoff between attempts, starting at 100ms and increasing up to\n30s delay between retries. When a function, the function will be called\npassing the error and the number of attempts, and it should return true to\nretry, false to permanently abort trying.</li>\n<li><code class=\"language-text\">ownerConnectionString</code>: Connection string to use to connect to the database\nas a privileged user (e.g. for setting up watch fixtures, logical decoding,\netc).</li>\n<li><code class=\"language-text\">subscriptions</code>: Enable GraphQL websocket transport support for\nsubscriptions (you still need a subscriptions plugin currently)</li>\n<li><code class=\"language-text\">live</code>: [EXPERIMENTAL] Enables live-query support via GraphQL subscriptions\n(sends updated payload any time nested collections/records change)</li>\n<li><code class=\"language-text\">websockets</code>: Choose which websocket transport libraries to use. Use commas\nto define multiple. Defaults to <code class=\"language-text\">['v0', 'v1']</code> if <code class=\"language-text\">subscriptions</code> or <code class=\"language-text\">live</code>\nare true, <code class=\"language-text\">[]</code> otherwise</li>\n<li><code class=\"language-text\">websocketOperations</code>: Toggle which GraphQL websocket transport operations\nare supported: 'subscriptions' or 'all'. Defaults to <code class=\"language-text\">subscriptions</code></li>\n<li><code class=\"language-text\">websocketMiddlewares</code>: [EXPERIMENTAL] If you're using websockets\n(subscriptions || live) then you may want to authenticate your users using\nsessions or similar. You can pass some simple middlewares here that will be\nexecuted against the websocket connection in order to perform\nauthentication. We current only support Express (not Koa, Fastify, Restify,\netc) middlewares here.</li>\n<li><code class=\"language-text\">pgDefaultRole</code>: The default Postgres role to use. If no role was provided\nin a provided JWT token, this role will be used.</li>\n<li><code class=\"language-text\">dynamicJson</code>: By default, JSON and JSONB fields are presented as strings\n(JSON encoded) from the GraphQL schema. Setting this to <code class=\"language-text\">true</code> (recommended)\nenables raw JSON input and output, saving the need to parse / stringify JSON\nmanually.</li>\n<li><code class=\"language-text\">setofFunctionsContainNulls</code>: If none of your <code class=\"language-text\">RETURNS SETOF compound_type</code>\nfunctions mix NULLs with the results then you may set this false to reduce\nthe nullables in the GraphQL schema.</li>\n<li><code class=\"language-text\">classicIds</code>: Enables classic ids for Relay support. Instead of using the\nfield name <code class=\"language-text\">nodeId</code> for globally unique ids, PostGraphile will instead use\nthe field name <code class=\"language-text\">id</code> for its globally unique ids. This means that table <code class=\"language-text\">id</code>\ncolumns will also get renamed to <code class=\"language-text\">rowId</code>.</li>\n<li><code class=\"language-text\">disableDefaultMutations</code>: Setting this to <code class=\"language-text\">true</code> will prevent the creation\nof the default mutation types &#x26; fields. Database mutation will only be\npossible through Postgres functions.</li>\n<li><code class=\"language-text\">ignoreRBAC</code>: Set false (recommended) to exclude fields, queries and\nmutations that are not available to any possible user (determined from the\nuser in connection string and any role they can become); set this option\ntrue to skip these checks and create GraphQL fields and types for\neverything. The default is <code class=\"language-text\">true</code>, in v5 the default will change to <code class=\"language-text\">false</code>.</li>\n<li><code class=\"language-text\">ignoreIndexes</code>: Set false to exclude filters, orderBy, and\nrelations that would be expensive to access due to missing indexes. Changing\nthis from true to false is a breaking change, but false to true is not. The\ndefault is <code class=\"language-text\">true</code>.</li>\n<li><code class=\"language-text\">includeExtensionResources</code>: By default, tables and functions that come from\nextensions are excluded from the generated GraphQL schema as general\napplications don't need them to be exposed to the end user. You can use this\nflag to include them in the generated schema (not recommended).</li>\n<li><code class=\"language-text\">showErrorStack</code>: Enables adding a <code class=\"language-text\">stack</code> field to the error response. Can\nbe either the boolean <code class=\"language-text\">true</code> (which results in a single stack string) or the\nstring <code class=\"language-text\">json</code> (which causes the stack to become an array with elements for\neach line of the stack). Recommended in development, not recommended in\nproduction.</li>\n<li><code class=\"language-text\">extendedErrors</code>: Extends the error response with additional details from\nthe Postgres error. Can be any combination of\n<code class=\"language-text\">['hint', 'detail', 'errcode']</code>. Default is <code class=\"language-text\">[]</code>.</li>\n<li><code class=\"language-text\">handleErrors</code>: Enables ability to modify errors before sending them down to\nthe client. Optionally can send down custom responses. If you use this then\n<code class=\"language-text\">showErrorStack</code> and <code class=\"language-text\">extendedError</code> may have no effect.</li>\n<li><code class=\"language-text\">appendPlugins</code>: An array of <a href=\"/graphile-build/plugins/\">Graphile Engine</a>\nschema plugins to load after the default plugins.</li>\n<li><code class=\"language-text\">prependPlugins</code>: An array of <a href=\"/graphile-build/plugins/\">Graphile Engine</a>\nschema plugins to load before the default plugins (you probably don't want\nthis).</li>\n<li><code class=\"language-text\">replaceAllPlugins</code>: The full array of\n<a href=\"/graphile-build/plugins/\">Graphile Engine</a> schema plugins to use for schema\ngeneration (you almost definitely don't want this!).</li>\n<li><code class=\"language-text\">skipPlugins</code>: An array of <a href=\"/graphile-build/plugins/\">Graphile Engine</a>\nschema plugins to skip.</li>\n<li><code class=\"language-text\">readCache</code>: A file path string or an object. Reads cached values to improve\nstartup time (you may want to do this in production).</li>\n<li><code class=\"language-text\">writeCache</code>: A file path string. Writes computed values to local cache file\nso startup can be faster (do this during the build phase).</li>\n<li><code class=\"language-text\">exportJsonSchemaPath</code>: Enables saving the detected schema, in JSON format,\nto the given location. The directories must exist already, if the file\nexists it will be overwritten.</li>\n<li><code class=\"language-text\">exportGqlSchemaPath</code>: Enables saving the detected schema, in GraphQL schema\nformat, to the given location. The directories must exist already, if the\nfile exists it will be overwritten.</li>\n<li><code class=\"language-text\">sortExport</code>: If true, lexicographically (alphabetically) sort exported\nschema for more stable diffing.</li>\n<li><code class=\"language-text\">graphqlRoute</code>: The endpoint the GraphQL executer will listen on. Defaults\nto <code class=\"language-text\">/graphql</code>.</li>\n<li><code class=\"language-text\">eventStreamRoute</code>: The endpoint the watch-mode EventStream will be mounted\non (only appropriate when watchPg is specified). Defaults to\n<code class=\"language-text\">${graphqlRoute}/stream</code>.</li>\n<li><code class=\"language-text\">externalGraphqlRoute</code>: The URL to the GraphQL endpoint for embedding into\nthe GraphiQL client. We attempt to infer this (for many servers it is the\nsame as <code class=\"language-text\">graphqlRoute</code>), but you may need to specify it manually if you\nmount PostGraphile behind a URL-rewriting proxy, or mount PostGraphile on a\nsubpath in certain Node.js servers.</li>\n<li><code class=\"language-text\">externalEventStreamRoute</code>: As with <code class=\"language-text\">externalGraphqlRoute</code>, but for\n<code class=\"language-text\">eventStreamRoute</code> rather than <code class=\"language-text\">graphqlRoute</code>. This is also used for the\n<code class=\"language-text\">X-GraphQL-Event-Stream</code> header.</li>\n<li><code class=\"language-text\">graphiqlRoute</code>: The endpoint the GraphiQL query interface will listen on\n(<strong>NOTE:</strong> GraphiQL will not be enabled unless the <code class=\"language-text\">graphiql</code> option is set\nto <code class=\"language-text\">true</code>). Defaults to <code class=\"language-text\">/graphiql</code>.</li>\n<li><code class=\"language-text\">externalUrlBase</code>: DEPRECATED - use <code class=\"language-text\">externalGraphqlRoute</code> and\n<code class=\"language-text\">externalEventStreamRoute</code> instead. If you are using watch mode, or have\nenabled GraphiQL, and you either mount PostGraphile under a path, or use\nPostGraphile behind some kind of proxy that puts PostGraphile under a\nsubpath (or both!) then you must specify this setting so that PostGraphile\ncan figure out it's external URL. (e.g. if you do\n<code class=\"language-text\">app.use('/path/to', postgraphile(...))</code>), which is not officially\nsupported, then you should pass <code class=\"language-text\">externalUrlBase: '/path/to'</code>.) This setting\nshould never end in a slash (<code class=\"language-text\">/</code>). To specify that the external URL is the\nexpected one, either omit this setting or set it to the empty string <code class=\"language-text\">''</code>.</li>\n<li><code class=\"language-text\">graphiql</code>: Set this to <code class=\"language-text\">true</code> to enable the GraphiQL interface.</li>\n<li><code class=\"language-text\">graphiqlCredentials</code>: Set this to change the way GraphiQL handles\ncredentials. By default this is set to <code class=\"language-text\">same-origin</code>.</li>\n<li><code class=\"language-text\">enhanceGraphiql</code>: Set this to <code class=\"language-text\">true</code> to add some enhancements to GraphiQL;\nintended for development usage only (automatically enables with\n<code class=\"language-text\">subscriptions</code> and <code class=\"language-text\">live</code>).</li>\n<li><code class=\"language-text\">enableCors</code>: Enables some generous CORS settings for the GraphQL endpoint.\nThere are some costs associated when enabling this, if at all possible try\nto put your API behind a reverse proxy.</li>\n<li><code class=\"language-text\">bodySizeLimit</code>: Set the maximum size of HTTP request bodies that can be\nparsed (default 100kB). The size can be given as a human-readable string,\nsuch as '200kB' or '5MB' (case insensitive).</li>\n<li><code class=\"language-text\">enableQueryBatching</code>: [Experimental] Enable the middleware to process\nmultiple GraphQL queries in one request.</li>\n<li><code class=\"language-text\">jwtSecret</code>: The secret for your JSON web tokens. This will be used to\nverify tokens in the <code class=\"language-text\">Authorization</code> header, and signing JWT tokens you\nreturn in procedures.</li>\n<li><code class=\"language-text\">jwtPublicKey</code>: The public key to verify the JWT when signed with RS265 or\nES256 algorithms.</li>\n<li><code class=\"language-text\">jwtVerifyOptions</code>: Options with which to perform JWT verification - see\n<a href=\"https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback\">https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback</a>\nIf 'audience' property is unspecified, it will default to ['postgraphile'];\nto prevent audience verification set it explicitly to null.</li>\n<li><code class=\"language-text\">jwtSignOptions</code>: Options with which to perform JWT signing - see\n<a href=\"https://github.com/auth0/node-jsonwebtoken#jwtsignpayload-secretorprivatekey-options-callback\">https://github.com/auth0/node-jsonwebtoken#jwtsignpayload-secretorprivatekey-options-callback</a></li>\n<li><code class=\"language-text\">jwtRole</code>: An array of (strings) path components that make up the path in\nthe jwt from which to extract the postgres role. By default, the role is\nextracted from <code class=\"language-text\">token.role</code>, so the default value is <code class=\"language-text\">['role']</code>. e.g.\n<code class=\"language-text\">{ iat: 123456789, creds: { local: { role: \"my_role\" } } }</code> the path would\nbe <code class=\"language-text\">token.creds.local.role</code> i.e. <code class=\"language-text\">['creds', 'local', 'role']</code></li>\n<li><code class=\"language-text\">jwtPgTypeIdentifier</code>: The Postgres type identifier for the compound type\nwhich will be signed as a JWT token if ever found as the return type of a\nprocedure. Can be of the form: <code class=\"language-text\">my_schema.my_type</code>. You may use quotes as\nneeded: <code class=\"language-text\">\"my-special-schema\".my_type</code>.</li>\n<li><code class=\"language-text\">jwtAudiences</code>: [DEPRECATED] The audience to use when verifing the JWT\ntoken. Deprecated, use <code class=\"language-text\">jwtVerifyOptions.audience</code> instead.</li>\n<li><code class=\"language-text\">legacyRelations</code>: Some one-to-one relations were previously detected as\none-to-many - should we export 'only' the old relation shapes, both new and\nold but mark the old ones as 'deprecated' (default), or 'omit' (recommended)\nthe old relation shapes entirely.</li>\n<li><code class=\"language-text\">legacyJsonUuid</code>: ONLY use this option if you require the v3 typenames\n'Json' and 'Uuid' over 'JSON' and 'UUID'.</li>\n<li><code class=\"language-text\">disableQueryLog</code>: Turns off GraphQL query logging. By default PostGraphile\nwill log every GraphQL query it processes along with some other information.\nSet this to <code class=\"language-text\">true</code> (recommended in production) to disable that feature.</li>\n<li><code class=\"language-text\">pgSettings</code>: A plain object specifying custom config values to set in the\nPostgreSQL transaction (accessed via <code class=\"language-text\">current_setting('my.custom.setting')</code>)\n<strong>or</strong> an (optionally asynchronous) function which will return the same (or\na Promise to the same) based on the incoming web request (e.g. to extract\nsession data).</li>\n<li><code class=\"language-text\">allowExplain</code>: [Experimental] Determines if the 'Explain' feature in\nGraphiQL can be used to show the user the SQL statements that were executed.\nSet to a boolean to enable all users to use this, or to a function that\nfilters each request to determine if the request may use Explain. DO NOT USE\nIN PRODUCTION unless you're comfortable with the security repurcussions of\ndoing so.</li>\n<li><code class=\"language-text\">additionalGraphQLContextFromRequest</code>: Some Graphile Engine schema plugins\nmay need additional information available on the <code class=\"language-text\">context</code> argument to the\nresolver - you can use this function to provide such information based on\nthe incoming request - you can even use this to change the response\n[experimental], e.g. setting cookies.</li>\n<li><code class=\"language-text\">pluginHook</code>: [experimental] Plugin hook function, enables functionality\nwithin PostGraphile to be expanded with plugins. Generate with\n<code class=\"language-text\">makePluginHook(plugins)</code> passing a list of plugin objects.</li>\n<li><code class=\"language-text\">simpleCollections</code>: Should we use relay pagination, or simple collections?\n\"omit\" (default) - relay connections only, \"only\" (not recommended) - simple\ncollections only (no Relay connections), \"both\" - both.</li>\n<li><code class=\"language-text\">queryCacheMaxSize</code>: Max query cache size in bytes (extremely approximate,\nnot accurate at all). Default <code class=\"language-text\">50000000</code> (~50MB). Set to 0 to disable.</li>\n</ul>\n</li>\n</ul>\n<!-- LIBRARY_DOCBLOCK_END -->\n<!-- prettier-ignore-end -->\n<p>The following options are not part of PostGraphile core, but are available from\nthe <code class=\"language-text\">@graphile/pg-pubsub</code> <a href=\"/postgraphile/subscriptions/\">subscriptions plugin</a>\n(formerly the paid \"supporter\" plugin, but now fully free and open source -\nplease consider <a href=\"/sponsor/\">sponsoring us</a>!):</p>\n<ul>\n<li><code class=\"language-text\">simpleSubscriptions</code>: set this to <code class=\"language-text\">true</code> to add simple subscription support</li>\n<li><code class=\"language-text\">subscriptionAuthorizationFunction [fn]</code> set this to the name (excluding\narguments/parentheses) of a PG function to call to check user is allowed to\nsubscribe</li>\n</ul>\n<p>The following options are not part of PostGraphile core, but are available from\nthe Pro plugin - see <a href=\"/postgraphile/pricing/\">Go Pro!</a> for more information.</p>\n<ul>\n<li>\n<p><strong><code class=\"language-text\">options</code></strong>:</p>\n<ul>\n<li><code class=\"language-text\">readOnlyConnection</code> [PRO] [SPON] ⚡️[experimental] set this to a\nPostgreSQL connection string to use for read-only queries (i.e. not\nmutations)</li>\n<li><code class=\"language-text\">defaultPaginationCap</code> [PRO] [SPON] ⚡️[experimental] integer, ensure\nall connections have first/last specified and are no large than this value\n(default: 50), set to -1 to disable; override via smart comment\n<code class=\"language-text\">@paginationCap 50</code></li>\n<li><code class=\"language-text\">graphqlDepthLimit</code> [PRO] [SPON] ⚡️[experimental] integer, validate\nGraphQL queries are no deeper than the specified int (default: 16), set to\n-1 to disable</li>\n<li><code class=\"language-text\">graphqlCostLimit</code> [PRO] [SPON] ⚡️[experimental] integer, only allows\nqueries with a computed cost below the specified int (default: 1000), set to\n-1 to disable</li>\n<li><code class=\"language-text\">exposeGraphQLCost</code> [PRO] [SPON] boolean, if true (default) then the\ncalculated query cost will be exposed on the resulting payload</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"exposing-http-request-data-to-postgresql\"><a href=\"#exposing-http-request-data-to-postgresql\" aria-label=\"exposing http request data to postgresql permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exposing HTTP request data to PostgreSQL</h3>\n<h4 id=\"pgsettings-function\"><a href=\"#pgsettings-function\" aria-label=\"pgsettings function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">pgSettings</code> function</h4>\n<p>Using the <code class=\"language-text\">pgSettings</code> functionality mentioned above you can extend the data\nmade available through <code class=\"language-text\">current_setting(...)</code> within PostgreSQL. Instead of\npassing an object you can pass an (optionally asynchronous) function which will\nbe executed for each request, and the results merged in with the other settings\nPostGraphile automatically adds to the request.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token function\">postgraphile</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> schemaName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">pgSettings</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">req</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'user.id'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>passport<span class=\"token punctuation\">.</span>user<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'http.headers.x-something'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'x-something'</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'http.method'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>method<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'http.url'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> get_x_something<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token keyword\">text</span> <span class=\"token keyword\">as</span> $$\n  <span class=\"token keyword\">select</span> current_setting<span class=\"token punctuation\">(</span><span class=\"token string\">'http.headers.x-something'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>::<span class=\"token keyword\">text</span><span class=\"token punctuation\">;</span>\n$$ <span class=\"token keyword\">language</span> <span class=\"token keyword\">sql</span> stable<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Everything returned by <code class=\"language-text\">pgSettings</code> is applied to the current session with\n<code class=\"language-text\">set_config($key, $value, true)</code>; note that <code class=\"language-text\">set_config</code> only supports string\nvalues so it is best to only feed <code class=\"language-text\">pgSettings</code> string values (we'll convert\nother values using the <code class=\"language-text\">String</code> constructor function, which may not have the\neffect you intend.</p>\n<p>You can use <code class=\"language-text\">pgSettings</code> to define variables that your Postgres\nfunctions/policies depend on, or to tweak internal Postgres settings. When\nadding variables for your own usage, the keys <strong>must</strong> contain either one or two\nperiod (<code class=\"language-text\">.</code>) characters, and the prefix (the bit before the first period) must\nnot be used by any Postgres extension. Variables without periods will be\ninterpreted as internal Postgres settings, such as <code class=\"language-text\">role</code>, and will be applied\nby Postgres. All settings are automatically reset when the transaction\ncompletes. Here's an example of switching the user into the Postgres 'visitor'\nrole, and applying the application setting <code class=\"language-text\">jwt.claims.user_id</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token function\">postgraphile</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> schemaName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">pgSettings</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">req</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'role'</span><span class=\"token operator\">:</span> <span class=\"token string\">'visitor'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'jwt.claims.user_id'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> get_current_user<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">TEXT</span> <span class=\"token keyword\">AS</span> $$\n  <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">current_user</span><span class=\"token punctuation\">;</span>\n$$ <span class=\"token keyword\">LANGUAGE</span> <span class=\"token keyword\">SQL</span> STABLE<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">getCurrentUser</span> <span class=\"token comment\"># returns visitor</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- TODO: verify the above works. -->\n<!-- TODO: move this to its own article? -->\n<h3 id=\"making-http-data-available-to-resolvers\"><a href=\"#making-http-data-available-to-resolvers\" aria-label=\"making http data available to resolvers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Making HTTP data available to resolvers</h3>\n<h4 id=\"additionalgraphqlcontextfromrequest-function\"><a href=\"#additionalgraphqlcontextfromrequest-function\" aria-label=\"additionalgraphqlcontextfromrequest function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">additionalGraphQLContextFromRequest</code> function</h4>\n<p><code class=\"language-text\">additionalGraphQLContextFromRequest</code> is an optionally asynchronous function\npassed the <code class=\"language-text\">req</code> and <code class=\"language-text\">res</code> request and response objects from your HTTP library.\nThe result returned from the function is merged into the GraphQL <code class=\"language-text\">context</code>\nobject which is passed as the third argument to every GraphQL resolver.</p>\n<p>If you're using Koa then you can get back to the Koa context using\n<code class=\"language-text\">const ctx = req._koaCtx</code>.</p>\n<p>Be careful to not clash with internal context keys such as <code class=\"language-text\">pgClient</code> and\n<code class=\"language-text\">jwtClaims</code>. For the absolute best future compatibility, we recommend that you\nprefix your context keys with your initials or similar.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> postgraphileOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... other options here ...</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">additionalGraphQLContextFromRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// You can perform asynchronous actions here if you need to; for example</span>\n    <span class=\"token comment\">// looking up the current user in the database.</span>\n\n    <span class=\"token comment\">// Return here things that your resolvers need</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Return the current user from Passport.js or similar</span>\n      <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// Add a helper to get a header</span>\n      <span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// Give access to the database-owner PostgreSQL pool, for example to</span>\n      <span class=\"token comment\">// perform privileged actions</span>\n      rootPgPool<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It's <em>not</em> a good idea to return direct access to the <code class=\"language-text\">req</code> or <code class=\"language-text\">res</code> objects\nfrom <code class=\"language-text\">additionalGraphQLContextFromRequest(req, res)</code> as it binds the context too\ntightly to the request lifecycle, and that's not compatible with local usage of\nthe schema, or with usage over other transports such as websockets for realtime.\nInstead, add helpers to get/set the data you need.</p>\n<h3 id=\"mounting-postgraphile-middleware-under-a-subpath\"><a href=\"#mounting-postgraphile-middleware-under-a-subpath\" aria-label=\"mounting postgraphile middleware under a subpath permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mounting PostGraphile middleware under a subpath</h3>\n<p>This isn't officially supported; however it should work in most cases. If you're\nmounting under a subpath in express then <code class=\"language-text\">app.use(\"/path/to\", postgraphile())</code>\nshould work automatically without requiring any options. If you're using an\nexternal proxy then you must supply the base URL so that PostGraphile knows\nwhere to tell the browser the assets are located. This is all so that\nPostGraphile can reference different parts of itself correctly, such as the\nlocation for the watch stream to put in the header, or the GraphQL endpoint for\nGraphiQL to connect to.</p>\n<p>A really complex use case of this would be this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Assuming you combine both Express subpath AND an external</span>\n<span class=\"token comment\">// proxy which mounts your express app at `/myproxypath`, you</span>\n<span class=\"token comment\">// should provide options like this:</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"/path/to\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">postgraphile</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">,</span> schemas<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">externalUrlBase</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/myproxypath/path/to\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">graphqlRoute</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/graphql\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">graphiql</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">graphiqlRoute</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/graphiql\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Then you can load GraphiQL at `/myproxypath/path/to/graphiql`</span>\n<span class=\"token comment\">// and it will know to connect to GraphQL at</span>\n<span class=\"token comment\">// `/myproxypath/path/to/graphql`</span></code></pre></div>\n<h3 id=\"composing-postgraphile-middleware-with-other-middleware\"><a href=\"#composing-postgraphile-middleware-with-other-middleware\" aria-label=\"composing postgraphile middleware with other middleware permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composing PostGraphile middleware with other middleware</h3>\n<p>Some use cases might require to mount other middleware before PostGraphile, for\ninstance if requests to the GraphQL endpoint should be subject to an additional\nauthorization / authentication mechanism.</p>\n<p>With express, such a composition can be done like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Example middleware, does nothing</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">authMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Mount middleware on the GraphQL endpoint</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/graphql\"</span><span class=\"token punctuation\">,</span> authMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Mount PostGraphile after this middleware</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">postgraphile</span><span class=\"token punctuation\">(</span>connectionString<span class=\"token punctuation\">,</span> schema<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This example uses Express, but a similar approach is possible with other Node.js\nwebservers.</p>\n<h3 id=\"handleerrors\"><a href=\"#handleerrors\" aria-label=\"handleerrors permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>handleErrors</h3>\n<p>Optionally you may specify a <code class=\"language-text\">handleErrors</code> function as part of the PostGraphile\noptions. This function will be passed the list of errors that occurred during\nthe GraphQL operation (if any occurred) and must return this same list, or a\nlist that will be used to replace the errors.</p>\n<p>In <a href=\"https://github.com/graphql/graphql-js\">GraphQL.js</a>, all errors are wrapped\nin\n<a href=\"https://github.com/graphql/graphql-js/blob/6bb002d74d32067540c0dc8401c977520fa1ed20/src/error/GraphQLError.js\">a <code class=\"language-text\">GraphQLError</code> object</a>.\nYou can get to the original error that was thrown from a resolver via the\n<code class=\"language-text\">originalError</code> property on the GraphQLError, however some errors might be\nGraphQL query validation or other error types that don't have an\n<code class=\"language-text\">originalError</code>. Further some errors might be provided by PostGraphile itself\nrather than GraphQL, so might not be GraphQLError objects.</p>\n<p>The original error could be thrown from any number of places (especially if\nyou're using plugins) but if it is thrown from PostgreSQL, then it might be a\n<a href=\"https://github.com/brianc/node-postgres/blob/95b5daadaade40ea343c0d3ad09ab230fa2ade4c/packages/pg-protocol/src/messages.ts#L97-L117\">pg DatabaseError error</a>.</p>\n<p>Errors are detailed in\n<a href=\"https://spec.graphql.org/June2018/#sec-Errors\">the GraphQL Spec</a>, so be sure\nthat the errors you return from <code class=\"language-text\">handleErrors</code> conform to these rules.</p>\n<p>You can find\n<a href=\"https://github.com/graphile/starter/blob/d90cdc7560b01a2bc2847a72307383a36786a780/%40app/server/src/utils/handleErrors.ts\">an example of <code class=\"language-text\">handleErrors</code> in Graphile Starter</a>.</p>","tableOfContents":"<ul>\n<li><a href=\"/postgraphile/usage-library/#http-middleware\">HTTP Middleware</a></li>\n<li><a href=\"/postgraphile/usage-library/#route-handlers\">Route Handlers</a></li>\n<li>\n<p><a href=\"/postgraphile/usage-library/#recommended-options\">Recommended options</a></p>\n<ul>\n<li><a href=\"/postgraphile/usage-library/#for-development\">For Development</a></li>\n<li><a href=\"/postgraphile/usage-library/#for-production\">For Production</a></li>\n</ul>\n</li>\n<li><a href=\"/postgraphile/usage-library/#api-postgraphilepgconfig-schemaname-options\">API: &#x3C;code class=\"language-text\">postgraphile(pgConfig, schemaName, options)&#x3C;/code></a></li>\n<li>\n<p><a href=\"/postgraphile/usage-library/#exposing-http-request-data-to-postgresql\">Exposing HTTP request data to PostgreSQL</a></p>\n<ul>\n<li><a href=\"/postgraphile/usage-library/#pgsettings-function\">&#x3C;code class=\"language-text\">pgSettings&#x3C;/code> function</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/postgraphile/usage-library/#making-http-data-available-to-resolvers\">Making HTTP data available to resolvers</a></p>\n<ul>\n<li><a href=\"/postgraphile/usage-library/#additionalgraphqlcontextfromrequest-function\">&#x3C;code class=\"language-text\">additionalGraphQLContextFromRequest&#x3C;/code> function</a></li>\n</ul>\n</li>\n<li><a href=\"/postgraphile/usage-library/#mounting-postgraphile-middleware-under-a-subpath\">Mounting PostGraphile middleware under a subpath</a></li>\n<li><a href=\"/postgraphile/usage-library/#composing-postgraphile-middleware-with-other-middleware\">Composing PostGraphile middleware with other middleware</a></li>\n<li><a href=\"/postgraphile/usage-library/#handleerrors\">handleErrors</a></li>\n</ul>","timeToRead":24,"frontmatter":{"path":"/postgraphile/usage-library/","title":"PostGraphile as a Library","fullTitle":"Using PostGraphile as a Library","showExamples":null,"noToc":null}},"nav":{"edges":[{"node":{"id":"5ae9b01a-9c87-58f1-8dcb-7da4e1a638e2","name":"news","sections":[{"id":"main","title":"Releases"},{"id":"about","title":"About Graphile"},{"id":"misc","title":"Talks, Events & Podcasts"}],"pages":[{"to":"/news/20230803-postgraphile-v5-beta/","title":"PostGraphile V5 public beta!","sectionId":"main","subpages":null},{"to":"/news/20230622-intro-to-postgraphile-v5/","title":"Intro to PostGraphile V5","sectionId":"misc","subpages":null},{"to":"/news/20221208-graphql-galaxy/","title":"Step Aside Resolvers!","sectionId":"misc","subpages":null},{"to":"/news/20221020-development-support/","title":"Development Support Now Available","sectionId":"about","subpages":null},{"to":"/news/20221011-worker-014/","title":"Graphile Worker 0.14 - Batch Jobs","sectionId":"main","subpages":null},{"to":"/news/20220714-graphql-radio/","title":"GraphQL Radio Appearance","sectionId":"misc","subpages":null},{"to":"/news/20220704-github-readme/","title":"Jem's Discussion Panel at GitHub ReadME","sectionId":"about","subpages":null},{"to":"/news/20220607-schema-metadata/","title":"Schema Metadata: A Growing Need","sectionId":"misc","subpages":null},{"to":"/news/20220607-spec-news/","title":"Spec News Pod Launch","sectionId":"misc","subpages":null},{"to":"/news/20220415-graphql-over-sse/","title":"GraphQL over SSE","sectionId":"main","subpages":null},{"to":"/news/20211207-graphql-galaxy/","title":"Working Group Discussion Panel","sectionId":"misc","subpages":null},{"to":"/news/20211109-graphql-summit/","title":"What's Next for the GraphQL Spec in 2022?","sectionId":"misc","subpages":null},{"to":"/news/20210527-postgraphile-412/","title":"PostGraphile 4.12 - Awesome Aggregates","sectionId":"main","subpages":null},{"to":"/news/20210129-postgraphile-411/","title":"PostGraphile 4.11 - Wonderful Websockets","sectionId":"main","subpages":null},{"to":"/news/20210120-worker-09/","title":"Graphile Worker 0.9","sectionId":"main","subpages":null},{"to":"/news/20201208-github-sponsors/","title":"GitHub Sponsors Now Available to Organizations","sectionId":"about","subpages":null},{"to":"/news/20201127-postgraphile-410/","title":"PostGraphile 4.10 - Framework Friends","sectionId":"main","subpages":null},{"to":"/news/20200922-github-readme/","title":"Benjie's Story at GitHub ReadME","sectionId":"about","subpages":null},{"to":"/news/20201127-migrate-1/","title":"Graphile Migrate Reaches 1.0 Milestone","sectionId":"main","subpages":null},{"to":"/news/20200805-postgraphile-48/","title":"PostGraphile 4.8 - Excellent Enums","sectionId":"main","subpages":null},{"to":"/news/20200721-rita/","title":"pgRITA - A Tool for Postgres","sectionId":"main","subpages":null},{"to":"/news/20200427-starter-30/","title":"Graphile Starter 3.0","sectionId":"main","subpages":null},{"to":"/news/20200317-migrate-01/","title":"Graphile Migrate 0.1","sectionId":"main","subpages":null},{"to":"/news/20200205-worker-04/","title":"Graphile Worker 0.4","sectionId":"main","subpages":null},{"to":"/news/20200131-fosdem/","title":"Graphile Goes to FOSDEM 2020","sectionId":"misc","subpages":null},{"to":"/news/graphile-starter/","title":"Graphile Starter Released","sectionId":"main","subpages":null},{"to":"/news/postgraphile-version-4-5/","title":"PostGraphile 4.5 - Explain Feature","sectionId":"main","subpages":null},{"to":"/news/20191104-reactive-conf/","title":"Increasing velocity with GraphQL and Postgres","sectionId":"misc","subpages":null},{"to":"/news/postgraphile-version-4-4/","title":"PostGraphile 4.4 - Real-time","sectionId":"main","subpages":null},{"to":"/news/postgraphile-version-4-1/","title":"PostGraphile 4.1 - Better Webpackability","sectionId":"main","subpages":null},{"to":"/news/20181023-graphql-finland/","title":"Database-Driven GraphQL Development","sectionId":"misc","subpages":null},{"to":"/news/postgraphile-version-4/","title":"PostGraphile 4.0 - Fantastic Performance","sectionId":"main","subpages":null},{"to":"/news/press-kit/","title":"Graphile Press Kit","sectionId":"about","subpages":null}]}},{"node":{"id":"9c6fa765-467b-52be-8edb-9e45ddaee2c7","name":"graphile-build","sections":[{"id":"guides","title":"Overview"},{"id":"library-reference","title":"Using the Library"},{"id":"plugin-reference","title":"Building a Plugin"}],"pages":[{"to":"/graphile-build/getting-started/","title":"Getting Started","sectionId":"guides","subpages":[]},{"to":"/graphile-build/plugins/","title":"Plugins","sectionId":"guides","subpages":[]},{"to":"/graphile-build/hooks/","title":"Hooks","sectionId":"guides","subpages":[]},{"to":"/graphile-build/look-ahead/","title":"Look Ahead","sectionId":"guides","subpages":[]},{"to":"/graphile-build/graphile-build/","title":"graphile-build","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/schema-builder/","title":"SchemaBuilder","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/plugin-options/","title":"Options","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/default-plugins/","title":"Default Plugins","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/omitting-plugins/","title":"Omitting Plugins","sectionId":"guides","subpages":[]},{"to":"/graphile-build/all-hooks/","title":"All Hooks","sectionId":"plugin-reference","subpages":[]},{"to":"/graphile-build/build-object/","title":"Build Object","sectionId":"plugin-reference","subpages":[]},{"to":"/graphile-build/context-object/","title":"Context Object","sectionId":"plugin-reference","subpages":[]},{"to":"/graphile-build/schema-builder/","title":"SchemaBuilder","sectionId":"plugin-reference","subpages":[]}]}},{"node":{"id":"db912f43-977c-5927-bd35-643354670ea0","name":"postgraphile","sections":[{"id":"overview","title":"Overview"},{"id":"basics","title":"Operation"},{"id":"customising","title":"Customising"},{"id":"guides","title":"Guides"},{"id":"deploying","title":"Deploying"},{"id":"community","title":"Community"},{"id":"faq","title":"FAQ"}],"pages":[{"to":"/postgraphile/introduction/","title":"Introduction","sectionId":"overview","subpages":[]},{"to":"/postgraphile/examples/","title":"Example Gallery","sectionId":"overview","subpages":[]},{"to":"/postgraphile/usage/","title":"Usage","sectionId":"overview","subpages":[{"to":"/postgraphile/usage-cli/","title":"CLI Usage","sectionId":"overview"},{"to":"/postgraphile/usage-library/","title":"Library Usage","sectionId":"overview"},{"to":"/postgraphile/usage-schema/","title":"Schema-only Usage","sectionId":"overview"}]},{"to":"/postgraphile/performance/","title":"Performance","sectionId":"overview","subpages":[]},{"to":"/postgraphile/requirements/","title":"Requirements","sectionId":"overview","subpages":[]},{"to":"/postgraphile/required-knowledge/","title":"Required Knowledge","sectionId":"overview","subpages":[]},{"to":"/postgraphile/quick-start-guide/","title":"Quick Start Guide","sectionId":"basics","subpages":[]},{"to":"/postgraphile/namespaces/","title":"Namespaces","sectionId":"basics","subpages":null},{"to":"/postgraphile/inflection/","title":"Inflection","sectionId":"basics","subpages":null},{"to":"/postgraphile/tables/","title":"Tables","sectionId":"basics","subpages":[{"to":"/postgraphile/relations/","title":"Relations","sectionId":"basics"},{"to":"/postgraphile/connections/","title":"Connections","sectionId":"basics"},{"to":"/postgraphile/filtering/","title":"Filtering","sectionId":"basics"},{"to":"/postgraphile/crud-mutations/","title":"CRUD Mutations","sectionId":"basics"},{"to":"/postgraphile/node-id/","title":"nodeId / id","sectionId":"basics"}]},{"to":"/postgraphile/functions/","title":"Functions","sectionId":"basics","subpages":[{"to":"/postgraphile/computed-columns/","title":"Computed Columns","sectionId":"basics"},{"to":"/postgraphile/custom-queries/","title":"Custom Queries","sectionId":"basics"},{"to":"/postgraphile/custom-mutations/","title":"Custom Mutations","sectionId":"basics"},{"to":"/postgraphile/function-restrictions/","title":"Function Restrictions","sectionId":"basics"},{"to":"/postgraphile/function-gallery/","title":"Function Gallery","sectionId":"customising"}]},{"to":"/postgraphile/enums/","title":"Enums","sectionId":"basics","subpages":[]},{"to":"/postgraphile/views/","title":"Views","sectionId":"basics","subpages":[]},{"to":"/postgraphile/aggregates/","title":"Aggregates","sectionId":"basics","subpages":[]},{"to":"/postgraphile/postgresql-indexes/","title":"PostgreSQL Indexes","sectionId":"basics","subpages":[]},{"to":"/postgraphile/security/","title":"Security","sectionId":"basics","subpages":[]},{"to":"/postgraphile/realtime/","title":"Realtime","sectionId":"basics","subpages":[{"to":"/postgraphile/subscriptions/","title":"Subscriptions","sectionId":"basics"},{"to":"/postgraphile/live-queries/","title":"Live Queries","sectionId":"basics"}]},{"to":"/postgraphile/background-tasks/","title":"Background Tasks","sectionId":"basics","subpages":[]},{"to":"/postgraphile/reserved-keywords/","title":"Reserved Keywords","sectionId":"basics","subpages":[]},{"to":"/postgraphile/debugging/","title":"Debugging","sectionId":"basics","subpages":[]},{"to":"/postgraphile/smart-tags/","title":"Smart Tags","sectionId":"customising","subpages":[{"to":"/postgraphile/smart-tags-file/","title":"The postgraphile.tags.json5 file","sectionId":"customising"},{"to":"/postgraphile/smart-comments/","title":"Database Smart Comments","sectionId":"customising"}]},{"to":"/postgraphile/extending/","title":"Schema Plugins","sectionId":"customising","subpages":[{"to":"/postgraphile/make-add-inflectors-plugin/","title":"makeAddInflectorsPlugin","sectionId":"customising"},{"to":"/postgraphile/make-change-nullability-plugin/","title":"makeChangeNullabilityPlugin","sectionId":"customising"},{"to":"/postgraphile/make-extend-schema-plugin/","title":"makeExtendSchemaPlugin","sectionId":"customising"},{"to":"/postgraphile/make-process-schema-plugin/","title":"makeProcessSchemaPlugin","sectionId":"customising"},{"to":"/postgraphile/make-wrap-resolvers-plugin/","title":"makeWrapResolversPlugin","sectionId":"customising"},{"to":"/postgraphile/make-add-pg-table-condition-plugin/","title":"makeAddPgTableConditionPlugin","sectionId":"customising"},{"to":"/postgraphile/make-add-pg-table-order-by-plugin/","title":"makeAddPgTableOrderByPlugin","sectionId":"customising"},{"to":"/postgraphile/make-pg-smart-tags-plugin/","title":"makePgSmartTagsPlugin","sectionId":"customising"},{"to":"/postgraphile/make-plugin-by-combining-plugins/","title":"makePluginByCombiningPlugins","sectionId":"customising"},{"to":"/postgraphile/extending-raw/","title":"Graphile Engine","sectionId":"customising"},{"to":"/postgraphile/plugin-gallery/","title":"Plugin Gallery","sectionId":"customising"},{"to":"/postgraphile/community-plugins/","title":"Community Plugins","sectionId":"customising"}]},{"to":"/postgraphile/plugins/","title":"Server Plugins","sectionId":"customising","subpages":[]},{"to":"/postgraphile/postgresql-schema-design/","title":"PostgreSQL Schema Design","sectionId":"guides","subpages":[]},{"to":"/postgraphile/evaluating/","title":"Evaluating for your Project","sectionId":"guides","subpages":[]},{"to":"/postgraphile/best-practices/","title":"Best Practices","sectionId":"guides","subpages":[]},{"to":"/postgraphile/production/","title":"Production Considerations","sectionId":"guides","subpages":[]},{"to":"/postgraphile/jwt-guide/","title":"PostGraphile JWT Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/jwk-verification/","title":"JWK Verification (e.g. Auth0)","sectionId":"guides","subpages":[]},{"to":"/postgraphile/default-role/","title":"The Default Role","sectionId":"guides","subpages":[]},{"to":"/postgraphile/pg-pubsub-migration/","title":"@graphile/pg-pubsub Migration Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/v4-new-features/","title":"v4 Feature Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/v3-migration/","title":"v3 → v4 Migration Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/testing-jest/","title":"Testing with Jest","sectionId":"guides","subpages":[]},{"to":"/postgraphile/bundling-webpack/","title":"Bundling with Webpack","sectionId":"guides","subpages":[]},{"to":"/postgraphile/multiple-schemas/","title":"Multiple GraphQL Schemas","sectionId":"guides","subpages":[]},{"to":"/postgraphile/running-postgraphile-in-docker/","title":"Running PostGraphile in Docker","sectionId":"guides","subpages":[]},{"to":"/postgraphile/running-postgraphile-as-a-library-in-docker/","title":"Running PostGraphile as a library in Docker","sectionId":"guides","subpages":[]},{"to":"/postgraphile/deploying-heroku/","title":"Deploying to Heroku","sectionId":"deploying","subpages":[]},{"to":"/postgraphile/deploying-docker/","title":"Deploying with Docker","sectionId":"deploying","subpages":[]},{"to":"/postgraphile/deploying-lambda/","title":"Deploying to AWS Lambda","sectionId":"deploying","subpages":[]},{"to":"/postgraphile/deploying-gcp/","title":"Deploying to GCP","sectionId":"deploying","subpages":[]},{"to":"/postgraphile/community-contributions/","title":"Community Contributions","sectionId":"community","subpages":[]},{"to":"/postgraphile/community-chat/","title":"Community Chat","sectionId":"community","subpages":[]},{"to":"/postgraphile/code-of-conduct/","title":"Code of Conduct","sectionId":"community","subpages":[]},{"to":"/postgraphile/introspection/","title":"Introspection?","sectionId":"faq","subpages":[]},{"to":"/postgraphile/why-nullable/","title":"Why is it nullable?","sectionId":"faq","subpages":[]},{"to":"/postgraphile/versioning-policy/","title":"Versioning policy?","sectionId":"faq","subpages":[]}]}},{"node":{"id":"f6dbcb59-d3dc-5c85-a547-0f413b0cfdfa","name":"graphile-build-pg","sections":[{"id":"overview","title":"Usage"}],"pages":[{"to":"/graphile-build-pg/settings/","title":"Settings","sectionId":"overview","subpages":[]}]}}]},"examples":{"edges":[{"node":{"category":"functions","id":"f1a86695-1bfb-5a2c-bd3c-e95a8ba27c2c","title":"Custom queries","examples":[{"title":"Logged in user field","example":"create function viewer()\nreturns users\nas $$\n  select *\n  from users\n  where id = current_user_id();\n  /*\n   * current_user_id() is a function\n   * that returns the logged in user's\n   * id, e.g. by extracting from the JWT\n   * or indicated via pgSettings.\n   */\n$$ language sql stable set search_path from current;\n","exampleLanguage":"sql","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1795,6 +1795,7 @@\n \n   \"\"\"Chosen by fair dice roll. Guaranteed to be random. XKCD#221\"\"\"\n   randomNumber: Int\n+  viewer: User\n \n   \"\"\"Reads a single `Forum` using its globally unique `ID`.\"\"\"\n   forumByNodeId(\n","resultLanguage":"diff"}]}},{"node":{"category":"functions","id":"0c30881e-d050-59f7-8e3e-2ef5f399714d","title":"Computed columns","examples":[{"title":"User primary email","example":"/*\n * Returns the primary email of the\n * current user; for all other users\n * this function will return null.\n */\ncreate function \"users_primaryEmail\"(u users)\nreturns text\nas $$\n  select email\n  from user_emails\n  where user_id = current_user_id()\n  and user_id = u.id\n  and is_verified is true\n  order by id asc\n  limit 1;\n$$ language sql stable set search_path from current;\n","exampleLanguage":"sql","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -3130,6 +3130,7 @@\n     \"\"\"\n     condition: QuizEntryCondition\n   ): QuizEntriesConnection!\n+  primaryEmail: String\n }\n \n \"\"\"\n","resultLanguage":"diff"}]}},{"node":{"category":"functions","id":"8addbbdb-d6cb-5a99-bedb-83c6da6c9731","title":"Custom mutations","examples":[{"title":"Insert multiple records","example":"/**\n * Occasionally you'll want to create a bunch of rows in different tables in a\n * single mutation. Here's an example of how to do that.\n *\n * Pretend we're registering quiz entries, and we want to store each answer in\n * its own table as we want to be able to operate on the answers independently\n * later.\n *\n * This means we want:\n *\n *  1. A mutation that takes input data for inserting one quiz entry and\n *  multiple answers.\n *  2. A function that inserts a new quiz entry, inserts an answer for each\n *  answer provided in the input data, and connects each answer to the created\n *  quiz entry.\n *  3. Finally, we want the function to return the inserted quiz entry itself.\n */\n\n/**\n * This type is used for input in the mutation\n */\ncreate type quiz_entry_input as (\n  question text,\n  answer int\n);\n\n/**\n * Here's the function that gets turned into a \"custom mutation\"\n */\ncreate function add_quiz_entry(\n  quiz_id int,\n  answers quiz_entry_input[]\n)\nreturns quiz_entry\nas $$\n  declare\n    q quiz_entry;\n    a quiz_entry_answer;\n  begin\n    insert into quiz_entry(user_id, quiz_id)\n      values(current_user_id(), quiz_id)\n      returning * into q;\n\n    foreach a in array answers loop\n      insert into quiz_entry_answer(quiz_entry_id, question, answer)\n        values (quiz_id, a.question, a.answer);\n    end loop;\n\n    return q;\n  end;\n$$ language plpgsql volatile strict set search_path from current;\n","exampleLanguage":"sql","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,3 +1,41 @@\n+\"\"\"All input for the `addQuizEntry` mutation.\"\"\"\n+input AddQuizEntryInput {\n+  \"\"\"\n+  An arbitrary string value with no semantic meaning. Will be included in the\n+  payload verbatim. May be used to track mutations by the client.\n+  \"\"\"\n+  clientMutationId: String\n+  quizId: Int!\n+  answers: [QuizEntryInputRecordInput]!\n+}\n+\n+\"\"\"The output of our `addQuizEntry` mutation.\"\"\"\n+type AddQuizEntryPayload {\n+  \"\"\"\n+  The exact same `clientMutationId` that was provided in the mutation input,\n+  unchanged and unused. May be used by a client to track mutations.\n+  \"\"\"\n+  clientMutationId: String\n+  quizEntry: QuizEntry\n+\n+  \"\"\"\n+  Our root query field type. Allows us to run any query from our mutation payload.\n+  \"\"\"\n+  query: Query\n+\n+  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n+  user: User\n+\n+  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n+  quiz: Quiz\n+\n+  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n+  quizEntryEdge(\n+    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n+    orderBy: [QuizEntriesOrderBy!] = [PRIMARY_KEY_ASC]\n+  ): QuizEntriesEdge\n+}\n+\n \"\"\"\n A floating point number that requires more precision than IEEE 754 binary 64\n \"\"\"\n@@ -1472,6 +1510,12 @@\n     \"\"\"\n     input: DeleteUserByUsernameInput!\n   ): DeleteUserPayload\n+  addQuizEntry(\n+    \"\"\"\n+    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    \"\"\"\n+    input: AddQuizEntryInput!\n+  ): AddQuizEntryPayload\n \n   \"\"\"\n   If you've forgotten your password, give us one of your email addresses and we'\n@@ -2115,6 +2159,12 @@\n   quizId: Int!\n }\n \n+\"\"\"An input for mutations affecting `QuizEntryInputRecord`\"\"\"\n+input QuizEntryInputRecordInput {\n+  question: String\n+  answer: Int\n+}\n+\n \"\"\"\n Represents an update to a `QuizEntry`. Fields that are set will be updated.\n \"\"\"\n","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"c5f90f4e-c704-5f6c-9363-030653ff1d52","title":"Inflector","examples":[{"title":"PgRenamePatchToPatchSetPlugin","example":"/**\n * Simply renames the `UserPatch` and `PostPatch` type names to be called\n * `UserPatchSet` and `PostPatchSet` instead.\n *\n * Not particularly useful, just an example. ('PatchSet' chosen to minimise\n * diff to make example clearer.)\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L309-L311\n */\nmodule.exports = function PgRenamePatchToPatchSetPlugin(\n  builder\n) {\n  builder.hook(\n    \"inflection\",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the patchType inflector\n      patchType(typeName) {\n        // return this.upperCamelCase(`${typeName}-patch`);\n        return this.upperCamelCase(\n          `${typeName}-patch-set`\n        );\n      },\n    })\n  );\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -979,7 +979,7 @@\n \"\"\"\n Represents an update to a `Forum`. Fields that are set will be updated.\n \"\"\"\n-input ForumPatch {\n+input ForumPatchSet {\n   id: Int\n \n   \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n@@ -1573,7 +1573,7 @@\n }\n \n \"\"\"Represents an update to a `Post`. Fields that are set will be updated.\"\"\"\n-input PostPatch {\n+input PostPatchSet {\n   \"\"\"The body of the `Topic`, which Posts reply to.\"\"\"\n   body: Html\n }\n@@ -2043,7 +2043,7 @@\n \"\"\"\n Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n \"\"\"\n-input QuizEntryAnswerPatch {\n+input QuizEntryAnswerPatchSet {\n   id: Int\n   quizEntryId: Int\n   question: String\n@@ -2118,7 +2118,7 @@\n \"\"\"\n Represents an update to a `QuizEntry`. Fields that are set will be updated.\n \"\"\"\n-input QuizEntryPatch {\n+input QuizEntryPatchSet {\n   id: Int\n   userId: Int\n   quizId: Int\n@@ -2134,7 +2134,7 @@\n }\n \n \"\"\"Represents an update to a `Quiz`. Fields that are set will be updated.\"\"\"\n-input QuizPatch {\n+input QuizPatchSet {\n   id: Int\n   name: String\n   updatedAt: Datetime\n@@ -2317,7 +2317,7 @@\n \"\"\"\n Represents an update to a `Topic`. Fields that are set will be updated.\n \"\"\"\n-input TopicPatch {\n+input TopicPatchSet {\n   id: Int\n   forumId: Int\n   authorId: Int\n@@ -2394,7 +2394,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Forum` being updated.\n   \"\"\"\n-  patch: ForumPatch!\n+  patch: ForumPatchSet!\n }\n \n \"\"\"All input for the `updateForumBySlug` mutation.\"\"\"\n@@ -2408,7 +2408,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Forum` being updated.\n   \"\"\"\n-  patch: ForumPatch!\n+  patch: ForumPatchSet!\n \n   \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n   slug: String!\n@@ -2425,7 +2425,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Forum` being updated.\n   \"\"\"\n-  patch: ForumPatch!\n+  patch: ForumPatchSet!\n   id: Int!\n }\n \n@@ -2468,7 +2468,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Post` being updated.\n   \"\"\"\n-  patch: PostPatch!\n+  patch: PostPatchSet!\n }\n \n \"\"\"All input for the `updatePost` mutation.\"\"\"\n@@ -2482,7 +2482,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Post` being updated.\n   \"\"\"\n-  patch: PostPatch!\n+  patch: PostPatchSet!\n   id: Int!\n }\n \n@@ -2531,7 +2531,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Quiz` being updated.\n   \"\"\"\n-  patch: QuizPatch!\n+  patch: QuizPatchSet!\n }\n \n \"\"\"All input for the `updateQuizEntryAnswerByNodeId` mutation.\"\"\"\n@@ -2550,7 +2550,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n   \"\"\"\n-  patch: QuizEntryAnswerPatch!\n+  patch: QuizEntryAnswerPatchSet!\n }\n \n \"\"\"All input for the `updateQuizEntryAnswer` mutation.\"\"\"\n@@ -2564,7 +2564,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n   \"\"\"\n-  patch: QuizEntryAnswerPatch!\n+  patch: QuizEntryAnswerPatchSet!\n   id: Int!\n }\n \n@@ -2610,7 +2610,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntry` being updated.\n   \"\"\"\n-  patch: QuizEntryPatch!\n+  patch: QuizEntryPatchSet!\n }\n \n \"\"\"All input for the `updateQuizEntry` mutation.\"\"\"\n@@ -2624,7 +2624,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntry` being updated.\n   \"\"\"\n-  patch: QuizEntryPatch!\n+  patch: QuizEntryPatchSet!\n   id: Int!\n }\n \n@@ -2668,7 +2668,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Quiz` being updated.\n   \"\"\"\n-  patch: QuizPatch!\n+  patch: QuizPatchSet!\n   id: Int!\n }\n \n@@ -2711,7 +2711,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Topic` being updated.\n   \"\"\"\n-  patch: TopicPatch!\n+  patch: TopicPatchSet!\n }\n \n \"\"\"All input for the `updateTopic` mutation.\"\"\"\n@@ -2725,7 +2725,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Topic` being updated.\n   \"\"\"\n-  patch: TopicPatch!\n+  patch: TopicPatchSet!\n   id: Int!\n }\n \n@@ -2774,7 +2774,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserAuthentication` being updated.\n   \"\"\"\n-  patch: UserAuthenticationPatch!\n+  patch: UserAuthenticationPatchSet!\n }\n \n \"\"\"\n@@ -2790,7 +2790,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserAuthentication` being updated.\n   \"\"\"\n-  patch: UserAuthenticationPatch!\n+  patch: UserAuthenticationPatchSet!\n \n   \"\"\"The login service used, e.g. `twitter` or `github`.\"\"\"\n   service: String!\n@@ -2810,7 +2810,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserAuthentication` being updated.\n   \"\"\"\n-  patch: UserAuthenticationPatch!\n+  patch: UserAuthenticationPatchSet!\n   id: Int!\n }\n \n@@ -2853,7 +2853,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `User` being updated.\n   \"\"\"\n-  patch: UserPatch!\n+  patch: UserPatchSet!\n }\n \n \"\"\"All input for the `updateUserByUsername` mutation.\"\"\"\n@@ -2867,7 +2867,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `User` being updated.\n   \"\"\"\n-  patch: UserPatch!\n+  patch: UserPatchSet!\n \n   \"\"\"Public-facing username (or 'handle') of the user.\"\"\"\n   username: String!\n@@ -2889,7 +2889,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserEmail` being updated.\n   \"\"\"\n-  patch: UserEmailPatch!\n+  patch: UserEmailPatchSet!\n }\n \n \"\"\"All input for the `updateUserEmailByUserIdAndEmail` mutation.\"\"\"\n@@ -2903,7 +2903,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserEmail` being updated.\n   \"\"\"\n-  patch: UserEmailPatch!\n+  patch: UserEmailPatchSet!\n   userId: Int!\n \n   \"\"\"The users email address, in `a@b.c` format.\"\"\"\n@@ -2921,7 +2921,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserEmail` being updated.\n   \"\"\"\n-  patch: UserEmailPatch!\n+  patch: UserEmailPatchSet!\n   id: Int!\n }\n \n@@ -2962,7 +2962,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `User` being updated.\n   \"\"\"\n-  patch: UserPatch!\n+  patch: UserPatchSet!\n \n   \"\"\"Unique identifier for the user.\"\"\"\n   id: Int!\n@@ -3167,7 +3167,7 @@\n \"\"\"\n Represents an update to a `UserAuthentication`. Fields that are set will be updated.\n \"\"\"\n-input UserAuthenticationPatch {\n+input UserAuthenticationPatchSet {\n   id: Int\n \n   \"\"\"The login service used, e.g. `twitter` or `github`.\"\"\"\n@@ -3273,7 +3273,7 @@\n \"\"\"\n Represents an update to a `UserEmail`. Fields that are set will be updated.\n \"\"\"\n-input UserEmailPatch {\n+input UserEmailPatchSet {\n   id: Int\n   userId: Int\n \n@@ -3355,7 +3355,7 @@\n }\n \n \"\"\"Represents an update to a `User`. Fields that are set will be updated.\"\"\"\n-input UserPatch {\n+input UserPatchSet {\n   \"\"\"Unique identifier for the user.\"\"\"\n   id: Int\n \n","resultLanguage":"diff"},{"title":"PgShortenAllRowsInflectorPlugin","example":"/**\n * Simply renames the `allUsers` and `allPosts` Query fields to `users` and\n * `posts` respectively.\n *\n * Not particularly useful, just an example.\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L460-L464\n */\nmodule.exports = function PgShortenAllRowsInflectorPlugin(\n  builder\n) {\n  builder.hook(\n    \"inflection\",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the allRows inflector\n      allRows(table) {\n        return this.camelCase(\n          // Was: `all-${this.pluralize(this._singularizedTableName(table))}`\n          // Now:\n          this.pluralize(\n            this._singularizedTableName(\n              table\n            )\n          )\n        );\n      },\n    })\n  );\n};\n","exampleLanguage":"javascript","result":"","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"a5b3b7e0-cf0e-5962-96c8-e2230b819469","title":"Types","examples":[{"title":"PgNumericToFloatPlugin","example":"/**\n * Use of this plugin is NOT recommended, please see\n * PgSmallNumericToFloatPlugin for a more appropriate replacement if you need\n * one.\n *\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for *all* DECIMAL / NUMERIC values, for making PostGraphile v4 slightly more\n * backwards-compatible with v3.\n *\n * It's generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur.\n */\nmodule.exports = function PgNumericToFloatPlugin(\n  builder\n) {\n  builder.hook(\"build\", build => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700), always\n    // returning the GraphQLFloat type\n    build.pgRegisterGqlTypeByTypeId(\n      \"1700\",\n      () => build.graphql.GraphQLFloat\n    );\n    return build;\n  });\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,8 +1,3 @@\n-\"\"\"\n-A floating point number that requires more precision than IEEE 754 binary 64\n-\"\"\"\n-scalar BigFloat\n-\n \"\"\"All input for the create `Forum` mutation.\"\"\"\n input CreateForumInput {\n   \"\"\"\n@@ -1863,8 +1858,8 @@\n   id: Int!\n   name: String!\n   updatedAt: Datetime!\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n \n   \"\"\"Reads and enables pagination through a set of `QuizEntry`.\"\"\"\n   quizEntries(\n@@ -1910,10 +1905,10 @@\n   updatedAt: Datetime\n \n   \"\"\"Checks for equality with the object’s `precision12Scale2` field.\"\"\"\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   \"\"\"Checks for equality with the object’s `precision200Scale100` field.\"\"\"\n-  precision200Scale100: BigFloat\n+  precision200Scale100: Float\n }\n \n \"\"\"A connection to a list of `QuizEntry` values.\"\"\"\n@@ -2129,8 +2124,8 @@\n   id: Int\n   name: String!\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n \"\"\"Represents an update to a `Quiz`. Fields that are set will be updated.\"\"\"\n@@ -2138,8 +2133,8 @@\n   id: Int\n   name: String\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n \"\"\"A connection to a list of `Quiz` values.\"\"\"\n","resultLanguage":"diff"},{"title":"PgSmallNumericToFloatPlugin","example":"/**\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for DECIMAL / NUMERIC values that have a precision and scale under the given\n * limits (currently 12 and 2 respectively).\n *\n * It's generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur; however some systems are okay with this compromise.\n */\nmodule.exports = function PgSmallNumericToFloatPlugin(\n  builder,\n  {\n    pgNumericToFloatPrecisionCap = 12,\n    pgNumericToFloatScaleCap = 2,\n  }\n) {\n  builder.hook(\"build\", build => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700)\n    build.pgRegisterGqlTypeByTypeId(\n      \"1700\",\n      (_set, modifier) => {\n        if (\n          modifier &&\n          typeof modifier ===\n            \"number\" &&\n          modifier > 0\n        ) {\n          // Ref: https://stackoverflow.com/a/3351120/141284\n          const precision =\n            ((modifier - 4) >> 16) &\n            65535;\n          const scale =\n            (modifier - 4) & 65535;\n          if (\n            precision <=\n              pgNumericToFloatPrecisionCap &&\n            scale <=\n              pgNumericToFloatScaleCap\n          ) {\n            // This number is no more precise than our cap, so we're declaring\n            // that we can handle it as a float:\n            return build.graphql\n              .GraphQLFloat;\n          }\n        }\n        // If all else fails, let PostGraphile do it's default handling - i.e.\n        // BigFloat\n        return null;\n      }\n    );\n\n    // We didn't modify _init, but we still must return it.\n    return build;\n  });\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1863,7 +1863,7 @@\n   id: Int!\n   name: String!\n   updatedAt: Datetime!\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n \n   \"\"\"Reads and enables pagination through a set of `QuizEntry`.\"\"\"\n@@ -1910,7 +1910,7 @@\n   updatedAt: Datetime\n \n   \"\"\"Checks for equality with the object’s `precision12Scale2` field.\"\"\"\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   \"\"\"Checks for equality with the object’s `precision200Scale100` field.\"\"\"\n   precision200Scale100: BigFloat\n@@ -2129,7 +2129,7 @@\n   id: Int\n   name: String!\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n@@ -2138,7 +2138,7 @@\n   id: Int\n   name: String\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n","resultLanguage":"diff"},{"title":"SetInputObjectDefaultValue","example":"/**\n * This plugin sets a defaultValue on all input object fields that match the\n * given criteria (specifically the 'create' input types, for columns named\n * 'name')\n */\nmodule.exports = function SetInputObjectDefaultValue(\n  builder\n) {\n  builder.hook(\n    \"GraphQLInputObjectType:fields:field\",\n    (field, build, context) => {\n      const {\n        scope: {\n          isPgRowType,\n          isInputType,\n          isPgPatch,\n          pgFieldIntrospection: attr,\n        },\n      } = context;\n      if (\n        !isPgRowType ||\n        !isInputType ||\n        isPgPatch ||\n        !attr ||\n        attr.kind !== \"attribute\" ||\n        attr.name !== \"name\"\n      ) {\n        return field;\n      }\n\n      return {\n        ...field,\n        type: build.graphql.getNamedType(\n          field.type\n        ), // Since it has a default, it can be nullable\n        defaultValue:\n          // attr.tags.defaultValue: enables overriding this with a\n          // `@defaultValue Alice Smith` smart comment\n          attr.tags.defaultValue ||\n          \"Bobby Tables\",\n      };\n    }\n  );\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -968,7 +968,7 @@\n   slug: String!\n \n   \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n-  name: String!\n+  name: String = \"Bobby Tables\"\n \n   \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n   description: String\n@@ -2127,7 +2127,7 @@\n \"\"\"An input for mutations affecting `Quiz`\"\"\"\n input QuizInput {\n   id: Int\n-  name: String!\n+  name: String = \"Bobby Tables\"\n   updatedAt: Datetime\n   precision12Scale2: BigFloat\n   precision200Scale100: BigFloat\n@@ -3343,7 +3343,7 @@\n   username: String!\n \n   \"\"\"Public-facing name (or pseudonym) of the user.\"\"\"\n-  name: String\n+  name: String = \"Bobby Tables\"\n \n   \"\"\"Optional avatar URL.\"\"\"\n   avatarUrl: String\n","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"573c161f-f98f-55d1-95d6-6f6edebaca42","title":"Mutation wrappers","examples":[{"title":"OverrideArgValuePlugin","example":"/**\n * This plugin sets the `input.quizPatch.updatedAt` to the current timestamp in\n * the `updateQuiz*` mutations IFF it's not already set.\n */\nmodule.exports = function SetInputObjectDefaultValue(\n  builder\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields:field\",\n    (field, build, context) => {\n      const {\n        scope: {\n          isPgUpdateMutationField,\n          pgFieldIntrospection: table,\n        },\n      } = context;\n      if (\n        !isPgUpdateMutationField ||\n        table.kind !== \"class\" ||\n        table.name !== \"quiz\"\n      ) {\n        return field;\n      }\n\n      const oldResolve =\n        field.resolve;\n\n      return {\n        ...field,\n        resolve(\n          _mutation,\n          args,\n          context,\n          info\n        ) {\n          // Override the `updatedAt` field if it's not already set.\n          if (\n            args.input.quizPatch\n              .updatedAt == null\n          ) {\n            args.input.quizPatch.updatedAt = new Date().toISOString();\n          }\n          return oldResolve(\n            _mutation,\n            args,\n            context,\n            info\n          );\n        },\n      };\n    }\n  );\n};\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0300_mutation_wrappers/OverrideArgValuePlugin.js -c graphile_org_demo -s app_public\n","exampleLanguage":"javascript","result":"","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"a075db74-d68f-5c74-8757-3a8bb2214bb8","title":"Customisation","examples":[{"title":"OmitMutationsByDefaultPlugin","example":"/**\n * This plugin treats any table that doesn't have an `@omit` comment as if it\n * had `@omit create,update,delete` (thereby disabling mutations).\n *\n * Override it by adding a smart comment to the table. To restore all\n * mutations, do `COMMENT ON my_table IS E'@omit :';` (the `:` is special\n * syntax for \"nothing\").\n */\nmodule.exports = function OmitMutationsByDefaultPlugin(\n  builder\n) {\n  builder.hook(\"build\", build => {\n    const {\n      pgIntrospectionResultsByKind,\n    } = build;\n    pgIntrospectionResultsByKind.class\n      .filter(\n        table =>\n          table.isSelectable &&\n          table.namespace\n      )\n      .forEach(table => {\n        if (!(\"omit\" in table.tags)) {\n          table.tags.omit =\n            \"create,update,delete\";\n        }\n      });\n    return build;\n  });\n};\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0400_customisation/OmitMutationsByDefaultPlugin.js -c graphile_org_demo -s app_public\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -3,41 +3,6 @@\n \"\"\"\n scalar BigFloat\n \n-\"\"\"All input for the create `Forum` mutation.\"\"\"\n-input CreateForumInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` to be created by this mutation.\"\"\"\n-  forum: ForumInput!\n-}\n-\n-\"\"\"The output of our create `Forum` mutation.\"\"\"\n-type CreateForumPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` that was created by this mutation.\"\"\"\n-  forum: Forum\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n-  forumEdge(\n-    \"\"\"The method to use when ordering `Forum`.\"\"\"\n-    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): ForumsEdge\n-}\n-\n \"\"\"All input for the create `Post` mutation.\"\"\"\n input CreatePostInput {\n   \"\"\"\n@@ -79,120 +44,6 @@\n   ): PostsEdge\n }\n \n-\"\"\"All input for the create `QuizEntryAnswer` mutation.\"\"\"\n-input CreateQuizEntryAnswerInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` to be created by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswerInput!\n-}\n-\n-\"\"\"The output of our create `QuizEntryAnswer` mutation.\"\"\"\n-type CreateQuizEntryAnswerPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` that was created by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswer\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"An edge for our `QuizEntryAnswer`. May be used by Relay 1.\"\"\"\n-  quizEntryAnswerEdge(\n-    \"\"\"The method to use when ordering `QuizEntryAnswer`.\"\"\"\n-    orderBy: [QuizEntryAnswersOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizEntryAnswersEdge\n-}\n-\n-\"\"\"All input for the create `QuizEntry` mutation.\"\"\"\n-input CreateQuizEntryInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` to be created by this mutation.\"\"\"\n-  quizEntry: QuizEntryInput!\n-}\n-\n-\"\"\"The output of our create `QuizEntry` mutation.\"\"\"\n-type CreateQuizEntryPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` that was created by this mutation.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n-  user: User\n-\n-  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n-  quizEntryEdge(\n-    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n-    orderBy: [QuizEntriesOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizEntriesEdge\n-}\n-\n-\"\"\"All input for the create `Quiz` mutation.\"\"\"\n-input CreateQuizInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` to be created by this mutation.\"\"\"\n-  quiz: QuizInput!\n-}\n-\n-\"\"\"The output of our create `Quiz` mutation.\"\"\"\n-type CreateQuizPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` that was created by this mutation.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Quiz`. May be used by Relay 1.\"\"\"\n-  quizEdge(\n-    \"\"\"The method to use when ordering `Quiz`.\"\"\"\n-    orderBy: [QuizzesOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizzesEdge\n-}\n-\n \"\"\"All input for the create `Topic` mutation.\"\"\"\n input CreateTopicInput {\n   \"\"\"\n@@ -351,66 +202,6 @@\n \"\"\"\n scalar Datetime\n \n-\"\"\"All input for the `deleteForumByNodeId` mutation.\"\"\"\n-input DeleteForumByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Forum` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"All input for the `deleteForumBySlug` mutation.\"\"\"\n-input DeleteForumBySlugInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String!\n-}\n-\n-\"\"\"All input for the `deleteForum` mutation.\"\"\"\n-input DeleteForumInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"The output of our delete `Forum` mutation.\"\"\"\n-type DeleteForumPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` that was deleted by this mutation.\"\"\"\n-  forum: Forum\n-  deletedForumNodeId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n-  forumEdge(\n-    \"\"\"The method to use when ordering `Forum`.\"\"\"\n-    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): ForumsEdge\n-}\n-\n \"\"\"All input for the `deletePostByNodeId` mutation.\"\"\"\n input DeletePostByNodeIdInput {\n   \"\"\"\n@@ -465,159 +256,6 @@\n   ): PostsEdge\n }\n \n-\"\"\"All input for the `deleteQuizByNodeId` mutation.\"\"\"\n-input DeleteQuizByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Quiz` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"All input for the `deleteQuizEntryAnswerByNodeId` mutation.\"\"\"\n-input DeleteQuizEntryAnswerByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntryAnswer` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"All input for the `deleteQuizEntryAnswer` mutation.\"\"\"\n-input DeleteQuizEntryAnswerInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"The output of our delete `QuizEntryAnswer` mutation.\"\"\"\n-type DeleteQuizEntryAnswerPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` that was deleted by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswer\n-  deletedQuizEntryAnswerNodeId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"An edge for our `QuizEntryAnswer`. May be used by Relay 1.\"\"\"\n-  quizEntryAnswerEdge(\n-    \"\"\"The method to use when ordering `QuizEntryAnswer`.\"\"\"\n-    orderBy: [QuizEntryAnswersOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizEntryAnswersEdge\n-}\n-\n-\"\"\"All input for the `deleteQuizEntryByNodeId` mutation.\"\"\"\n-input DeleteQuizEntryByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntry` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"All input for the `deleteQuizEntry` mutation.\"\"\"\n-input DeleteQuizEntryInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"The output of our delete `QuizEntry` mutation.\"\"\"\n-type DeleteQuizEntryPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` that was deleted by this mutation.\"\"\"\n-  quizEntry: QuizEntry\n-  deletedQuizEntryNodeId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n-  user: User\n-\n-  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n-  quizEntryEdge(\n-    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n-    orderBy: [QuizEntriesOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizEntriesEdge\n-}\n-\n-\"\"\"All input for the `deleteQuiz` mutation.\"\"\"\n-input DeleteQuizInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"The output of our delete `Quiz` mutation.\"\"\"\n-type DeleteQuizPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` that was deleted by this mutation.\"\"\"\n-  quiz: Quiz\n-  deletedQuizNodeId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Quiz`. May be used by Relay 1.\"\"\"\n-  quizEdge(\n-    \"\"\"The method to use when ordering `Quiz`.\"\"\"\n-    orderBy: [QuizzesOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizzesEdge\n-}\n-\n \"\"\"All input for the `deleteTopicByNodeId` mutation.\"\"\"\n input DeleteTopicByNodeIdInput {\n   \"\"\"\n@@ -960,40 +598,6 @@\n   updatedAt: Datetime\n }\n \n-\"\"\"An input for mutations affecting `Forum`\"\"\"\n-input ForumInput {\n-  id: Int\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String!\n-\n-  \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n-  name: String!\n-\n-  \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n-  description: String\n-  createdAt: Datetime\n-  updatedAt: Datetime\n-}\n-\n-\"\"\"\n-Represents an update to a `Forum`. Fields that are set will be updated.\n-\"\"\"\n-input ForumPatch {\n-  id: Int\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String\n-\n-  \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n-  name: String\n-\n-  \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n-  description: String\n-  createdAt: Datetime\n-  updatedAt: Datetime\n-}\n-\n \"\"\"A connection to a list of `Forum` values.\"\"\"\n type ForumsConnection {\n   \"\"\"A list of `Forum` objects.\"\"\"\n@@ -1045,14 +649,6 @@\n The root mutation type which contains root level fields which mutate data.\n \"\"\"\n type Mutation {\n-  \"\"\"Creates a single `Forum`.\"\"\"\n-  createForum(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateForumInput!\n-  ): CreateForumPayload\n-\n   \"\"\"Creates a single `Post`.\"\"\"\n   createPost(\n     \"\"\"\n@@ -1061,30 +657,6 @@\n     input: CreatePostInput!\n   ): CreatePostPayload\n \n-  \"\"\"Creates a single `Quiz`.\"\"\"\n-  createQuiz(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateQuizInput!\n-  ): CreateQuizPayload\n-\n-  \"\"\"Creates a single `QuizEntry`.\"\"\"\n-  createQuizEntry(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateQuizEntryInput!\n-  ): CreateQuizEntryPayload\n-\n-  \"\"\"Creates a single `QuizEntryAnswer`.\"\"\"\n-  createQuizEntryAnswer(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateQuizEntryAnswerInput!\n-  ): CreateQuizEntryAnswerPayload\n-\n   \"\"\"Creates a single `Topic`.\"\"\"\n   createTopic(\n     \"\"\"\n@@ -1117,30 +689,6 @@\n     input: CreateUserInput!\n   ): CreateUserPayload\n \n-  \"\"\"Updates a single `Forum` using its globally unique id and a patch.\"\"\"\n-  updateForumByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateForumByNodeIdInput!\n-  ): UpdateForumPayload\n-\n-  \"\"\"Updates a single `Forum` using a unique key and a patch.\"\"\"\n-  updateForum(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateForumInput!\n-  ): UpdateForumPayload\n-\n-  \"\"\"Updates a single `Forum` using a unique key and a patch.\"\"\"\n-  updateForumBySlug(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateForumBySlugInput!\n-  ): UpdateForumPayload\n-\n   \"\"\"Updates a single `Post` using its globally unique id and a patch.\"\"\"\n   updatePostByNodeId(\n     \"\"\"\n@@ -1157,56 +705,6 @@\n     input: UpdatePostInput!\n   ): UpdatePostPayload\n \n-  \"\"\"Updates a single `Quiz` using its globally unique id and a patch.\"\"\"\n-  updateQuizByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizByNodeIdInput!\n-  ): UpdateQuizPayload\n-\n-  \"\"\"Updates a single `Quiz` using a unique key and a patch.\"\"\"\n-  updateQuiz(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizInput!\n-  ): UpdateQuizPayload\n-\n-  \"\"\"Updates a single `QuizEntry` using its globally unique id and a patch.\"\"\"\n-  updateQuizEntryByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryByNodeIdInput!\n-  ): UpdateQuizEntryPayload\n-\n-  \"\"\"Updates a single `QuizEntry` using a unique key and a patch.\"\"\"\n-  updateQuizEntry(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryInput!\n-  ): UpdateQuizEntryPayload\n-\n-  \"\"\"\n-  Updates a single `QuizEntryAnswer` using its globally unique id and a patch.\n-  \"\"\"\n-  updateQuizEntryAnswerByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryAnswerByNodeIdInput!\n-  ): UpdateQuizEntryAnswerPayload\n-\n-  \"\"\"Updates a single `QuizEntryAnswer` using a unique key and a patch.\"\"\"\n-  updateQuizEntryAnswer(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryAnswerInput!\n-  ): UpdateQuizEntryAnswerPayload\n-\n   \"\"\"Updates a single `Topic` using its globally unique id and a patch.\"\"\"\n   updateTopicByNodeId(\n     \"\"\"\n@@ -1297,30 +795,6 @@\n     input: UpdateUserByUsernameInput!\n   ): UpdateUserPayload\n \n-  \"\"\"Deletes a single `Forum` using its globally unique id.\"\"\"\n-  deleteForumByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteForumByNodeIdInput!\n-  ): DeleteForumPayload\n-\n-  \"\"\"Deletes a single `Forum` using a unique key.\"\"\"\n-  deleteForum(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteForumInput!\n-  ): DeleteForumPayload\n-\n-  \"\"\"Deletes a single `Forum` using a unique key.\"\"\"\n-  deleteForumBySlug(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteForumBySlugInput!\n-  ): DeleteForumPayload\n-\n   \"\"\"Deletes a single `Post` using its globally unique id.\"\"\"\n   deletePostByNodeId(\n     \"\"\"\n@@ -1337,54 +811,6 @@\n     input: DeletePostInput!\n   ): DeletePostPayload\n \n-  \"\"\"Deletes a single `Quiz` using its globally unique id.\"\"\"\n-  deleteQuizByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteQuizByNodeIdInput!\n-  ): DeleteQuizPayload\n-\n-  \"\"\"Deletes a single `Quiz` using a unique key.\"\"\"\n-  deleteQuiz(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteQuizInput!\n-  ): DeleteQuizPayload\n-\n-  \"\"\"Deletes a single `QuizEntry` using its globally unique id.\"\"\"\n-  deleteQuizEntryByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteQuizEntryByNodeIdInput!\n-  ): DeleteQuizEntryPayload\n-\n-  \"\"\"Deletes a single `QuizEntry` using a unique key.\"\"\"\n-  deleteQuizEntry(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteQuizEntryInput!\n-  ): DeleteQuizEntryPayload\n-\n-  \"\"\"Deletes a single `QuizEntryAnswer` using its globally unique id.\"\"\"\n-  deleteQuizEntryAnswerByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteQuizEntryAnswerByNodeIdInput!\n-  ): DeleteQuizEntryAnswerPayload\n-\n-  \"\"\"Deletes a single `QuizEntryAnswer` using a unique key.\"\"\"\n-  deleteQuizEntryAnswer(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteQuizEntryAnswerInput!\n-  ): DeleteQuizEntryAnswerPayload\n-\n   \"\"\"Deletes a single `Topic` using its globally unique id.\"\"\"\n   deleteTopicByNodeId(\n     \"\"\"\n@@ -2032,24 +1458,6 @@\n   answer: Int\n }\n \n-\"\"\"An input for mutations affecting `QuizEntryAnswer`\"\"\"\n-input QuizEntryAnswerInput {\n-  id: Int\n-  quizEntryId: Int!\n-  question: String!\n-  answer: Int\n-}\n-\n-\"\"\"\n-Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n-\"\"\"\n-input QuizEntryAnswerPatch {\n-  id: Int\n-  quizEntryId: Int\n-  question: String\n-  answer: Int\n-}\n-\n \"\"\"A connection to a list of `QuizEntryAnswer` values.\"\"\"\n type QuizEntryAnswersConnection {\n   \"\"\"A list of `QuizEntryAnswer` objects.\"\"\"\n@@ -2108,40 +1516,6 @@\n   quizId: Int\n }\n \n-\"\"\"An input for mutations affecting `QuizEntry`\"\"\"\n-input QuizEntryInput {\n-  id: Int\n-  userId: Int!\n-  quizId: Int!\n-}\n-\n-\"\"\"\n-Represents an update to a `QuizEntry`. Fields that are set will be updated.\n-\"\"\"\n-input QuizEntryPatch {\n-  id: Int\n-  userId: Int\n-  quizId: Int\n-}\n-\n-\"\"\"An input for mutations affecting `Quiz`\"\"\"\n-input QuizInput {\n-  id: Int\n-  name: String!\n-  updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n-}\n-\n-\"\"\"Represents an update to a `Quiz`. Fields that are set will be updated.\"\"\"\n-input QuizPatch {\n-  id: Int\n-  name: String\n-  updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n-}\n-\n \"\"\"A connection to a list of `Quiz` values.\"\"\"\n type QuizzesConnection {\n   \"\"\"A list of `Quiz` objects.\"\"\"\n@@ -2378,80 +1752,6 @@\n   PRIMARY_KEY_DESC\n }\n \n-\"\"\"All input for the `updateForumByNodeId` mutation.\"\"\"\n-input UpdateForumByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Forum` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Forum` being updated.\n-  \"\"\"\n-  patch: ForumPatch!\n-}\n-\n-\"\"\"All input for the `updateForumBySlug` mutation.\"\"\"\n-input UpdateForumBySlugInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Forum` being updated.\n-  \"\"\"\n-  patch: ForumPatch!\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String!\n-}\n-\n-\"\"\"All input for the `updateForum` mutation.\"\"\"\n-input UpdateForumInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Forum` being updated.\n-  \"\"\"\n-  patch: ForumPatch!\n-  id: Int!\n-}\n-\n-\"\"\"The output of our update `Forum` mutation.\"\"\"\n-type UpdateForumPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` that was updated by this mutation.\"\"\"\n-  forum: Forum\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n-  forumEdge(\n-    \"\"\"The method to use when ordering `Forum`.\"\"\"\n-    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): ForumsEdge\n-}\n-\n \"\"\"All input for the `updatePostByNodeId` mutation.\"\"\"\n input UpdatePostByNodeIdInput {\n   \"\"\"\n@@ -2515,186 +1815,6 @@\n   ): PostsEdge\n }\n \n-\"\"\"All input for the `updateQuizByNodeId` mutation.\"\"\"\n-input UpdateQuizByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Quiz` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Quiz` being updated.\n-  \"\"\"\n-  patch: QuizPatch!\n-}\n-\n-\"\"\"All input for the `updateQuizEntryAnswerByNodeId` mutation.\"\"\"\n-input UpdateQuizEntryAnswerByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntryAnswer` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  \"\"\"\n-  patch: QuizEntryAnswerPatch!\n-}\n-\n-\"\"\"All input for the `updateQuizEntryAnswer` mutation.\"\"\"\n-input UpdateQuizEntryAnswerInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  \"\"\"\n-  patch: QuizEntryAnswerPatch!\n-  id: Int!\n-}\n-\n-\"\"\"The output of our update `QuizEntryAnswer` mutation.\"\"\"\n-type UpdateQuizEntryAnswerPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` that was updated by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswer\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"An edge for our `QuizEntryAnswer`. May be used by Relay 1.\"\"\"\n-  quizEntryAnswerEdge(\n-    \"\"\"The method to use when ordering `QuizEntryAnswer`.\"\"\"\n-    orderBy: [QuizEntryAnswersOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizEntryAnswersEdge\n-}\n-\n-\"\"\"All input for the `updateQuizEntryByNodeId` mutation.\"\"\"\n-input UpdateQuizEntryByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntry` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntry` being updated.\n-  \"\"\"\n-  patch: QuizEntryPatch!\n-}\n-\n-\"\"\"All input for the `updateQuizEntry` mutation.\"\"\"\n-input UpdateQuizEntryInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntry` being updated.\n-  \"\"\"\n-  patch: QuizEntryPatch!\n-  id: Int!\n-}\n-\n-\"\"\"The output of our update `QuizEntry` mutation.\"\"\"\n-type UpdateQuizEntryPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` that was updated by this mutation.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n-  user: User\n-\n-  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n-  quizEntryEdge(\n-    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n-    orderBy: [QuizEntriesOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizEntriesEdge\n-}\n-\n-\"\"\"All input for the `updateQuiz` mutation.\"\"\"\n-input UpdateQuizInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Quiz` being updated.\n-  \"\"\"\n-  patch: QuizPatch!\n-  id: Int!\n-}\n-\n-\"\"\"The output of our update `Quiz` mutation.\"\"\"\n-type UpdateQuizPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` that was updated by this mutation.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Quiz`. May be used by Relay 1.\"\"\"\n-  quizEdge(\n-    \"\"\"The method to use when ordering `Quiz`.\"\"\"\n-    orderBy: [QuizzesOrderBy!] = [PRIMARY_KEY_ASC]\n-  ): QuizzesEdge\n-}\n-\n \"\"\"All input for the `updateTopicByNodeId` mutation.\"\"\"\n input UpdateTopicByNodeIdInput {\n   \"\"\"\n","resultLanguage":"diff"},{"title":"SanitizeHTMLTypePlugin","example":"// Author: Benjie Gillam\n// License: https://benjie.mit-license.org/\n//\n// This is a documentation example, you will need to edit it to make it useful.\n// Instructions on running this plugin are at the bottom.\n\n// This function is the one that would perform sanitisation (writing actual\n// sanitisation is left as an exercise to the reader)\nfunction sanitize(html) {\n  return html.toUpperCase();\n}\n\n// Export our plugin function (it can be async if you want)\nmodule.exports = /* async */ function SanitizeHTMLTypePlugin(\n  builder\n) {\n  // Builder is an instance of SchemaBuilder:\n  //\n  //   https://www.graphile.org/graphile-build/schema-builder/\n\n  //////////////////////////////////////////////////////////////////////////////\n\n  // Here we're hooking the init event; this event occurs after the `build`\n  // object is finalised, but before we start building our schema - it's the\n  // perfect time to hook up additional types.\n  //\n  // 'init' is an a-typical hook in that the first argument is meaningless (but\n  // you should still return it at the end of the hook).\n  //\n  // Note all hooks in graphile-build must be synchronous; any async work must be done above here.\n  builder.hook(\"init\", (_, build) => {\n    // The `build` object is an instance of Build: https://www.graphile.org/graphile-build/build-object/\n    // graphile-build-pg adds a bunch of additional helpers to this object:\n    const {\n      pgIntrospectionResultsByKind, // From PgIntrospectionPlugin\n      pgRegisterGqlTypeByTypeId, // From PgTypesPlugin\n      pgRegisterGqlInputTypeByTypeId, // From PgTypesPlugin\n      pg2GqlMapper, // From PgTypesPlugin\n      pgSql: sql, // From PgBasicsPlugin, this is equivalent to `require('pg-sql2')` but avoids multiple-module conflicts\n      graphql, // Equivalent to `require('graphql')` but avoids multiple-module conflicts\n    } = build;\n    const { GraphQLString } = graphql;\n\n    // First we find the type that we care about. In this case we've done\n    //\n    //   CREATE DOMAIN html AS text;\n    // or\n    //   CREATE DOMAIN public.html AS text;\n    //\n    // so we are looking for the 'html' type in the 'public' schema (namespace).\n    const htmlDomain = pgIntrospectionResultsByKind.type.find(\n      type =>\n        type.name === \"html\" &&\n        type.namespaceName ===\n          \"public\"\n    );\n\n    // If this type exists, then...\n    if (htmlDomain) {\n      // Register the *output* type for this type, we just want to use the `String` type\n      pgRegisterGqlTypeByTypeId(\n        htmlDomain.id,\n        () => GraphQLString\n      );\n\n      // Register the *input* type for this type, again we'll use `String`\n      pgRegisterGqlInputTypeByTypeId(\n        htmlDomain.id,\n        () => GraphQLString\n      );\n\n      // The pg2GqlMapper is responsible for translating things from PostgreSQL\n      // into GraphQL and back again.\n      pg2GqlMapper[htmlDomain.id] = {\n        // From Postgres to GraphQL: we simply take the string from postgres\n        // and sanitise it and return the resulting string to GraphQL.\n        map: value => sanitize(value),\n\n        // From GraphQL to SQL: we must construct an SQL fragment that can be\n        // interpolated into larger SQL queries (e.g. as the argument to a\n        // function or the input value for a CREATE/UPDATE mutation). Graphile\n        // uses the pg-sql2 module for this purpose, you can find the docs\n        // here:\n        //\n        //   https://github.com/graphile/pg-sql2/blob/master/README.md\n        //\n        // We're going to take the value (string) the client gave us, stick it\n        // through the sanitise function, then pass it into SQL using\n        // `sql.value` to avoid SQL injection and being sure to cast it to our\n        // HTML type. Note that if you miss the `sql.value(...)` pg-sql2 will\n        // throw an error, so you don't have to worry about accidental SQL\n        // injection - just never use `sql.raw`!\n        unmap: value =>\n          sql.fragment`(${sql.value(\n            sanitize(value)\n          )}::public.html)`,\n      };\n    }\n\n    // All hooks in graphile-build must return something; normally it's an\n    // augmented form of the thing that was passed as the first argument. We\n    // don't manipuate _ at all so we can simply return it.\n    return _;\n  });\n};\n\n/*\n\nYou can test this plugin by saving it to a file 'plugin.js', then executing the\nfollowing:\n\n  # Create a database to test against\n  createdb sanitise-html\n  # Seed the database with our domain, table and some data\n  psql -1X sanitise-html <<SQL\n    CREATE DOMAIN html AS text;\n    CREATE TABLE a (id SERIAL PRIMARY KEY, t TEXT, h HTML);\n    INSERT INTO a (t, h) VALUES ('AaAaAa', 'BbBbBb');\n  SQL\n  # Run PostGraphile\n  postgraphile --append-plugins `pwd`/plugin.js -c postgres:///sanitise-html\n\n\nHere's a GraphQL query for selecting the data:\n\n  {\n    allAs {\n      nodes {\n        id\n        t\n        h\n      }\n    }\n  }\n\nAnd one for updating the data:\n\n  mutation {\n    updateAById(\n      input: {\n        id: 1\n        aPatch: {\n          t: \"tttt_TTTT_tttt\"\n          h: \"hhhh_HHHH_hhhh\"\n        }\n      }\n    ) {\n      a {\n        id\n        t\n        h\n      }\n    }\n  }\n\n*/\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0400_customisation/SanitizeHTMLTypePlugin.js -c graphile_org_demo -s app_public\n","exampleLanguage":"javascript","result":"","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"dbd65555-a494-599a-af28-adf3b3b5ae74","title":"Other","examples":[{"title":"ExtractSmartTagsPlugin","example":"/**\n * This plugin will create a file `smartTags.json` containing all of the smart\n * tags gathered from all of the various sources (smart comments, smart tags,\n * plugins, etc etc). This provides a relatively easy migration path from using\n * smart comments to using smart tags instead. Neither Smart Comments nor Smart\n * Tags are \"better\" - they each have trade offs - you can use which ever one\n * matches your teams development flow better (or even mix and match!).\n *\n * Author phryneas (https://github.com/graphile/graphile.github.io/pull/243)\n */\nconst { writeFile } = require(\"fs\");\n\nmodule.exports = builder => {\n  builder.hook(\"init\", (_, build) => {\n    function sortStuff(a, b) {\n      const aSchema =\n        \"namespaceName\" in a\n          ? a.namespaceName\n          : a.class.namespaceName;\n      const bSchema =\n        \"namespaceName\" in b\n          ? b.namespaceName\n          : b.class.namespaceName;\n      return (\n        aSchema.localeCompare(\n          bSchema\n        ) *\n          100 +\n        a.name.localeCompare(b.name)\n      );\n    }\n    const smart = {\n      version: 1,\n      config: {\n        class: [\n          ...build\n            .pgIntrospectionResultsByKind\n            .class,\n        ]\n          .sort(sortStuff)\n          .reduce((acc, pgClass) => {\n            let attribute = [\n              ...pgClass.attributes,\n            ]\n              .sort((a, b) =>\n                a.name.localeCompare(\n                  b.name\n                )\n              )\n              .reduce(\n                (acc, pgAttr) => {\n                  const tags =\n                    Object.keys(\n                      pgAttr.tags\n                    ).length > 0\n                      ? pgAttr.tags\n                      : undefined;\n                  if (\n                    pgAttr.description ||\n                    tags\n                  ) {\n                    acc[\n                      pgAttr.name\n                    ] = {\n                      ...(pgAttr.description\n                        ? {\n                            description:\n                              pgAttr.description,\n                          }\n                        : {}),\n                      tags,\n                    };\n                  }\n                  return acc;\n                },\n                {}\n              );\n            if (\n              Object.keys(attribute)\n                .length === 0\n            ) {\n              attribute = undefined;\n            }\n            let constraint = [\n              ...pgClass.constraints,\n            ]\n              .sort(sortStuff)\n              .reduce(\n                (acc, pgConst) => {\n                  if (\n                    pgConst.name.startsWith(\n                      \"FAKE_\"\n                    )\n                  ) {\n                    return acc;\n                  }\n                  const tags =\n                    Object.keys(\n                      pgConst.tags\n                    ).length > 0\n                      ? pgConst.tags\n                      : undefined;\n                  if (\n                    pgConst.class &&\n                    (pgConst.description ||\n                      tags)\n                  ) {\n                    acc[\n                      pgConst.class\n                        .namespaceName +\n                        \".\" +\n                        pgConst.name\n                    ] = {\n                      ...(pgConst.description\n                        ? {\n                            description:\n                              pgConst.description,\n                          }\n                        : {}),\n                      tags,\n                    };\n                  }\n                  return acc;\n                },\n                {}\n              );\n            if (\n              Object.keys(constraint)\n                .length === 0\n            ) {\n              constraint = undefined;\n            }\n            const tags =\n              Object.keys(\n                pgClass.tags\n              ).length > 0\n                ? pgClass.tags\n                : undefined;\n            if (\n              pgClass.description ||\n              tags ||\n              attribute\n            )\n              acc[\n                pgClass.namespaceName +\n                  \".\" +\n                  pgClass.name\n              ] = {\n                ...(pgClass.description\n                  ? {\n                      description:\n                        pgClass.description,\n                    }\n                  : {}),\n                tags,\n                attribute,\n                constraint,\n              };\n            return acc;\n          }, {}),\n        procedure: [\n          ...build\n            .pgIntrospectionResultsByKind\n            .procedure,\n        ]\n          .sort(sortStuff)\n          .reduce((acc, pgProc) => {\n            if (\n              pgProc.name.startsWith(\n                \"FAKE_\"\n              )\n            ) {\n              return acc;\n            }\n            const tags =\n              Object.keys(pgProc.tags)\n                .length > 0\n                ? pgProc.tags\n                : undefined;\n            if (\n              pgProc.description ||\n              tags\n            ) {\n              acc[\n                pgProc.namespaceName +\n                  \".\" +\n                  pgProc.name\n              ] = {\n                ...(pgProc.description\n                  ? {\n                      description:\n                        pgProc.description,\n                    }\n                  : {}),\n                tags,\n              };\n            }\n            return acc;\n          }, {}),\n      },\n    };\n    writeFile(\n      __dirname + \"/smartTags.json\",\n      JSON.stringify(\n        smart,\n        undefined,\n        2\n      ),\n      e => {\n        console.log(e);\n      }\n    );\n    return _;\n  });\n};\n","exampleLanguage":"javascript","result":"","resultLanguage":"diff"}]}},{"node":{"category":"queries","id":"f906ff51-ad12-5a8c-bdd1-e84635ed21f6","title":"Basic","examples":[{"title":"Forums","example":"{\n  forums {\n    nodes {\n      nodeId\n      id\n      slug\n      name\n      description\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forums\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n        \"id\": 1,\n        \"slug\": \"testimonials\",\n        \"name\": \"Testimonials\",\n        \"description\": \"How do you rate PostGraphile?\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDJd\",\n        \"id\": 2,\n        \"slug\": \"feedback\",\n        \"name\": \"Feedback\",\n        \"description\": \"How are you finding PostGraphile?\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDNd\",\n        \"id\": 3,\n        \"slug\": \"cat-life\",\n        \"name\": \"Cat Life\",\n        \"description\": \"A forum all about cats and how fluffy they are and how they completely ignore their owners unless there is food. Or yarn.\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDRd\",\n        \"id\": 4,\n        \"slug\": \"cat-help\",\n        \"name\": \"Cat Help\",\n        \"description\": \"A forum to seek advice if your cat is becoming troublesome.\"\n      }\n    ]\n  }\n}\n","resultLanguage":"json"},{"title":"Forum by slug","example":"{\n  forumBySlug(slug: \"testimonials\") {\n    nodeId\n    id\n    slug\n    name\n    description\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forumBySlug\": {\n    \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n    \"id\": 1,\n    \"slug\": \"testimonials\",\n    \"name\": \"Testimonials\",\n    \"description\": \"How do you rate PostGraphile?\"\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"b888ab68-4d0f-5abb-ab79-4878be4ab4af","title":"Collections","examples":[{"title":"First offset","example":"{\n  forums(first: 1, offset: 1) {\n    nodes {\n      nodeId\n      id\n      name\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forums\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDJd\",\n        \"id\": 2,\n        \"name\": \"Feedback\"\n      }\n    ]\n  }\n}\n","resultLanguage":"json"},{"title":"Relation condition","example":"{\n  forumBySlug(slug: \"testimonials\") {\n    nodeId\n    id\n    name\n    topics(\n      condition: { authorId: 2 }\n    ) {\n      nodes {\n        nodeId\n        id\n        title\n        body\n      }\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forumBySlug\": {\n    \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n    \"id\": 1,\n    \"name\": \"Testimonials\",\n    \"topics\": {\n      \"nodes\": [\n        {\n          \"nodeId\": \"WyJ0b3BpY3MiLDFd\",\n          \"id\": 1,\n          \"title\": \"Thank you!\",\n          \"body\": \"500-1500 requests per second on a single server is pretty awesome.\"\n        }\n      ]\n    }\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"27f4c024-b66b-572b-b78f-544e1b6d7b53","title":"Relations","examples":[{"title":"Forums topics posts","example":"{\n  forumBySlug(slug: \"cat-life\") {\n    name\n    topics(\n      first: 1\n      orderBy: [CREATED_AT_ASC]\n    ) {\n      nodes {\n        id\n        title\n        bodySummary\n        author {\n          id\n          username\n        }\n        posts(\n          first: 1\n          orderBy: [ID_DESC]\n        ) {\n          nodes {\n            id\n            author {\n              id\n              username\n            }\n            body\n          }\n        }\n      }\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forumBySlug\": {\n    \"name\": \"Cat Life\",\n    \"topics\": {\n      \"nodes\": [\n        {\n          \"id\": 4,\n          \"title\": \"I love cats!\",\n          \"bodySummary\": \"They're the best!\",\n          \"author\": {\n            \"id\": 1,\n            \"username\": \"user\"\n          },\n          \"posts\": {\n            \"nodes\": [\n              {\n                \"id\": 6,\n                \"author\": {\n                  \"id\": 3,\n                  \"username\": \"Bradley_A\"\n                },\n                \"body\": \"I love it when they completely ignore you until they want something. So much better than dogs am I rite?\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"bdec1796-5c46-5148-b9c8-7c5bd9e0a9bc","title":"Mutations","examples":[{"title":"Create","example":"mutation {\n  createTopic(\n    input: {\n      topic: {\n        forumId: 2\n        title: \"My question relates to mutations...\"\n        body: \"How do you write them?\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      forumId\n      title\n      body\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"createTopic\": {\n    \"topic\": {\n      \"nodeId\": \"WyJ0b3BpY3MiLDVd\",\n      \"id\": 5,\n      \"forumId\": 2,\n      \"title\": \"My question relates to mutations...\",\n      \"body\": \"How do you write them?\"\n    }\n  }\n}\n","resultLanguage":"json"},{"title":"Update","example":"mutation {\n  updateTopic(\n    input: {\n      id: 1\n      patch: {\n        title: \"My (edited) title\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      title\n      body\n    }\n  }\n}\n\n# Works for a table like:\n#\n#   create table app_public.topics (\n#     id serial primary key,\n#     forum_id integer NOT NULL references app_public.forums on delete cascade,\n#     title text NOT NULL,\n#     body text DEFAULT ''::text NOT NULL\n#   );\n","exampleLanguage":"graphql","result":"{\n  \"updateTopic\": {\n    \"topic\": {\n      \"nodeId\": \"WyJ0b3BpY3MiLDFd\",\n      \"id\": 1,\n      \"title\": \"My (edited) title\",\n      \"body\": \"500-1500 requests per second on a single server is pretty awesome.\"\n    }\n  }\n}\n","resultLanguage":"json"},{"title":"Delete","example":"mutation {\n  deleteTopic(input: { id: 1 }) {\n    deletedTopicNodeId\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"deleteTopic\": {\n    \"deletedTopicNodeId\": \"WyJ0b3BpY3MiLDFd\"\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"9f525338-c706-502c-8579-283ead2583e1","title":"Custom queries","examples":[{"title":"Single scalar","example":"{\n  randomNumber\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.random_number() returns int\n#  language sql stable\n#  as $$\n#    select 4; -- Chosen by fair dice roll. Guaranteed to be random. XKCD#221\n#  $$;\n#\n","exampleLanguage":"graphql","result":"{ \"randomNumber\": 4 }\n","resultLanguage":"json"},{"title":"Single row","example":"{\n  currentUser {\n    nodeId\n    id\n    username\n  }\n}\n\n# Added to the GraphQL schema via\n# this SQL:\n#\n#   create function current_user()\n#   returns app_public.users\n#   language sql stable\n#   as $$\n#     select users.*\n#     from app_public.users\n#     where id = current_user_id();\n#   $$;\n","exampleLanguage":"graphql","result":"{\n  \"currentUser\": {\n    \"nodeId\": \"WyJ1c2VycyIsMV0=\",\n    \"id\": 1,\n    \"username\": \"user\"\n  }\n}\n","resultLanguage":"json"},{"title":"Rows connection","example":"{\n  forumsAboutCats {\n    nodes {\n      nodeId\n      id\n      name\n      slug\n    }\n  }\n}\n\n# Created from SQL like:\n#\n#  create function app_public.forums_about_cats()\n#  returns setof app_public.forums\n#  language sql stable\n#  as $$\n#    select *\n#    from app_public.forums\n#    where slug like 'cat-%';\n#  $$;\n","exampleLanguage":"graphql","result":"{\n  \"forumsAboutCats\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDNd\",\n        \"id\": 3,\n        \"name\": \"Cat Life\",\n        \"slug\": \"cat-life\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDRd\",\n        \"id\": 4,\n        \"name\": \"Cat Help\",\n        \"slug\": \"cat-help\"\n      }\n    ]\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"930fee5d-1349-51dd-b08e-4860ade62c30","title":"Custom mutations","examples":[{"title":"Forgot password","example":"mutation {\n  forgotPassword(\n    input: {\n      email: \"benjie@example.com\"\n    }\n  ) {\n    success\n  }\n}\n\n# Generated with SQL like this:\n#\n#  create function forgot_password(email text)\n#  returns boolean\n#  language plpgsql volatile\n#  as $$\n#    ...\n#  $$;\n#\n#  -- Optionally rename the result field:\n#  comment on function\n#    forgot_password(email text)\n#    is '@resultFieldName success';\n","exampleLanguage":"graphql","result":"{\n  \"forgotPassword\": {\n    \"success\": true\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"94982c6f-daf0-57dd-b38b-8002654b07bc","title":"Computed columns","examples":[{"title":"Topic summary","example":"{\n  topic(id: 2) {\n    body\n    bodySummary\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n","exampleLanguage":"graphql","result":"{\n  \"topic\": {\n    \"body\": \"PostGraphile is a powerful, idomatic, and elegant tool.\",\n    \"bodySummary\": \"PostGraphile is a powerful,...\"\n  }\n}\n","resultLanguage":"json"},{"title":"Topic summary with arg","example":"{\n  topic(id: 2) {\n    body\n    bodySummary(maxLength: 20)\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n","exampleLanguage":"graphql","result":"{\n  \"topic\": {\n    \"body\": \"PostGraphile is a powerful, idomatic, and elegant tool.\",\n    \"bodySummary\": \"PostGraphile is a...\"\n  }\n}\n","resultLanguage":"json"}]}}]}},"pageContext":{"slug":"/postgraphile/usage-library/","layout":"page"}}}